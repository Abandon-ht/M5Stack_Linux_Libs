# component2/SConscript
Import('env')
import os
from pathlib import Path
with open(env['PROJECT_TOOL_S']) as f:
    exec(f.read())

freetype_source_url = 'https://download.savannah.gnu.org/releases/freetype/freetype-2.13.2.tar.xz'
libfreetype_build_dir = str(Path(env['PROJECT_PATH'])/'build'/'freetype_component'/'libfreetype')

def get_source():
    import sys
    import urllib.request
    import tarfile
    
    if not sys.platform.startswith('linux'):
        print('auto build not support!')
        print('please install freetype for you self!')
        exit(-1)
    run_status = 0
    while True:
        if run_status == 0:
            if os.path.exists(str(Path(libfreetype_build_dir)/'install')):
                return
            run_status = 10
        elif run_status == 10:
            if not os.path.exists(str(AFile('../../github_source/freetype-2.13.2.tar.xz'))):
                urllib.request.urlretrieve(freetype_source_url, str(ADir('../../github_source/')))
            run_status = 20
        elif run_status == 20:
            if os.path.exists(str(ADir('../../github_source/freetype-2.13.2'))):
                run_status = 30
                continue
            tar_path = str(AFile('../../github_source/freetype-2.13.2.tar.xz'))
            target_dir = str(ADir('../../github_source'))
            with tarfile.open(tar_path, "r:xz") as tar:
                tar.extractall(path=target_dir)
            run_status = 30
        elif run_status == 30:
            host = os.environ['CONFIG_TOOLCHAIN_PREFIX'].strip('"')
            if host == 'cc' or host == 'gcc' or host == '':
                host = ''
            else:
                host = f'--host={host.rstrip("-")}'
            gcc_ent = os.environ['CONFIG_TOOLCHAIN_PATH'].strip('"')
            if gcc_ent != '':
                gcc_ent = f'export PATH={gcc_ent}:$PATH ;'

            if not os.path.exists(libfreetype_build_dir):
                os.makedirs(libfreetype_build_dir)

            bash_cmd_str = gcc_ent
            bash_cmd_str += f'cd {libfreetype_build_dir} ;'

            bash_cmd_str += f'{str(AFile("../../github_source/freetype-2.13.2/configure"))} '
            bash_cmd_str += f'{host} '
            bash_cmd_str += '--with-zlib=no '
            bash_cmd_str += '--with-bzip2=no '
            bash_cmd_str += '--with-png=no '
            bash_cmd_str += '--with-brotli=no '
            bash_cmd_str += '--with-librsvg=no '
            bash_cmd_str += '--with-harfbuzz=no '
            bash_cmd_str += f'--prefix={str(Path(libfreetype_build_dir)/"install")} ;'

            bash_cmd_str += 'make -j ;'
            bash_cmd_str += 'make install'

            os.system(bash_cmd_str)
            return 

if 'CONFIG_FREETYPE_ENABLED' in os.environ:
    SRCS=[AFile('test.c')]
    INCLUDE=[]
    PRIVATE_INCLUDE=[]
    REQUIREMENTS=[]
    STATIC_LIB=[]
    DYNAMIC_LIB=[]
    DEFINITIONS=[]
    DEFINITIONS_PRIVATE=[]
    LDFLAGS=[]
    LINK_SEARCH_PATH=[]
    get_source()
    INCLUDE.append(ADir(libfreetype_build_dir + '/install/include/freetype2'))
    STATIC_LIB.append(AFile(libfreetype_build_dir + '/install/lib/libfreetype.a'))


    env['COMPONENTS'].append({'target':os.path.basename(env['component_dir']),
                            'SRCS':SRCS,
                            'INCLUDE':INCLUDE,
                            'PRIVATE_INCLUDE':PRIVATE_INCLUDE,
                            'REQUIREMENTS':REQUIREMENTS,
                            'STATIC_LIB':STATIC_LIB,
                            'DYNAMIC_LIB':DYNAMIC_LIB,
                            'DEFINITIONS':DEFINITIONS,
                            'DEFINITIONS_PRIVATE':DEFINITIONS_PRIVATE,
                            'LDFLAGS':LDFLAGS,
                            'LINK_SEARCH_PATH':LINK_SEARCH_PATH,
                            'REGISTER':'static'
                            })
