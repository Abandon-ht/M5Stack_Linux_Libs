// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/device.proto

#include "device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Device_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_TagsEntry_DoNotUse_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_VariablesEntry_DoNotUse_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceActivation_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceKeys_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceListItem_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceQueueItem_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceState_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStatus_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeviceMetricsResponse_StatesEntry_DoNotUse_api_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinServerContext_common_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Metric_common_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace api {
class Device_VariablesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device_VariablesEntry_DoNotUse> _instance;
} _Device_VariablesEntry_DoNotUse_default_instance_;
class Device_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device_TagsEntry_DoNotUse> _instance;
} _Device_TagsEntry_DoNotUse_default_instance_;
class DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device> _instance;
} _Device_default_instance_;
class DeviceStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStatus> _instance;
} _DeviceStatus_default_instance_;
class DeviceListItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceListItem> _instance;
} _DeviceListItem_default_instance_;
class DeviceKeysDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceKeys> _instance;
} _DeviceKeys_default_instance_;
class CreateDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDeviceRequest> _instance;
} _CreateDeviceRequest_default_instance_;
class GetDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceRequest> _instance;
} _GetDeviceRequest_default_instance_;
class GetDeviceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceResponse> _instance;
} _GetDeviceResponse_default_instance_;
class UpdateDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDeviceRequest> _instance;
} _UpdateDeviceRequest_default_instance_;
class DeleteDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDeviceRequest> _instance;
} _DeleteDeviceRequest_default_instance_;
class ListDevicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDevicesRequest> _instance;
} _ListDevicesRequest_default_instance_;
class ListDevicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDevicesResponse> _instance;
} _ListDevicesResponse_default_instance_;
class CreateDeviceKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDeviceKeysRequest> _instance;
} _CreateDeviceKeysRequest_default_instance_;
class GetDeviceKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceKeysRequest> _instance;
} _GetDeviceKeysRequest_default_instance_;
class GetDeviceKeysResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceKeysResponse> _instance;
} _GetDeviceKeysResponse_default_instance_;
class UpdateDeviceKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDeviceKeysRequest> _instance;
} _UpdateDeviceKeysRequest_default_instance_;
class DeleteDeviceKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDeviceKeysRequest> _instance;
} _DeleteDeviceKeysRequest_default_instance_;
class DeviceActivationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceActivation> _instance;
} _DeviceActivation_default_instance_;
class ActivateDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivateDeviceRequest> _instance;
} _ActivateDeviceRequest_default_instance_;
class DeactivateDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeactivateDeviceRequest> _instance;
} _DeactivateDeviceRequest_default_instance_;
class GetDeviceActivationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceActivationRequest> _instance;
} _GetDeviceActivationRequest_default_instance_;
class GetDeviceActivationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceActivationResponse> _instance;
} _GetDeviceActivationResponse_default_instance_;
class GetRandomDevAddrRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRandomDevAddrRequest> _instance;
} _GetRandomDevAddrRequest_default_instance_;
class GetRandomDevAddrResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRandomDevAddrResponse> _instance;
} _GetRandomDevAddrResponse_default_instance_;
class GetDeviceMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceMetricsRequest> _instance;
} _GetDeviceMetricsRequest_default_instance_;
class GetDeviceMetricsResponse_MetricsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceMetricsResponse_MetricsEntry_DoNotUse> _instance;
} _GetDeviceMetricsResponse_MetricsEntry_DoNotUse_default_instance_;
class GetDeviceMetricsResponse_StatesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceMetricsResponse_StatesEntry_DoNotUse> _instance;
} _GetDeviceMetricsResponse_StatesEntry_DoNotUse_default_instance_;
class GetDeviceMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceMetricsResponse> _instance;
} _GetDeviceMetricsResponse_default_instance_;
class DeviceStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceState> _instance;
} _DeviceState_default_instance_;
class GetDeviceLinkMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceLinkMetricsRequest> _instance;
} _GetDeviceLinkMetricsRequest_default_instance_;
class GetDeviceLinkMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceLinkMetricsResponse> _instance;
} _GetDeviceLinkMetricsResponse_default_instance_;
class DeviceQueueItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceQueueItem> _instance;
} _DeviceQueueItem_default_instance_;
class EnqueueDeviceQueueItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnqueueDeviceQueueItemRequest> _instance;
} _EnqueueDeviceQueueItemRequest_default_instance_;
class EnqueueDeviceQueueItemResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnqueueDeviceQueueItemResponse> _instance;
} _EnqueueDeviceQueueItemResponse_default_instance_;
class FlushDeviceQueueRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushDeviceQueueRequest> _instance;
} _FlushDeviceQueueRequest_default_instance_;
class GetDeviceQueueItemsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceQueueItemsRequest> _instance;
} _GetDeviceQueueItemsRequest_default_instance_;
class GetDeviceQueueItemsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceQueueItemsResponse> _instance;
} _GetDeviceQueueItemsResponse_default_instance_;
class FlushDevNoncesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushDevNoncesRequest> _instance;
} _FlushDevNoncesRequest_default_instance_;
class GetDeviceNextFCntDownRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceNextFCntDownRequest> _instance;
} _GetDeviceNextFCntDownRequest_default_instance_;
class GetDeviceNextFCntDownResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceNextFCntDownResponse> _instance;
} _GetDeviceNextFCntDownResponse_default_instance_;
}  // namespace api
static void InitDefaultsscc_info_ActivateDeviceRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ActivateDeviceRequest_default_instance_;
    new (ptr) ::api::ActivateDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ActivateDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivateDeviceRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActivateDeviceRequest_api_2fdevice_2eproto}, {
      &scc_info_DeviceActivation_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_CreateDeviceKeysRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CreateDeviceKeysRequest_default_instance_;
    new (ptr) ::api::CreateDeviceKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::CreateDeviceKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateDeviceKeysRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateDeviceKeysRequest_api_2fdevice_2eproto}, {
      &scc_info_DeviceKeys_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_CreateDeviceRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CreateDeviceRequest_default_instance_;
    new (ptr) ::api::CreateDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::CreateDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateDeviceRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateDeviceRequest_api_2fdevice_2eproto}, {
      &scc_info_Device_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_DeactivateDeviceRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DeactivateDeviceRequest_default_instance_;
    new (ptr) ::api::DeactivateDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::DeactivateDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeactivateDeviceRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeactivateDeviceRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteDeviceKeysRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DeleteDeviceKeysRequest_default_instance_;
    new (ptr) ::api::DeleteDeviceKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::DeleteDeviceKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDeviceKeysRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDeviceKeysRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteDeviceRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DeleteDeviceRequest_default_instance_;
    new (ptr) ::api::DeleteDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::DeleteDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDeviceRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDeviceRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_Device_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Device_default_instance_;
    new (ptr) ::api::Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Device_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Device_api_2fdevice_2eproto}, {
      &scc_info_Device_VariablesEntry_DoNotUse_api_2fdevice_2eproto.base,
      &scc_info_Device_TagsEntry_DoNotUse_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_Device_TagsEntry_DoNotUse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Device_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::api::Device_TagsEntry_DoNotUse();
  }
  ::api::Device_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_TagsEntry_DoNotUse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Device_TagsEntry_DoNotUse_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_Device_VariablesEntry_DoNotUse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Device_VariablesEntry_DoNotUse_default_instance_;
    new (ptr) ::api::Device_VariablesEntry_DoNotUse();
  }
  ::api::Device_VariablesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_VariablesEntry_DoNotUse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Device_VariablesEntry_DoNotUse_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeviceActivation_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DeviceActivation_default_instance_;
    new (ptr) ::api::DeviceActivation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::DeviceActivation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceActivation_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceActivation_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeviceKeys_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DeviceKeys_default_instance_;
    new (ptr) ::api::DeviceKeys();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::DeviceKeys::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceKeys_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceKeys_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeviceListItem_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DeviceListItem_default_instance_;
    new (ptr) ::api::DeviceListItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::DeviceListItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceListItem_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeviceListItem_api_2fdevice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_DeviceStatus_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_DeviceQueueItem_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DeviceQueueItem_default_instance_;
    new (ptr) ::api::DeviceQueueItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::DeviceQueueItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceQueueItem_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceQueueItem_api_2fdevice_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_DeviceState_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DeviceState_default_instance_;
    new (ptr) ::api::DeviceState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::DeviceState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceState_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceState_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeviceStatus_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DeviceStatus_default_instance_;
    new (ptr) ::api::DeviceStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::DeviceStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStatus_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceStatus_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_EnqueueDeviceQueueItemRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_EnqueueDeviceQueueItemRequest_default_instance_;
    new (ptr) ::api::EnqueueDeviceQueueItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::EnqueueDeviceQueueItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnqueueDeviceQueueItemRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnqueueDeviceQueueItemRequest_api_2fdevice_2eproto}, {
      &scc_info_DeviceQueueItem_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_EnqueueDeviceQueueItemResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_EnqueueDeviceQueueItemResponse_default_instance_;
    new (ptr) ::api::EnqueueDeviceQueueItemResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::EnqueueDeviceQueueItemResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnqueueDeviceQueueItemResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnqueueDeviceQueueItemResponse_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_FlushDevNoncesRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_FlushDevNoncesRequest_default_instance_;
    new (ptr) ::api::FlushDevNoncesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::FlushDevNoncesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushDevNoncesRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlushDevNoncesRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_FlushDeviceQueueRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_FlushDeviceQueueRequest_default_instance_;
    new (ptr) ::api::FlushDeviceQueueRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::FlushDeviceQueueRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushDeviceQueueRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlushDeviceQueueRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetDeviceActivationRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceActivationRequest_default_instance_;
    new (ptr) ::api::GetDeviceActivationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceActivationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceActivationRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeviceActivationRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetDeviceActivationResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceActivationResponse_default_instance_;
    new (ptr) ::api::GetDeviceActivationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceActivationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetDeviceActivationResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetDeviceActivationResponse_api_2fdevice_2eproto}, {
      &scc_info_DeviceActivation_api_2fdevice_2eproto.base,
      &scc_info_JoinServerContext_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceKeysRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceKeysRequest_default_instance_;
    new (ptr) ::api::GetDeviceKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceKeysRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeviceKeysRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetDeviceKeysResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceKeysResponse_default_instance_;
    new (ptr) ::api::GetDeviceKeysResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceKeysResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetDeviceKeysResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetDeviceKeysResponse_api_2fdevice_2eproto}, {
      &scc_info_DeviceKeys_api_2fdevice_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceLinkMetricsRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceLinkMetricsRequest_default_instance_;
    new (ptr) ::api::GetDeviceLinkMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceLinkMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeviceLinkMetricsRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDeviceLinkMetricsRequest_api_2fdevice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceLinkMetricsResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceLinkMetricsResponse_default_instance_;
    new (ptr) ::api::GetDeviceLinkMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceLinkMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeviceLinkMetricsResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDeviceLinkMetricsResponse_api_2fdevice_2eproto}, {
      &scc_info_Metric_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceMetricsRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceMetricsRequest_default_instance_;
    new (ptr) ::api::GetDeviceMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeviceMetricsRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDeviceMetricsRequest_api_2fdevice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceMetricsResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceMetricsResponse_default_instance_;
    new (ptr) ::api::GetDeviceMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetDeviceMetricsResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetDeviceMetricsResponse_api_2fdevice_2eproto}, {
      &scc_info_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_api_2fdevice_2eproto.base,
      &scc_info_GetDeviceMetricsResponse_StatesEntry_DoNotUse_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_default_instance_;
    new (ptr) ::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse();
  }
  ::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_api_2fdevice_2eproto}, {
      &scc_info_Metric_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceMetricsResponse_StatesEntry_DoNotUse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceMetricsResponse_StatesEntry_DoNotUse_default_instance_;
    new (ptr) ::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse();
  }
  ::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeviceMetricsResponse_StatesEntry_DoNotUse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDeviceMetricsResponse_StatesEntry_DoNotUse_api_2fdevice_2eproto}, {
      &scc_info_DeviceState_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceNextFCntDownRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceNextFCntDownRequest_default_instance_;
    new (ptr) ::api::GetDeviceNextFCntDownRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceNextFCntDownRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceNextFCntDownRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeviceNextFCntDownRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetDeviceNextFCntDownResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceNextFCntDownResponse_default_instance_;
    new (ptr) ::api::GetDeviceNextFCntDownResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceNextFCntDownResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceNextFCntDownResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeviceNextFCntDownResponse_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetDeviceQueueItemsRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceQueueItemsRequest_default_instance_;
    new (ptr) ::api::GetDeviceQueueItemsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceQueueItemsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceQueueItemsRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeviceQueueItemsRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetDeviceQueueItemsResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceQueueItemsResponse_default_instance_;
    new (ptr) ::api::GetDeviceQueueItemsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceQueueItemsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeviceQueueItemsResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDeviceQueueItemsResponse_api_2fdevice_2eproto}, {
      &scc_info_DeviceQueueItem_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceRequest_default_instance_;
    new (ptr) ::api::GetDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeviceRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetDeviceResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetDeviceResponse_default_instance_;
    new (ptr) ::api::GetDeviceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetDeviceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetDeviceResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetDeviceResponse_api_2fdevice_2eproto}, {
      &scc_info_Device_api_2fdevice_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_DeviceStatus_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_GetRandomDevAddrRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetRandomDevAddrRequest_default_instance_;
    new (ptr) ::api::GetRandomDevAddrRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetRandomDevAddrRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRandomDevAddrRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRandomDevAddrRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_GetRandomDevAddrResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetRandomDevAddrResponse_default_instance_;
    new (ptr) ::api::GetRandomDevAddrResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetRandomDevAddrResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRandomDevAddrResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRandomDevAddrResponse_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_ListDevicesRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ListDevicesRequest_default_instance_;
    new (ptr) ::api::ListDevicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ListDevicesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListDevicesRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListDevicesRequest_api_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_ListDevicesResponse_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ListDevicesResponse_default_instance_;
    new (ptr) ::api::ListDevicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ListDevicesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListDevicesResponse_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListDevicesResponse_api_2fdevice_2eproto}, {
      &scc_info_DeviceListItem_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_UpdateDeviceKeysRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_UpdateDeviceKeysRequest_default_instance_;
    new (ptr) ::api::UpdateDeviceKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::UpdateDeviceKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDeviceKeysRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateDeviceKeysRequest_api_2fdevice_2eproto}, {
      &scc_info_DeviceKeys_api_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_UpdateDeviceRequest_api_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_UpdateDeviceRequest_default_instance_;
    new (ptr) ::api::UpdateDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::UpdateDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateDeviceRequest_api_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateDeviceRequest_api_2fdevice_2eproto}, {
      &scc_info_Device_api_2fdevice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2fdevice_2eproto[41];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_api_2fdevice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2fdevice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2fdevice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::api::Device_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::Device_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Device_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::Device_VariablesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::api::Device_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::Device_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Device_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::Device_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Device, dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::Device, name_),
  PROTOBUF_FIELD_OFFSET(::api::Device, description_),
  PROTOBUF_FIELD_OFFSET(::api::Device, application_id_),
  PROTOBUF_FIELD_OFFSET(::api::Device, device_profile_id_),
  PROTOBUF_FIELD_OFFSET(::api::Device, skip_fcnt_check_),
  PROTOBUF_FIELD_OFFSET(::api::Device, is_disabled_),
  PROTOBUF_FIELD_OFFSET(::api::Device, variables_),
  PROTOBUF_FIELD_OFFSET(::api::Device, tags_),
  PROTOBUF_FIELD_OFFSET(::api::Device, join_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DeviceStatus, margin_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceStatus, external_power_source_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceStatus, battery_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, created_at_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, updated_at_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, last_seen_at_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, name_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, description_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, device_profile_id_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, device_profile_name_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, device_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceKeys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DeviceKeys, dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceKeys, nwk_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceKeys, app_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CreateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CreateDeviceRequest, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, device_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, created_at_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, updated_at_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, last_seen_at_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, device_status_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, class_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::UpdateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::UpdateDeviceRequest, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeleteDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DeleteDeviceRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, search_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, application_id_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, multicast_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesResponse, total_count_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CreateDeviceKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CreateDeviceKeysRequest, device_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysResponse, device_keys_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysResponse, created_at_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysResponse, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::UpdateDeviceKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::UpdateDeviceKeysRequest, device_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeleteDeviceKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DeleteDeviceKeysRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, dev_addr_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, app_s_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, nwk_s_enc_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, s_nwk_s_int_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, f_nwk_s_int_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, f_cnt_up_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, n_f_cnt_down_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, a_f_cnt_down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ActivateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ActivateDeviceRequest, device_activation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeactivateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DeactivateDeviceRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationResponse, device_activation_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationResponse, join_server_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetRandomDevAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetRandomDevAddrRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetRandomDevAddrResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetRandomDevAddrResponse, dev_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, start_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, end_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, aggregation_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse, metrics_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DeviceState, name_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceState, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, start_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, end_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, aggregation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, rx_packets_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, gw_rssi_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, gw_snr_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, rx_packets_per_freq_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, rx_packets_per_dr_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, id_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, confirmed_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, f_port_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, data_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, object_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, is_pending_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, f_cnt_down_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, is_encrypted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::EnqueueDeviceQueueItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::EnqueueDeviceQueueItemRequest, queue_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::EnqueueDeviceQueueItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::EnqueueDeviceQueueItemResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::FlushDeviceQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::FlushDeviceQueueRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsRequest, dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsRequest, count_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsResponse, total_count_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::FlushDevNoncesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::FlushDevNoncesRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceNextFCntDownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceNextFCntDownRequest, dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceNextFCntDownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceNextFCntDownResponse, f_cnt_down_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::api::Device_VariablesEntry_DoNotUse)},
  { 9, 16, sizeof(::api::Device_TagsEntry_DoNotUse)},
  { 18, -1, sizeof(::api::Device)},
  { 33, -1, sizeof(::api::DeviceStatus)},
  { 41, -1, sizeof(::api::DeviceListItem)},
  { 55, -1, sizeof(::api::DeviceKeys)},
  { 63, -1, sizeof(::api::CreateDeviceRequest)},
  { 69, -1, sizeof(::api::GetDeviceRequest)},
  { 75, -1, sizeof(::api::GetDeviceResponse)},
  { 86, -1, sizeof(::api::UpdateDeviceRequest)},
  { 92, -1, sizeof(::api::DeleteDeviceRequest)},
  { 98, -1, sizeof(::api::ListDevicesRequest)},
  { 108, -1, sizeof(::api::ListDevicesResponse)},
  { 115, -1, sizeof(::api::CreateDeviceKeysRequest)},
  { 121, -1, sizeof(::api::GetDeviceKeysRequest)},
  { 127, -1, sizeof(::api::GetDeviceKeysResponse)},
  { 135, -1, sizeof(::api::UpdateDeviceKeysRequest)},
  { 141, -1, sizeof(::api::DeleteDeviceKeysRequest)},
  { 147, -1, sizeof(::api::DeviceActivation)},
  { 161, -1, sizeof(::api::ActivateDeviceRequest)},
  { 167, -1, sizeof(::api::DeactivateDeviceRequest)},
  { 173, -1, sizeof(::api::GetDeviceActivationRequest)},
  { 179, -1, sizeof(::api::GetDeviceActivationResponse)},
  { 186, -1, sizeof(::api::GetRandomDevAddrRequest)},
  { 192, -1, sizeof(::api::GetRandomDevAddrResponse)},
  { 198, -1, sizeof(::api::GetDeviceMetricsRequest)},
  { 207, 214, sizeof(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse)},
  { 216, 223, sizeof(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse)},
  { 225, -1, sizeof(::api::GetDeviceMetricsResponse)},
  { 232, -1, sizeof(::api::DeviceState)},
  { 239, -1, sizeof(::api::GetDeviceLinkMetricsRequest)},
  { 248, -1, sizeof(::api::GetDeviceLinkMetricsResponse)},
  { 259, -1, sizeof(::api::DeviceQueueItem)},
  { 273, -1, sizeof(::api::EnqueueDeviceQueueItemRequest)},
  { 279, -1, sizeof(::api::EnqueueDeviceQueueItemResponse)},
  { 285, -1, sizeof(::api::FlushDeviceQueueRequest)},
  { 291, -1, sizeof(::api::GetDeviceQueueItemsRequest)},
  { 298, -1, sizeof(::api::GetDeviceQueueItemsResponse)},
  { 305, -1, sizeof(::api::FlushDevNoncesRequest)},
  { 311, -1, sizeof(::api::GetDeviceNextFCntDownRequest)},
  { 317, -1, sizeof(::api::GetDeviceNextFCntDownResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_Device_VariablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_Device_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DeviceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DeviceListItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DeviceKeys_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_CreateDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_UpdateDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DeleteDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ListDevicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ListDevicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_CreateDeviceKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceKeysResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_UpdateDeviceKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DeleteDeviceKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DeviceActivation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ActivateDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DeactivateDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceActivationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceActivationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetRandomDevAddrRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetRandomDevAddrResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceMetricsResponse_StatesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DeviceState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceLinkMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceLinkMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DeviceQueueItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_EnqueueDeviceQueueItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_EnqueueDeviceQueueItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_FlushDeviceQueueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceQueueItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceQueueItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_FlushDevNoncesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceNextFCntDownRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetDeviceNextFCntDownResponse_default_instance_),
};

const char descriptor_table_protodef_api_2fdevice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020api/device.proto\022\003api\032\023common/common.p"
  "roto\032\034google/api/annotations.proto\032\037goog"
  "le/protobuf/timestamp.proto\032\034google/prot"
  "obuf/struct.proto\032\033google/protobuf/empty"
  ".proto\"\342\002\n\006Device\022\017\n\007dev_eui\030\001 \001(\t\022\014\n\004na"
  "me\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\026\n\016applica"
  "tion_id\030\004 \001(\t\022\031\n\021device_profile_id\030\005 \001(\t"
  "\022\027\n\017skip_fcnt_check\030\006 \001(\010\022\023\n\013is_disabled"
  "\030\007 \001(\010\022-\n\tvariables\030\010 \003(\0132\032.api.Device.V"
  "ariablesEntry\022#\n\004tags\030\t \003(\0132\025.api.Device"
  ".TagsEntry\022\020\n\010join_eui\030\n \001(\t\0320\n\016Variable"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032+"
  "\n\tTagsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
  "\0028\001\"T\n\014DeviceStatus\022\016\n\006margin\030\001 \001(\005\022\035\n\025e"
  "xternal_power_source\030\002 \001(\010\022\025\n\rbattery_le"
  "vel\030\003 \001(\002\"\270\002\n\016DeviceListItem\022\017\n\007dev_eui\030"
  "\001 \001(\t\022.\n\ncreated_at\030\002 \001(\0132\032.google.proto"
  "buf.Timestamp\022.\n\nupdated_at\030\003 \001(\0132\032.goog"
  "le.protobuf.Timestamp\0220\n\014last_seen_at\030\004 "
  "\001(\0132\032.google.protobuf.Timestamp\022\014\n\004name\030"
  "\005 \001(\t\022\023\n\013description\030\006 \001(\t\022\031\n\021device_pro"
  "file_id\030\007 \001(\t\022\033\n\023device_profile_name\030\010 \001"
  "(\t\022(\n\rdevice_status\030\t \001(\0132\021.api.DeviceSt"
  "atus\"\?\n\nDeviceKeys\022\017\n\007dev_eui\030\001 \001(\t\022\017\n\007n"
  "wk_key\030\002 \001(\t\022\017\n\007app_key\030\003 \001(\t\"2\n\023CreateD"
  "eviceRequest\022\033\n\006device\030\001 \001(\0132\013.api.Devic"
  "e\"#\n\020GetDeviceRequest\022\017\n\007dev_eui\030\001 \001(\t\"\230"
  "\002\n\021GetDeviceResponse\022\033\n\006device\030\001 \001(\0132\013.a"
  "pi.Device\022.\n\ncreated_at\030\002 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022.\n\nupdated_at\030\003 \001(\0132\032."
  "google.protobuf.Timestamp\0220\n\014last_seen_a"
  "t\030\004 \001(\0132\032.google.protobuf.Timestamp\022(\n\rd"
  "evice_status\030\005 \001(\0132\021.api.DeviceStatus\022*\n"
  "\rclass_enabled\030\006 \001(\0162\023.common.DeviceClas"
  "s\"2\n\023UpdateDeviceRequest\022\033\n\006device\030\001 \001(\013"
  "2\013.api.Device\"&\n\023DeleteDeviceRequest\022\017\n\007"
  "dev_eui\030\001 \001(\t\"w\n\022ListDevicesRequest\022\r\n\005l"
  "imit\030\001 \001(\r\022\016\n\006offset\030\002 \001(\r\022\016\n\006search\030\003 \001"
  "(\t\022\026\n\016application_id\030\004 \001(\t\022\032\n\022multicast_"
  "group_id\030\005 \001(\t\"O\n\023ListDevicesResponse\022\023\n"
  "\013total_count\030\001 \001(\r\022#\n\006result\030\002 \003(\0132\023.api"
  ".DeviceListItem\"\?\n\027CreateDeviceKeysReque"
  "st\022$\n\013device_keys\030\001 \001(\0132\017.api.DeviceKeys"
  "\"\'\n\024GetDeviceKeysRequest\022\017\n\007dev_eui\030\001 \001("
  "\t\"\235\001\n\025GetDeviceKeysResponse\022$\n\013device_ke"
  "ys\030\001 \001(\0132\017.api.DeviceKeys\022.\n\ncreated_at\030"
  "\002 \001(\0132\032.google.protobuf.Timestamp\022.\n\nupd"
  "ated_at\030\003 \001(\0132\032.google.protobuf.Timestam"
  "p\"\?\n\027UpdateDeviceKeysRequest\022$\n\013device_k"
  "eys\030\001 \001(\0132\017.api.DeviceKeys\"*\n\027DeleteDevi"
  "ceKeysRequest\022\017\n\007dev_eui\030\001 \001(\t\"\317\001\n\020Devic"
  "eActivation\022\017\n\007dev_eui\030\001 \001(\t\022\020\n\010dev_addr"
  "\030\002 \001(\t\022\021\n\tapp_s_key\030\003 \001(\t\022\025\n\rnwk_s_enc_k"
  "ey\030\004 \001(\t\022\027\n\017s_nwk_s_int_key\030\010 \001(\t\022\027\n\017f_n"
  "wk_s_int_key\030\t \001(\t\022\020\n\010f_cnt_up\030\005 \001(\r\022\024\n\014"
  "n_f_cnt_down\030\006 \001(\r\022\024\n\014a_f_cnt_down\030\n \001(\r"
  "\"I\n\025ActivateDeviceRequest\0220\n\021device_acti"
  "vation\030\001 \001(\0132\025.api.DeviceActivation\"*\n\027D"
  "eactivateDeviceRequest\022\017\n\007dev_eui\030\001 \001(\t\""
  "-\n\032GetDeviceActivationRequest\022\017\n\007dev_eui"
  "\030\001 \001(\t\"\207\001\n\033GetDeviceActivationResponse\0220"
  "\n\021device_activation\030\001 \001(\0132\025.api.DeviceAc"
  "tivation\0226\n\023join_server_context\030\002 \001(\0132\031."
  "common.JoinServerContext\"*\n\027GetRandomDev"
  "AddrRequest\022\017\n\007dev_eui\030\001 \001(\t\",\n\030GetRando"
  "mDevAddrResponse\022\020\n\010dev_addr\030\001 \001(\t\"\250\001\n\027G"
  "etDeviceMetricsRequest\022\017\n\007dev_eui\030\001 \001(\t\022"
  ")\n\005start\030\002 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\'\n\003end\030\003 \001(\0132\032.google.protobuf.Timest"
  "amp\022(\n\013aggregation\030\004 \001(\0162\023.common.Aggreg"
  "ation\"\223\002\n\030GetDeviceMetricsResponse\022;\n\007me"
  "trics\030\001 \003(\0132*.api.GetDeviceMetricsRespon"
  "se.MetricsEntry\0229\n\006states\030\002 \003(\0132).api.Ge"
  "tDeviceMetricsResponse.StatesEntry\032>\n\014Me"
  "tricsEntry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016"
  ".common.Metric:\0028\001\032\?\n\013StatesEntry\022\013\n\003key"
  "\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020.api.DeviceState:"
  "\0028\001\"*\n\013DeviceState\022\014\n\004name\030\002 \001(\t\022\r\n\005valu"
  "e\030\003 \001(\t\"\254\001\n\033GetDeviceLinkMetricsRequest\022"
  "\017\n\007dev_eui\030\001 \001(\t\022)\n\005start\030\002 \001(\0132\032.google"
  ".protobuf.Timestamp\022\'\n\003end\030\003 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022(\n\013aggregation\030\004 \001("
  "\0162\023.common.Aggregation\"\373\001\n\034GetDeviceLink"
  "MetricsResponse\022\"\n\nrx_packets\030\001 \001(\0132\016.co"
  "mmon.Metric\022\037\n\007gw_rssi\030\002 \001(\0132\016.common.Me"
  "tric\022\036\n\006gw_snr\030\003 \001(\0132\016.common.Metric\022+\n\023"
  "rx_packets_per_freq\030\004 \001(\0132\016.common.Metri"
  "c\022)\n\021rx_packets_per_dr\030\005 \001(\0132\016.common.Me"
  "tric\022\036\n\006errors\030\006 \001(\0132\016.common.Metric\"\306\001\n"
  "\017DeviceQueueItem\022\n\n\002id\030\001 \001(\t\022\017\n\007dev_eui\030"
  "\002 \001(\t\022\021\n\tconfirmed\030\003 \001(\010\022\016\n\006f_port\030\004 \001(\r"
  "\022\014\n\004data\030\005 \001(\014\022\'\n\006object\030\006 \001(\0132\027.google."
  "protobuf.Struct\022\022\n\nis_pending\030\007 \001(\010\022\022\n\nf"
  "_cnt_down\030\010 \001(\r\022\024\n\014is_encrypted\030\t \001(\010\"I\n"
  "\035EnqueueDeviceQueueItemRequest\022(\n\nqueue_"
  "item\030\001 \001(\0132\024.api.DeviceQueueItem\",\n\036Enqu"
  "eueDeviceQueueItemResponse\022\n\n\002id\030\001 \001(\t\"*"
  "\n\027FlushDeviceQueueRequest\022\017\n\007dev_eui\030\001 \001"
  "(\t\"A\n\032GetDeviceQueueItemsRequest\022\017\n\007dev_"
  "eui\030\001 \001(\t\022\022\n\ncount_only\030\002 \001(\010\"X\n\033GetDevi"
  "ceQueueItemsResponse\022\023\n\013total_count\030\001 \001("
  "\r\022$\n\006result\030\002 \003(\0132\024.api.DeviceQueueItem\""
  "(\n\025FlushDevNoncesRequest\022\017\n\007dev_eui\030\001 \001("
  "\t\"/\n\034GetDeviceNextFCntDownRequest\022\017\n\007dev"
  "_eui\030\001 \001(\t\"3\n\035GetDeviceNextFCntDownRespo"
  "nse\022\022\n\nf_cnt_down\030\001 \001(\r2\342\021\n\rDeviceServic"
  "e\022S\n\006Create\022\030.api.CreateDeviceRequest\032\026."
  "google.protobuf.Empty\"\027\202\323\344\223\002\021\"\014/api/devi"
  "ces:\001*\022T\n\003Get\022\025.api.GetDeviceRequest\032\026.a"
  "pi.GetDeviceResponse\"\036\202\323\344\223\002\030\022\026/api/devic"
  "es/{dev_eui}\022d\n\006Update\022\030.api.UpdateDevic"
  "eRequest\032\026.google.protobuf.Empty\"(\202\323\344\223\002\""
  "\032\035/api/devices/{device.dev_eui}:\001*\022Z\n\006De"
  "lete\022\030.api.DeleteDeviceRequest\032\026.google."
  "protobuf.Empty\"\036\202\323\344\223\002\030*\026/api/devices/{de"
  "v_eui}\022O\n\004List\022\027.api.ListDevicesRequest\032"
  "\030.api.ListDevicesResponse\"\024\202\323\344\223\002\016\022\014/api/"
  "devices\022v\n\nCreateKeys\022\034.api.CreateDevice"
  "KeysRequest\032\026.google.protobuf.Empty\"2\202\323\344"
  "\223\002,\"\'/api/devices/{device_keys.dev_eui}/"
  "keys:\001*\022e\n\007GetKeys\022\031.api.GetDeviceKeysRe"
  "quest\032\032.api.GetDeviceKeysResponse\"#\202\323\344\223\002"
  "\035\022\033/api/devices/{dev_eui}/keys\022v\n\nUpdate"
  "Keys\022\034.api.UpdateDeviceKeysRequest\032\026.goo"
  "gle.protobuf.Empty\"2\202\323\344\223\002,\032\'/api/devices"
  "/{device_keys.dev_eui}/keys:\001*\022g\n\nDelete"
  "Keys\022\034.api.DeleteDeviceKeysRequest\032\026.goo"
  "gle.protobuf.Empty\"#\202\323\344\223\002\035*\033/api/devices"
  "/{dev_eui}/keys\022o\n\016FlushDevNonces\022\032.api."
  "FlushDevNoncesRequest\032\026.google.protobuf."
  "Empty\")\202\323\344\223\002#*!/api/devices/{dev_eui}/de"
  "v-nonces\022|\n\010Activate\022\032.api.ActivateDevic"
  "eRequest\032\026.google.protobuf.Empty\"<\202\323\344\223\0026"
  "\"1/api/devices/{device_activation.dev_eu"
  "i}/activate:\001*\022m\n\nDeactivate\022\034.api.Deact"
  "ivateDeviceRequest\032\026.google.protobuf.Emp"
  "ty\")\202\323\344\223\002#*!/api/devices/{dev_eui}/activ"
  "ation\022}\n\rGetActivation\022\037.api.GetDeviceAc"
  "tivationRequest\032 .api.GetDeviceActivatio"
  "nResponse\")\202\323\344\223\002#\022!/api/devices/{dev_eui"
  "}/activation\022\203\001\n\020GetRandomDevAddr\022\034.api."
  "GetRandomDevAddrRequest\032\035.api.GetRandomD"
  "evAddrResponse\"2\202\323\344\223\002,\"*/api/devices/{de"
  "v_eui}/get-random-dev-addr\022q\n\nGetMetrics"
  "\022\034.api.GetDeviceMetricsRequest\032\035.api.Get"
  "DeviceMetricsResponse\"&\202\323\344\223\002 \022\036/api/devi"
  "ces/{dev_eui}/metrics\022\202\001\n\016GetLinkMetrics"
  "\022 .api.GetDeviceLinkMetricsRequest\032!.api"
  ".GetDeviceLinkMetricsResponse\"+\202\323\344\223\002%\022#/"
  "api/devices/{dev_eui}/link-metrics\022\206\001\n\007E"
  "nqueue\022\".api.EnqueueDeviceQueueItemReque"
  "st\032#.api.EnqueueDeviceQueueItemResponse\""
  "2\202\323\344\223\002,\"\'/api/devices/{queue_item.dev_eu"
  "i}/queue:\001*\022h\n\nFlushQueue\022\034.api.FlushDev"
  "iceQueueRequest\032\026.google.protobuf.Empty\""
  "$\202\323\344\223\002\036*\034/api/devices/{dev_eui}/queue\022s\n"
  "\010GetQueue\022\037.api.GetDeviceQueueItemsReque"
  "st\032 .api.GetDeviceQueueItemsResponse\"$\202\323"
  "\344\223\002\036\022\034/api/devices/{dev_eui}/queue\022\217\001\n\017G"
  "etNextFCntDown\022!.api.GetDeviceNextFCntDo"
  "wnRequest\032\".api.GetDeviceNextFCntDownRes"
  "ponse\"5\202\323\344\223\002/\"*/api/devices/{dev_eui}/ge"
  "t-next-f-cnt-down:\001*Bc\n\021io.chirpstack.ap"
  "iB\013DeviceProtoP\001Z.github.com/chirpstack/"
  "chirpstack/api/go/v4/api\252\002\016Chirpstack.Ap"
  "ib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2fdevice_2eproto_deps[5] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_api_2fdevice_2eproto_sccs[41] = {
  &scc_info_ActivateDeviceRequest_api_2fdevice_2eproto.base,
  &scc_info_CreateDeviceKeysRequest_api_2fdevice_2eproto.base,
  &scc_info_CreateDeviceRequest_api_2fdevice_2eproto.base,
  &scc_info_DeactivateDeviceRequest_api_2fdevice_2eproto.base,
  &scc_info_DeleteDeviceKeysRequest_api_2fdevice_2eproto.base,
  &scc_info_DeleteDeviceRequest_api_2fdevice_2eproto.base,
  &scc_info_Device_api_2fdevice_2eproto.base,
  &scc_info_Device_TagsEntry_DoNotUse_api_2fdevice_2eproto.base,
  &scc_info_Device_VariablesEntry_DoNotUse_api_2fdevice_2eproto.base,
  &scc_info_DeviceActivation_api_2fdevice_2eproto.base,
  &scc_info_DeviceKeys_api_2fdevice_2eproto.base,
  &scc_info_DeviceListItem_api_2fdevice_2eproto.base,
  &scc_info_DeviceQueueItem_api_2fdevice_2eproto.base,
  &scc_info_DeviceState_api_2fdevice_2eproto.base,
  &scc_info_DeviceStatus_api_2fdevice_2eproto.base,
  &scc_info_EnqueueDeviceQueueItemRequest_api_2fdevice_2eproto.base,
  &scc_info_EnqueueDeviceQueueItemResponse_api_2fdevice_2eproto.base,
  &scc_info_FlushDevNoncesRequest_api_2fdevice_2eproto.base,
  &scc_info_FlushDeviceQueueRequest_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceActivationRequest_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceActivationResponse_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceKeysRequest_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceKeysResponse_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceLinkMetricsRequest_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceLinkMetricsResponse_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceMetricsRequest_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceMetricsResponse_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceMetricsResponse_StatesEntry_DoNotUse_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceNextFCntDownRequest_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceNextFCntDownResponse_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceQueueItemsRequest_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceQueueItemsResponse_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceRequest_api_2fdevice_2eproto.base,
  &scc_info_GetDeviceResponse_api_2fdevice_2eproto.base,
  &scc_info_GetRandomDevAddrRequest_api_2fdevice_2eproto.base,
  &scc_info_GetRandomDevAddrResponse_api_2fdevice_2eproto.base,
  &scc_info_ListDevicesRequest_api_2fdevice_2eproto.base,
  &scc_info_ListDevicesResponse_api_2fdevice_2eproto.base,
  &scc_info_UpdateDeviceKeysRequest_api_2fdevice_2eproto.base,
  &scc_info_UpdateDeviceRequest_api_2fdevice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2fdevice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2fdevice_2eproto = {
  false, false, descriptor_table_protodef_api_2fdevice_2eproto, "api/device.proto", 6609,
  &descriptor_table_api_2fdevice_2eproto_once, descriptor_table_api_2fdevice_2eproto_sccs, descriptor_table_api_2fdevice_2eproto_deps, 41, 5,
  schemas, file_default_instances, TableStruct_api_2fdevice_2eproto::offsets,
  file_level_metadata_api_2fdevice_2eproto, 41, file_level_enum_descriptors_api_2fdevice_2eproto, file_level_service_descriptors_api_2fdevice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_api_2fdevice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_api_2fdevice_2eproto)), true);
namespace api {

// ===================================================================

Device_VariablesEntry_DoNotUse::Device_VariablesEntry_DoNotUse() {}
Device_VariablesEntry_DoNotUse::Device_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Device_VariablesEntry_DoNotUse::MergeFrom(const Device_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Device_VariablesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Device_VariablesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Device_TagsEntry_DoNotUse::Device_TagsEntry_DoNotUse() {}
Device_TagsEntry_DoNotUse::Device_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Device_TagsEntry_DoNotUse::MergeFrom(const Device_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Device_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Device_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Device::InitAsDefaultInstance() {
}
class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variables_(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  variables_.MergeFrom(from.variables_);
  tags_.MergeFrom(from.tags_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_application_id(),
      GetArena());
  }
  device_profile_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_profile_id().empty()) {
    device_profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_profile_id(),
      GetArena());
  }
  join_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_join_eui().empty()) {
    join_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_join_eui(),
      GetArena());
  }
  ::memcpy(&skip_fcnt_check_, &from.skip_fcnt_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_disabled_) -
    reinterpret_cast<char*>(&skip_fcnt_check_)) + sizeof(is_disabled_));
  // @@protoc_insertion_point(copy_constructor:api.Device)
}

void Device::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Device_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_profile_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  join_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&skip_fcnt_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_disabled_) -
      reinterpret_cast<char*>(&skip_fcnt_check_)) + sizeof(is_disabled_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:api.Device)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_profile_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  join_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  (void)_this;
}
void Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Device& Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Device_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  tags_.Clear();
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  application_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_profile_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  join_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&skip_fcnt_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_disabled_) -
      reinterpret_cast<char*>(&skip_fcnt_check_)) + sizeof(is_disabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Device.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Device.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Device.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Device.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_profile_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_device_profile_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Device.device_profile_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_fcnt_check = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          skip_fcnt_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_disabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> variables = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string join_eui = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_join_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Device.join_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string application_id = 4;
  if (this->application_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.application_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_application_id(), target);
  }

  // string device_profile_id = 5;
  if (this->device_profile_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_profile_id().data(), static_cast<int>(this->_internal_device_profile_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.device_profile_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_profile_id(), target);
  }

  // bool skip_fcnt_check = 6;
  if (this->skip_fcnt_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_skip_fcnt_check(), target);
  }

  // bool is_disabled = 7;
  if (this->is_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_disabled(), target);
  }

  // map<string, string> variables = 8;
  if (!this->_internal_variables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api.Device.VariablesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api.Device.VariablesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_variables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_variables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_variables().begin();
          it != this->_internal_variables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Device_VariablesEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_variables().begin();
          it != this->_internal_variables().end(); ++it) {
        target = Device_VariablesEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> tags = 9;
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api.Device.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api.Device.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Device_TagsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = Device_TagsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string join_eui = 10;
  if (this->join_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_join_eui().data(), static_cast<int>(this->_internal_join_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.join_eui");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_join_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += Device_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> tags = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += Device_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string application_id = 4;
  if (this->application_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string device_profile_id = 5;
  if (this->device_profile_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_profile_id());
  }

  // string join_eui = 10;
  if (this->join_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_join_eui());
  }

  // bool skip_fcnt_check = 6;
  if (this->skip_fcnt_check() != 0) {
    total_size += 1 + 1;
  }

  // bool is_disabled = 7;
  if (this->is_disabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
  tags_.MergeFrom(from.tags_);
  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.application_id().size() > 0) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (from.device_profile_id().size() > 0) {
    _internal_set_device_profile_id(from._internal_device_profile_id());
  }
  if (from.join_eui().size() > 0) {
    _internal_set_join_eui(from._internal_join_eui());
  }
  if (from.skip_fcnt_check() != 0) {
    _internal_set_skip_fcnt_check(from._internal_skip_fcnt_check());
  }
  if (from.is_disabled() != 0) {
    _internal_set_is_disabled(from._internal_is_disabled());
  }
}

void Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  variables_.Swap(&other->variables_);
  tags_.Swap(&other->tags_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  application_id_.Swap(&other->application_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_profile_id_.Swap(&other->device_profile_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  join_eui_.Swap(&other->join_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, is_disabled_)
      + sizeof(Device::is_disabled_)
      - PROTOBUF_FIELD_OFFSET(Device, skip_fcnt_check_)>(
          reinterpret_cast<char*>(&skip_fcnt_check_),
          reinterpret_cast<char*>(&other->skip_fcnt_check_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceStatus::InitAsDefaultInstance() {
}
class DeviceStatus::_Internal {
 public:
};

DeviceStatus::DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&margin_, &from.margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&battery_level_) -
    reinterpret_cast<char*>(&margin_)) + sizeof(battery_level_));
  // @@protoc_insertion_point(copy_constructor:api.DeviceStatus)
}

void DeviceStatus::SharedCtor() {
  ::memset(&margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_level_) -
      reinterpret_cast<char*>(&margin_)) + sizeof(battery_level_));
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:api.DeviceStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceStatus::ArenaDtor(void* object) {
  DeviceStatus* _this = reinterpret_cast< DeviceStatus* >(object);
  (void)_this;
}
void DeviceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStatus& DeviceStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStatus_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_level_) -
      reinterpret_cast<char*>(&margin_)) + sizeof(battery_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 margin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external_power_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          external_power_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float battery_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          battery_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 margin = 1;
  if (this->margin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_margin(), target);
  }

  // bool external_power_source = 2;
  if (this->external_power_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_external_power_source(), target);
  }

  // float battery_level = 3;
  if (!(this->battery_level() <= 0 && this->battery_level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_battery_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceStatus)
  return target;
}

size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 margin = 1;
  if (this->margin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_margin());
  }

  // bool external_power_source = 2;
  if (this->external_power_source() != 0) {
    total_size += 1 + 1;
  }

  // float battery_level = 3;
  if (!(this->battery_level() <= 0 && this->battery_level() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DeviceStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DeviceStatus)
    MergeFrom(*source);
  }
}

void DeviceStatus::MergeFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.margin() != 0) {
    _internal_set_margin(from._internal_margin());
  }
  if (from.external_power_source() != 0) {
    _internal_set_external_power_source(from._internal_external_power_source());
  }
  if (!(from.battery_level() <= 0 && from.battery_level() >= 0)) {
    _internal_set_battery_level(from._internal_battery_level());
  }
}

void DeviceStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceStatus, battery_level_)
      + sizeof(DeviceStatus::battery_level_)
      - PROTOBUF_FIELD_OFFSET(DeviceStatus, margin_)>(
          reinterpret_cast<char*>(&margin_),
          reinterpret_cast<char*>(&other->margin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceListItem::InitAsDefaultInstance() {
  ::api::_DeviceListItem_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::api::_DeviceListItem_default_instance_._instance.get_mutable()->updated_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::api::_DeviceListItem_default_instance_._instance.get_mutable()->last_seen_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::api::_DeviceListItem_default_instance_._instance.get_mutable()->device_status_ = const_cast< ::api::DeviceStatus*>(
      ::api::DeviceStatus::internal_default_instance());
}
class DeviceListItem::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DeviceListItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const DeviceListItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_seen_at(const DeviceListItem* msg);
  static const ::api::DeviceStatus& device_status(const DeviceListItem* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
DeviceListItem::_Internal::created_at(const DeviceListItem* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DeviceListItem::_Internal::updated_at(const DeviceListItem* msg) {
  return *msg->updated_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DeviceListItem::_Internal::last_seen_at(const DeviceListItem* msg) {
  return *msg->last_seen_at_;
}
const ::api::DeviceStatus&
DeviceListItem::_Internal::device_status(const DeviceListItem* msg) {
  return *msg->device_status_;
}
void DeviceListItem::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void DeviceListItem::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void DeviceListItem::clear_last_seen_at() {
  if (GetArena() == nullptr && last_seen_at_ != nullptr) {
    delete last_seen_at_;
  }
  last_seen_at_ = nullptr;
}
DeviceListItem::DeviceListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DeviceListItem)
}
DeviceListItem::DeviceListItem(const DeviceListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  device_profile_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_profile_id().empty()) {
    device_profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_profile_id(),
      GetArena());
  }
  device_profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_profile_name().empty()) {
    device_profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_profile_name(),
      GetArena());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from._internal_has_last_seen_at()) {
    last_seen_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_seen_at_);
  } else {
    last_seen_at_ = nullptr;
  }
  if (from._internal_has_device_status()) {
    device_status_ = new ::api::DeviceStatus(*from.device_status_);
  } else {
    device_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.DeviceListItem)
}

void DeviceListItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceListItem_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_profile_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_status_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(device_status_));
}

DeviceListItem::~DeviceListItem() {
  // @@protoc_insertion_point(destructor:api.DeviceListItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceListItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_profile_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_profile_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete last_seen_at_;
  if (this != internal_default_instance()) delete device_status_;
}

void DeviceListItem::ArenaDtor(void* object) {
  DeviceListItem* _this = reinterpret_cast< DeviceListItem* >(object);
  (void)_this;
}
void DeviceListItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceListItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceListItem& DeviceListItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceListItem_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceListItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_profile_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_profile_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  if (GetArena() == nullptr && last_seen_at_ != nullptr) {
    delete last_seen_at_;
  }
  last_seen_at_ = nullptr;
  if (GetArena() == nullptr && device_status_ != nullptr) {
    delete device_status_;
  }
  device_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceListItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceListItem.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_seen_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_seen_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceListItem.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceListItem.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_profile_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_device_profile_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceListItem.device_profile_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_profile_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_device_profile_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceListItem.device_profile_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.DeviceStatus device_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceListItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceListItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updated_at(this), target, stream);
  }

  // .google.protobuf.Timestamp last_seen_at = 4;
  if (this->has_last_seen_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::last_seen_at(this), target, stream);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string description = 6;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // string device_profile_id = 7;
  if (this->device_profile_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_profile_id().data(), static_cast<int>(this->_internal_device_profile_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.device_profile_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device_profile_id(), target);
  }

  // string device_profile_name = 8;
  if (this->device_profile_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_profile_name().data(), static_cast<int>(this->_internal_device_profile_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.device_profile_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_device_profile_name(), target);
  }

  // .api.DeviceStatus device_status = 9;
  if (this->has_device_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::device_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceListItem)
  return target;
}

size_t DeviceListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceListItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string device_profile_id = 7;
  if (this->device_profile_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_profile_id());
  }

  // string device_profile_name = 8;
  if (this->device_profile_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_profile_name());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .google.protobuf.Timestamp last_seen_at = 4;
  if (this->has_last_seen_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_seen_at_);
  }

  // .api.DeviceStatus device_status = 9;
  if (this->has_device_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceListItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DeviceListItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceListItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceListItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DeviceListItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DeviceListItem)
    MergeFrom(*source);
  }
}

void DeviceListItem::MergeFrom(const DeviceListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.device_profile_id().size() > 0) {
    _internal_set_device_profile_id(from._internal_device_profile_id());
  }
  if (from.device_profile_name().size() > 0) {
    _internal_set_device_profile_name(from._internal_device_profile_name());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.has_last_seen_at()) {
    _internal_mutable_last_seen_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_seen_at());
  }
  if (from.has_device_status()) {
    _internal_mutable_device_status()->::api::DeviceStatus::MergeFrom(from._internal_device_status());
  }
}

void DeviceListItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DeviceListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceListItem::CopyFrom(const DeviceListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceListItem::IsInitialized() const {
  return true;
}

void DeviceListItem::InternalSwap(DeviceListItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_profile_id_.Swap(&other->device_profile_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_profile_name_.Swap(&other->device_profile_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceListItem, device_status_)
      + sizeof(DeviceListItem::device_status_)
      - PROTOBUF_FIELD_OFFSET(DeviceListItem, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceListItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceKeys::InitAsDefaultInstance() {
}
class DeviceKeys::_Internal {
 public:
};

DeviceKeys::DeviceKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DeviceKeys)
}
DeviceKeys::DeviceKeys(const DeviceKeys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  nwk_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nwk_key().empty()) {
    nwk_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nwk_key(),
      GetArena());
  }
  app_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_key().empty()) {
    app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeviceKeys)
}

void DeviceKeys::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceKeys_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nwk_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceKeys::~DeviceKeys() {
  // @@protoc_insertion_point(destructor:api.DeviceKeys)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceKeys::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nwk_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceKeys::ArenaDtor(void* object) {
  DeviceKeys* _this = reinterpret_cast< DeviceKeys* >(object);
  (void)_this;
}
void DeviceKeys::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceKeys::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceKeys& DeviceKeys::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceKeys_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceKeys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nwk_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceKeys::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceKeys.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nwk_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nwk_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceKeys.nwk_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_app_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceKeys.app_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceKeys::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceKeys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceKeys.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // string nwk_key = 2;
  if (this->nwk_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nwk_key().data(), static_cast<int>(this->_internal_nwk_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceKeys.nwk_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nwk_key(), target);
  }

  // string app_key = 3;
  if (this->app_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_key().data(), static_cast<int>(this->_internal_app_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceKeys.app_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceKeys)
  return target;
}

size_t DeviceKeys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceKeys)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // string nwk_key = 2;
  if (this->nwk_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nwk_key());
  }

  // string app_key = 3;
  if (this->app_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceKeys::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DeviceKeys)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceKeys* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceKeys>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DeviceKeys)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DeviceKeys)
    MergeFrom(*source);
  }
}

void DeviceKeys::MergeFrom(const DeviceKeys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceKeys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from.nwk_key().size() > 0) {
    _internal_set_nwk_key(from._internal_nwk_key());
  }
  if (from.app_key().size() > 0) {
    _internal_set_app_key(from._internal_app_key());
  }
}

void DeviceKeys::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DeviceKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceKeys::CopyFrom(const DeviceKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceKeys::IsInitialized() const {
  return true;
}

void DeviceKeys::InternalSwap(DeviceKeys* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nwk_key_.Swap(&other->nwk_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_key_.Swap(&other->app_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceKeys::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateDeviceRequest::InitAsDefaultInstance() {
  ::api::_CreateDeviceRequest_default_instance_._instance.get_mutable()->device_ = const_cast< ::api::Device*>(
      ::api::Device::internal_default_instance());
}
class CreateDeviceRequest::_Internal {
 public:
  static const ::api::Device& device(const CreateDeviceRequest* msg);
};

const ::api::Device&
CreateDeviceRequest::_Internal::device(const CreateDeviceRequest* msg) {
  return *msg->device_;
}
CreateDeviceRequest::CreateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.CreateDeviceRequest)
}
CreateDeviceRequest::CreateDeviceRequest(const CreateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::api::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.CreateDeviceRequest)
}

void CreateDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateDeviceRequest_api_2fdevice_2eproto.base);
  device_ = nullptr;
}

CreateDeviceRequest::~CreateDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.CreateDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void CreateDeviceRequest::ArenaDtor(void* object) {
  CreateDeviceRequest* _this = reinterpret_cast< CreateDeviceRequest* >(object);
  (void)_this;
}
void CreateDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDeviceRequest& CreateDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDeviceRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void CreateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CreateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CreateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CreateDeviceRequest)
  return target;
}

size_t CreateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CreateDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CreateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CreateDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CreateDeviceRequest)
    MergeFrom(*source);
  }
}

void CreateDeviceRequest::MergeFrom(const CreateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CreateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::api::Device::MergeFrom(from._internal_device());
  }
}

void CreateDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CreateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDeviceRequest::CopyFrom(const CreateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CreateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDeviceRequest::IsInitialized() const {
  return true;
}

void CreateDeviceRequest::InternalSwap(CreateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceRequest::InitAsDefaultInstance() {
}
class GetDeviceRequest::_Internal {
 public:
};

GetDeviceRequest::GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceRequest)
}
GetDeviceRequest::GetDeviceRequest(const GetDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceRequest)
}

void GetDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDeviceRequest::~GetDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceRequest::ArenaDtor(void* object) {
  GetDeviceRequest* _this = reinterpret_cast< GetDeviceRequest* >(object);
  (void)_this;
}
void GetDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceRequest& GetDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetDeviceRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceRequest)
  return target;
}

size_t GetDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceRequest)
    MergeFrom(*source);
  }
}

void GetDeviceRequest::MergeFrom(const GetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void GetDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceRequest::CopyFrom(const GetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceRequest::IsInitialized() const {
  return true;
}

void GetDeviceRequest::InternalSwap(GetDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceResponse::InitAsDefaultInstance() {
  ::api::_GetDeviceResponse_default_instance_._instance.get_mutable()->device_ = const_cast< ::api::Device*>(
      ::api::Device::internal_default_instance());
  ::api::_GetDeviceResponse_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::api::_GetDeviceResponse_default_instance_._instance.get_mutable()->updated_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::api::_GetDeviceResponse_default_instance_._instance.get_mutable()->last_seen_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::api::_GetDeviceResponse_default_instance_._instance.get_mutable()->device_status_ = const_cast< ::api::DeviceStatus*>(
      ::api::DeviceStatus::internal_default_instance());
}
class GetDeviceResponse::_Internal {
 public:
  static const ::api::Device& device(const GetDeviceResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const GetDeviceResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const GetDeviceResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_seen_at(const GetDeviceResponse* msg);
  static const ::api::DeviceStatus& device_status(const GetDeviceResponse* msg);
};

const ::api::Device&
GetDeviceResponse::_Internal::device(const GetDeviceResponse* msg) {
  return *msg->device_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceResponse::_Internal::created_at(const GetDeviceResponse* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceResponse::_Internal::updated_at(const GetDeviceResponse* msg) {
  return *msg->updated_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceResponse::_Internal::last_seen_at(const GetDeviceResponse* msg) {
  return *msg->last_seen_at_;
}
const ::api::DeviceStatus&
GetDeviceResponse::_Internal::device_status(const GetDeviceResponse* msg) {
  return *msg->device_status_;
}
void GetDeviceResponse::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void GetDeviceResponse::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void GetDeviceResponse::clear_last_seen_at() {
  if (GetArena() == nullptr && last_seen_at_ != nullptr) {
    delete last_seen_at_;
  }
  last_seen_at_ = nullptr;
}
GetDeviceResponse::GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceResponse)
}
GetDeviceResponse::GetDeviceResponse(const GetDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::api::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from._internal_has_last_seen_at()) {
    last_seen_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_seen_at_);
  } else {
    last_seen_at_ = nullptr;
  }
  if (from._internal_has_device_status()) {
    device_status_ = new ::api::DeviceStatus(*from.device_status_);
  } else {
    device_status_ = nullptr;
  }
  class_enabled_ = from.class_enabled_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceResponse)
}

void GetDeviceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceResponse_api_2fdevice_2eproto.base);
  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class_enabled_) -
      reinterpret_cast<char*>(&device_)) + sizeof(class_enabled_));
}

GetDeviceResponse::~GetDeviceResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete last_seen_at_;
  if (this != internal_default_instance()) delete device_status_;
}

void GetDeviceResponse::ArenaDtor(void* object) {
  GetDeviceResponse* _this = reinterpret_cast< GetDeviceResponse* >(object);
  (void)_this;
}
void GetDeviceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceResponse& GetDeviceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  if (GetArena() == nullptr && last_seen_at_ != nullptr) {
    delete last_seen_at_;
  }
  last_seen_at_ = nullptr;
  if (GetArena() == nullptr && device_status_ != nullptr) {
    delete device_status_;
  }
  device_status_ = nullptr;
  class_enabled_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_seen_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_seen_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.DeviceStatus device_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.DeviceClass class_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_class_enabled(static_cast<::common::DeviceClass>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updated_at(this), target, stream);
  }

  // .google.protobuf.Timestamp last_seen_at = 4;
  if (this->has_last_seen_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::last_seen_at(this), target, stream);
  }

  // .api.DeviceStatus device_status = 5;
  if (this->has_device_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::device_status(this), target, stream);
  }

  // .common.DeviceClass class_enabled = 6;
  if (this->class_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_class_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceResponse)
  return target;
}

size_t GetDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .google.protobuf.Timestamp last_seen_at = 4;
  if (this->has_last_seen_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_seen_at_);
  }

  // .api.DeviceStatus device_status = 5;
  if (this->has_device_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_status_);
  }

  // .common.DeviceClass class_enabled = 6;
  if (this->class_enabled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_class_enabled());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceResponse)
    MergeFrom(*source);
  }
}

void GetDeviceResponse::MergeFrom(const GetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::api::Device::MergeFrom(from._internal_device());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.has_last_seen_at()) {
    _internal_mutable_last_seen_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_seen_at());
  }
  if (from.has_device_status()) {
    _internal_mutable_device_status()->::api::DeviceStatus::MergeFrom(from._internal_device_status());
  }
  if (from.class_enabled() != 0) {
    _internal_set_class_enabled(from._internal_class_enabled());
  }
}

void GetDeviceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceResponse::CopyFrom(const GetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceResponse::IsInitialized() const {
  return true;
}

void GetDeviceResponse::InternalSwap(GetDeviceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceResponse, class_enabled_)
      + sizeof(GetDeviceResponse::class_enabled_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceResponse, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDeviceRequest::InitAsDefaultInstance() {
  ::api::_UpdateDeviceRequest_default_instance_._instance.get_mutable()->device_ = const_cast< ::api::Device*>(
      ::api::Device::internal_default_instance());
}
class UpdateDeviceRequest::_Internal {
 public:
  static const ::api::Device& device(const UpdateDeviceRequest* msg);
};

const ::api::Device&
UpdateDeviceRequest::_Internal::device(const UpdateDeviceRequest* msg) {
  return *msg->device_;
}
UpdateDeviceRequest::UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.UpdateDeviceRequest)
}
UpdateDeviceRequest::UpdateDeviceRequest(const UpdateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::api::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.UpdateDeviceRequest)
}

void UpdateDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDeviceRequest_api_2fdevice_2eproto.base);
  device_ = nullptr;
}

UpdateDeviceRequest::~UpdateDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.UpdateDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
}

void UpdateDeviceRequest::ArenaDtor(void* object) {
  UpdateDeviceRequest* _this = reinterpret_cast< UpdateDeviceRequest* >(object);
  (void)_this;
}
void UpdateDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDeviceRequest& UpdateDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDeviceRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.UpdateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.UpdateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.UpdateDeviceRequest)
  return target;
}

size_t UpdateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.UpdateDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.UpdateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.UpdateDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.UpdateDeviceRequest)
    MergeFrom(*source);
  }
}

void UpdateDeviceRequest::MergeFrom(const UpdateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.UpdateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::api::Device::MergeFrom(from._internal_device());
  }
}

void UpdateDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.UpdateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeviceRequest::CopyFrom(const UpdateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.UpdateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceRequest::IsInitialized() const {
  return true;
}

void UpdateDeviceRequest::InternalSwap(UpdateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_, other->device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDeviceRequest::InitAsDefaultInstance() {
}
class DeleteDeviceRequest::_Internal {
 public:
};

DeleteDeviceRequest::DeleteDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DeleteDeviceRequest)
}
DeleteDeviceRequest::DeleteDeviceRequest(const DeleteDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeleteDeviceRequest)
}

void DeleteDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteDeviceRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteDeviceRequest::~DeleteDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.DeleteDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteDeviceRequest::ArenaDtor(void* object) {
  DeleteDeviceRequest* _this = reinterpret_cast< DeleteDeviceRequest* >(object);
  (void)_this;
}
void DeleteDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDeviceRequest& DeleteDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDeviceRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeleteDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeleteDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeleteDeviceRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeleteDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeleteDeviceRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeleteDeviceRequest)
  return target;
}

size_t DeleteDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeleteDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DeleteDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DeleteDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DeleteDeviceRequest)
    MergeFrom(*source);
  }
}

void DeleteDeviceRequest::MergeFrom(const DeleteDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DeleteDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void DeleteDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DeleteDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDeviceRequest::CopyFrom(const DeleteDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeleteDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDeviceRequest::IsInitialized() const {
  return true;
}

void DeleteDeviceRequest::InternalSwap(DeleteDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDevicesRequest::InitAsDefaultInstance() {
}
class ListDevicesRequest::_Internal {
 public:
};

ListDevicesRequest::ListDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ListDevicesRequest)
}
ListDevicesRequest::ListDevicesRequest(const ListDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search().empty()) {
    search_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_search(),
      GetArena());
  }
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_application_id(),
      GetArena());
  }
  multicast_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multicast_group_id().empty()) {
    multicast_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_multicast_group_id(),
      GetArena());
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:api.ListDevicesRequest)
}

void ListDevicesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDevicesRequest_api_2fdevice_2eproto.base);
  search_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multicast_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(offset_));
}

ListDevicesRequest::~ListDevicesRequest() {
  // @@protoc_insertion_point(destructor:api.ListDevicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDevicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multicast_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListDevicesRequest::ArenaDtor(void* object) {
  ListDevicesRequest* _this = reinterpret_cast< ListDevicesRequest* >(object);
  (void)_this;
}
void ListDevicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDevicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDevicesRequest& ListDevicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDevicesRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void ListDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ListDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  application_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  multicast_group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDevicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string search = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_search();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ListDevicesRequest.search"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ListDevicesRequest.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multicast_group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_multicast_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ListDevicesRequest.multicast_group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDevicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ListDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // string search = 3;
  if (this->search().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search().data(), static_cast<int>(this->_internal_search().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ListDevicesRequest.search");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_search(), target);
  }

  // string application_id = 4;
  if (this->application_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ListDevicesRequest.application_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_application_id(), target);
  }

  // string multicast_group_id = 5;
  if (this->multicast_group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multicast_group_id().data(), static_cast<int>(this->_internal_multicast_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ListDevicesRequest.multicast_group_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_multicast_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ListDevicesRequest)
  return target;
}

size_t ListDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ListDevicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search = 3;
  if (this->search().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search());
  }

  // string application_id = 4;
  if (this->application_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string multicast_group_id = 5;
  if (this->multicast_group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multicast_group_id());
  }

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDevicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ListDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDevicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDevicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ListDevicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ListDevicesRequest)
    MergeFrom(*source);
  }
}

void ListDevicesRequest::MergeFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ListDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.search().size() > 0) {
    _internal_set_search(from._internal_search());
  }
  if (from.application_id().size() > 0) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (from.multicast_group_id().size() > 0) {
    _internal_set_multicast_group_id(from._internal_multicast_group_id());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void ListDevicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDevicesRequest::CopyFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesRequest::IsInitialized() const {
  return true;
}

void ListDevicesRequest::InternalSwap(ListDevicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  search_.Swap(&other->search_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  application_id_.Swap(&other->application_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  multicast_group_id_.Swap(&other->multicast_group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDevicesRequest, offset_)
      + sizeof(ListDevicesRequest::offset_)
      - PROTOBUF_FIELD_OFFSET(ListDevicesRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDevicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDevicesResponse::InitAsDefaultInstance() {
}
class ListDevicesResponse::_Internal {
 public:
};

ListDevicesResponse::ListDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ListDevicesResponse)
}
ListDevicesResponse::ListDevicesResponse(const ListDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_count_ = from.total_count_;
  // @@protoc_insertion_point(copy_constructor:api.ListDevicesResponse)
}

void ListDevicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDevicesResponse_api_2fdevice_2eproto.base);
  total_count_ = 0u;
}

ListDevicesResponse::~ListDevicesResponse() {
  // @@protoc_insertion_point(destructor:api.ListDevicesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListDevicesResponse::ArenaDtor(void* object) {
  ListDevicesResponse* _this = reinterpret_cast< ListDevicesResponse* >(object);
  (void)_this;
}
void ListDevicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDevicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDevicesResponse& ListDevicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDevicesResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void ListDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ListDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  total_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDevicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 total_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api.DeviceListItem result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDevicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ListDevicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_count = 1;
  if (this->total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_count(), target);
  }

  // repeated .api.DeviceListItem result = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_result(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ListDevicesResponse)
  return target;
}

size_t ListDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ListDevicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.DeviceListItem result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_count = 1;
  if (this->total_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDevicesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ListDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDevicesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDevicesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ListDevicesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ListDevicesResponse)
    MergeFrom(*source);
  }
}

void ListDevicesResponse::MergeFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ListDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.total_count() != 0) {
    _internal_set_total_count(from._internal_total_count());
  }
}

void ListDevicesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDevicesResponse::CopyFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesResponse::IsInitialized() const {
  return true;
}

void ListDevicesResponse::InternalSwap(ListDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  swap(total_count_, other->total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDevicesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateDeviceKeysRequest::InitAsDefaultInstance() {
  ::api::_CreateDeviceKeysRequest_default_instance_._instance.get_mutable()->device_keys_ = const_cast< ::api::DeviceKeys*>(
      ::api::DeviceKeys::internal_default_instance());
}
class CreateDeviceKeysRequest::_Internal {
 public:
  static const ::api::DeviceKeys& device_keys(const CreateDeviceKeysRequest* msg);
};

const ::api::DeviceKeys&
CreateDeviceKeysRequest::_Internal::device_keys(const CreateDeviceKeysRequest* msg) {
  return *msg->device_keys_;
}
CreateDeviceKeysRequest::CreateDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.CreateDeviceKeysRequest)
}
CreateDeviceKeysRequest::CreateDeviceKeysRequest(const CreateDeviceKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_keys()) {
    device_keys_ = new ::api::DeviceKeys(*from.device_keys_);
  } else {
    device_keys_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.CreateDeviceKeysRequest)
}

void CreateDeviceKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateDeviceKeysRequest_api_2fdevice_2eproto.base);
  device_keys_ = nullptr;
}

CreateDeviceKeysRequest::~CreateDeviceKeysRequest() {
  // @@protoc_insertion_point(destructor:api.CreateDeviceKeysRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateDeviceKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_keys_;
}

void CreateDeviceKeysRequest::ArenaDtor(void* object) {
  CreateDeviceKeysRequest* _this = reinterpret_cast< CreateDeviceKeysRequest* >(object);
  (void)_this;
}
void CreateDeviceKeysRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDeviceKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDeviceKeysRequest& CreateDeviceKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDeviceKeysRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void CreateDeviceKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CreateDeviceKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_keys_ != nullptr) {
    delete device_keys_;
  }
  device_keys_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDeviceKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.DeviceKeys device_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_keys(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDeviceKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CreateDeviceKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->has_device_keys()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device_keys(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CreateDeviceKeysRequest)
  return target;
}

size_t CreateDeviceKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CreateDeviceKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->has_device_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_keys_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDeviceKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CreateDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDeviceKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDeviceKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CreateDeviceKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CreateDeviceKeysRequest)
    MergeFrom(*source);
  }
}

void CreateDeviceKeysRequest::MergeFrom(const CreateDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CreateDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device_keys()) {
    _internal_mutable_device_keys()->::api::DeviceKeys::MergeFrom(from._internal_device_keys());
  }
}

void CreateDeviceKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CreateDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDeviceKeysRequest::CopyFrom(const CreateDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CreateDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDeviceKeysRequest::IsInitialized() const {
  return true;
}

void CreateDeviceKeysRequest::InternalSwap(CreateDeviceKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_keys_, other->device_keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDeviceKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceKeysRequest::InitAsDefaultInstance() {
}
class GetDeviceKeysRequest::_Internal {
 public:
};

GetDeviceKeysRequest::GetDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceKeysRequest)
}
GetDeviceKeysRequest::GetDeviceKeysRequest(const GetDeviceKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceKeysRequest)
}

void GetDeviceKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceKeysRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDeviceKeysRequest::~GetDeviceKeysRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceKeysRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceKeysRequest::ArenaDtor(void* object) {
  GetDeviceKeysRequest* _this = reinterpret_cast< GetDeviceKeysRequest* >(object);
  (void)_this;
}
void GetDeviceKeysRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceKeysRequest& GetDeviceKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceKeysRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetDeviceKeysRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceKeysRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceKeysRequest)
  return target;
}

size_t GetDeviceKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceKeysRequest)
    MergeFrom(*source);
  }
}

void GetDeviceKeysRequest::MergeFrom(const GetDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void GetDeviceKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceKeysRequest::CopyFrom(const GetDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceKeysRequest::IsInitialized() const {
  return true;
}

void GetDeviceKeysRequest::InternalSwap(GetDeviceKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceKeysResponse::InitAsDefaultInstance() {
  ::api::_GetDeviceKeysResponse_default_instance_._instance.get_mutable()->device_keys_ = const_cast< ::api::DeviceKeys*>(
      ::api::DeviceKeys::internal_default_instance());
  ::api::_GetDeviceKeysResponse_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::api::_GetDeviceKeysResponse_default_instance_._instance.get_mutable()->updated_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetDeviceKeysResponse::_Internal {
 public:
  static const ::api::DeviceKeys& device_keys(const GetDeviceKeysResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const GetDeviceKeysResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const GetDeviceKeysResponse* msg);
};

const ::api::DeviceKeys&
GetDeviceKeysResponse::_Internal::device_keys(const GetDeviceKeysResponse* msg) {
  return *msg->device_keys_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceKeysResponse::_Internal::created_at(const GetDeviceKeysResponse* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceKeysResponse::_Internal::updated_at(const GetDeviceKeysResponse* msg) {
  return *msg->updated_at_;
}
void GetDeviceKeysResponse::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void GetDeviceKeysResponse::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
GetDeviceKeysResponse::GetDeviceKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceKeysResponse)
}
GetDeviceKeysResponse::GetDeviceKeysResponse(const GetDeviceKeysResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_keys()) {
    device_keys_ = new ::api::DeviceKeys(*from.device_keys_);
  } else {
    device_keys_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceKeysResponse)
}

void GetDeviceKeysResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceKeysResponse_api_2fdevice_2eproto.base);
  ::memset(&device_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&device_keys_)) + sizeof(updated_at_));
}

GetDeviceKeysResponse::~GetDeviceKeysResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceKeysResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceKeysResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_keys_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
}

void GetDeviceKeysResponse::ArenaDtor(void* object) {
  GetDeviceKeysResponse* _this = reinterpret_cast< GetDeviceKeysResponse* >(object);
  (void)_this;
}
void GetDeviceKeysResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceKeysResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceKeysResponse& GetDeviceKeysResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceKeysResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceKeysResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_keys_ != nullptr) {
    delete device_keys_;
  }
  device_keys_ = nullptr;
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceKeysResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.DeviceKeys device_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_keys(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceKeysResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceKeysResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->has_device_keys()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device_keys(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updated_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceKeysResponse)
  return target;
}

size_t GetDeviceKeysResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceKeysResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->has_device_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_keys_);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceKeysResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceKeysResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceKeysResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceKeysResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceKeysResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceKeysResponse)
    MergeFrom(*source);
  }
}

void GetDeviceKeysResponse::MergeFrom(const GetDeviceKeysResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceKeysResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device_keys()) {
    _internal_mutable_device_keys()->::api::DeviceKeys::MergeFrom(from._internal_device_keys());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
}

void GetDeviceKeysResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceKeysResponse::CopyFrom(const GetDeviceKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceKeysResponse::IsInitialized() const {
  return true;
}

void GetDeviceKeysResponse::InternalSwap(GetDeviceKeysResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceKeysResponse, updated_at_)
      + sizeof(GetDeviceKeysResponse::updated_at_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceKeysResponse, device_keys_)>(
          reinterpret_cast<char*>(&device_keys_),
          reinterpret_cast<char*>(&other->device_keys_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceKeysResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDeviceKeysRequest::InitAsDefaultInstance() {
  ::api::_UpdateDeviceKeysRequest_default_instance_._instance.get_mutable()->device_keys_ = const_cast< ::api::DeviceKeys*>(
      ::api::DeviceKeys::internal_default_instance());
}
class UpdateDeviceKeysRequest::_Internal {
 public:
  static const ::api::DeviceKeys& device_keys(const UpdateDeviceKeysRequest* msg);
};

const ::api::DeviceKeys&
UpdateDeviceKeysRequest::_Internal::device_keys(const UpdateDeviceKeysRequest* msg) {
  return *msg->device_keys_;
}
UpdateDeviceKeysRequest::UpdateDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.UpdateDeviceKeysRequest)
}
UpdateDeviceKeysRequest::UpdateDeviceKeysRequest(const UpdateDeviceKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_keys()) {
    device_keys_ = new ::api::DeviceKeys(*from.device_keys_);
  } else {
    device_keys_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.UpdateDeviceKeysRequest)
}

void UpdateDeviceKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateDeviceKeysRequest_api_2fdevice_2eproto.base);
  device_keys_ = nullptr;
}

UpdateDeviceKeysRequest::~UpdateDeviceKeysRequest() {
  // @@protoc_insertion_point(destructor:api.UpdateDeviceKeysRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDeviceKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_keys_;
}

void UpdateDeviceKeysRequest::ArenaDtor(void* object) {
  UpdateDeviceKeysRequest* _this = reinterpret_cast< UpdateDeviceKeysRequest* >(object);
  (void)_this;
}
void UpdateDeviceKeysRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDeviceKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDeviceKeysRequest& UpdateDeviceKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDeviceKeysRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void UpdateDeviceKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.UpdateDeviceKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_keys_ != nullptr) {
    delete device_keys_;
  }
  device_keys_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeviceKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.DeviceKeys device_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_keys(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDeviceKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.UpdateDeviceKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->has_device_keys()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device_keys(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.UpdateDeviceKeysRequest)
  return target;
}

size_t UpdateDeviceKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.UpdateDeviceKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->has_device_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_keys_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeviceKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.UpdateDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDeviceKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDeviceKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.UpdateDeviceKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.UpdateDeviceKeysRequest)
    MergeFrom(*source);
  }
}

void UpdateDeviceKeysRequest::MergeFrom(const UpdateDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.UpdateDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device_keys()) {
    _internal_mutable_device_keys()->::api::DeviceKeys::MergeFrom(from._internal_device_keys());
  }
}

void UpdateDeviceKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.UpdateDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeviceKeysRequest::CopyFrom(const UpdateDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.UpdateDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceKeysRequest::IsInitialized() const {
  return true;
}

void UpdateDeviceKeysRequest::InternalSwap(UpdateDeviceKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_keys_, other->device_keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeviceKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDeviceKeysRequest::InitAsDefaultInstance() {
}
class DeleteDeviceKeysRequest::_Internal {
 public:
};

DeleteDeviceKeysRequest::DeleteDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DeleteDeviceKeysRequest)
}
DeleteDeviceKeysRequest::DeleteDeviceKeysRequest(const DeleteDeviceKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeleteDeviceKeysRequest)
}

void DeleteDeviceKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteDeviceKeysRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteDeviceKeysRequest::~DeleteDeviceKeysRequest() {
  // @@protoc_insertion_point(destructor:api.DeleteDeviceKeysRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDeviceKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteDeviceKeysRequest::ArenaDtor(void* object) {
  DeleteDeviceKeysRequest* _this = reinterpret_cast< DeleteDeviceKeysRequest* >(object);
  (void)_this;
}
void DeleteDeviceKeysRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDeviceKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDeviceKeysRequest& DeleteDeviceKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDeviceKeysRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeleteDeviceKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeleteDeviceKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDeviceKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeleteDeviceKeysRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDeviceKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeleteDeviceKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeleteDeviceKeysRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeleteDeviceKeysRequest)
  return target;
}

size_t DeleteDeviceKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeleteDeviceKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDeviceKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DeleteDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDeviceKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDeviceKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DeleteDeviceKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DeleteDeviceKeysRequest)
    MergeFrom(*source);
  }
}

void DeleteDeviceKeysRequest::MergeFrom(const DeleteDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DeleteDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void DeleteDeviceKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DeleteDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDeviceKeysRequest::CopyFrom(const DeleteDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeleteDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDeviceKeysRequest::IsInitialized() const {
  return true;
}

void DeleteDeviceKeysRequest::InternalSwap(DeleteDeviceKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDeviceKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceActivation::InitAsDefaultInstance() {
}
class DeviceActivation::_Internal {
 public:
};

DeviceActivation::DeviceActivation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DeviceActivation)
}
DeviceActivation::DeviceActivation(const DeviceActivation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  dev_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_addr().empty()) {
    dev_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_addr(),
      GetArena());
  }
  app_s_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_s_key().empty()) {
    app_s_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_s_key(),
      GetArena());
  }
  nwk_s_enc_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nwk_s_enc_key().empty()) {
    nwk_s_enc_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nwk_s_enc_key(),
      GetArena());
  }
  s_nwk_s_int_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s_nwk_s_int_key().empty()) {
    s_nwk_s_int_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_s_nwk_s_int_key(),
      GetArena());
  }
  f_nwk_s_int_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_f_nwk_s_int_key().empty()) {
    f_nwk_s_int_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f_nwk_s_int_key(),
      GetArena());
  }
  ::memcpy(&f_cnt_up_, &from.f_cnt_up_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_f_cnt_down_) -
    reinterpret_cast<char*>(&f_cnt_up_)) + sizeof(a_f_cnt_down_));
  // @@protoc_insertion_point(copy_constructor:api.DeviceActivation)
}

void DeviceActivation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceActivation_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_s_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nwk_s_enc_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_nwk_s_int_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f_nwk_s_int_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f_cnt_up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_f_cnt_down_) -
      reinterpret_cast<char*>(&f_cnt_up_)) + sizeof(a_f_cnt_down_));
}

DeviceActivation::~DeviceActivation() {
  // @@protoc_insertion_point(destructor:api.DeviceActivation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceActivation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_s_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nwk_s_enc_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_nwk_s_int_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f_nwk_s_int_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceActivation::ArenaDtor(void* object) {
  DeviceActivation* _this = reinterpret_cast< DeviceActivation* >(object);
  (void)_this;
}
void DeviceActivation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceActivation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceActivation& DeviceActivation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceActivation_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceActivation::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dev_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_s_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nwk_s_enc_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s_nwk_s_int_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  f_nwk_s_int_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&f_cnt_up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_f_cnt_down_) -
      reinterpret_cast<char*>(&f_cnt_up_)) + sizeof(a_f_cnt_down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceActivation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceActivation.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dev_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dev_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceActivation.dev_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_s_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_app_s_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceActivation.app_s_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nwk_s_enc_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nwk_s_enc_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceActivation.nwk_s_enc_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 f_cnt_up = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          f_cnt_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_f_cnt_down = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          n_f_cnt_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s_nwk_s_int_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_s_nwk_s_int_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceActivation.s_nwk_s_int_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string f_nwk_s_int_key = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_f_nwk_s_int_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceActivation.f_nwk_s_int_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 a_f_cnt_down = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          a_f_cnt_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceActivation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // string dev_addr = 2;
  if (this->dev_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_addr().data(), static_cast<int>(this->_internal_dev_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.dev_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dev_addr(), target);
  }

  // string app_s_key = 3;
  if (this->app_s_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_s_key().data(), static_cast<int>(this->_internal_app_s_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.app_s_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_s_key(), target);
  }

  // string nwk_s_enc_key = 4;
  if (this->nwk_s_enc_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nwk_s_enc_key().data(), static_cast<int>(this->_internal_nwk_s_enc_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.nwk_s_enc_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nwk_s_enc_key(), target);
  }

  // uint32 f_cnt_up = 5;
  if (this->f_cnt_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_f_cnt_up(), target);
  }

  // uint32 n_f_cnt_down = 6;
  if (this->n_f_cnt_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_n_f_cnt_down(), target);
  }

  // string s_nwk_s_int_key = 8;
  if (this->s_nwk_s_int_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_nwk_s_int_key().data(), static_cast<int>(this->_internal_s_nwk_s_int_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.s_nwk_s_int_key");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_s_nwk_s_int_key(), target);
  }

  // string f_nwk_s_int_key = 9;
  if (this->f_nwk_s_int_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_f_nwk_s_int_key().data(), static_cast<int>(this->_internal_f_nwk_s_int_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.f_nwk_s_int_key");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_f_nwk_s_int_key(), target);
  }

  // uint32 a_f_cnt_down = 10;
  if (this->a_f_cnt_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_a_f_cnt_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceActivation)
  return target;
}

size_t DeviceActivation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceActivation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // string dev_addr = 2;
  if (this->dev_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_addr());
  }

  // string app_s_key = 3;
  if (this->app_s_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_s_key());
  }

  // string nwk_s_enc_key = 4;
  if (this->nwk_s_enc_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nwk_s_enc_key());
  }

  // string s_nwk_s_int_key = 8;
  if (this->s_nwk_s_int_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_nwk_s_int_key());
  }

  // string f_nwk_s_int_key = 9;
  if (this->f_nwk_s_int_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f_nwk_s_int_key());
  }

  // uint32 f_cnt_up = 5;
  if (this->f_cnt_up() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_f_cnt_up());
  }

  // uint32 n_f_cnt_down = 6;
  if (this->n_f_cnt_down() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_f_cnt_down());
  }

  // uint32 a_f_cnt_down = 10;
  if (this->a_f_cnt_down() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a_f_cnt_down());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceActivation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DeviceActivation)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceActivation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceActivation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DeviceActivation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DeviceActivation)
    MergeFrom(*source);
  }
}

void DeviceActivation::MergeFrom(const DeviceActivation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceActivation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from.dev_addr().size() > 0) {
    _internal_set_dev_addr(from._internal_dev_addr());
  }
  if (from.app_s_key().size() > 0) {
    _internal_set_app_s_key(from._internal_app_s_key());
  }
  if (from.nwk_s_enc_key().size() > 0) {
    _internal_set_nwk_s_enc_key(from._internal_nwk_s_enc_key());
  }
  if (from.s_nwk_s_int_key().size() > 0) {
    _internal_set_s_nwk_s_int_key(from._internal_s_nwk_s_int_key());
  }
  if (from.f_nwk_s_int_key().size() > 0) {
    _internal_set_f_nwk_s_int_key(from._internal_f_nwk_s_int_key());
  }
  if (from.f_cnt_up() != 0) {
    _internal_set_f_cnt_up(from._internal_f_cnt_up());
  }
  if (from.n_f_cnt_down() != 0) {
    _internal_set_n_f_cnt_down(from._internal_n_f_cnt_down());
  }
  if (from.a_f_cnt_down() != 0) {
    _internal_set_a_f_cnt_down(from._internal_a_f_cnt_down());
  }
}

void DeviceActivation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DeviceActivation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceActivation::CopyFrom(const DeviceActivation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceActivation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceActivation::IsInitialized() const {
  return true;
}

void DeviceActivation::InternalSwap(DeviceActivation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dev_addr_.Swap(&other->dev_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_s_key_.Swap(&other->app_s_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nwk_s_enc_key_.Swap(&other->nwk_s_enc_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s_nwk_s_int_key_.Swap(&other->s_nwk_s_int_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  f_nwk_s_int_key_.Swap(&other->f_nwk_s_int_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceActivation, a_f_cnt_down_)
      + sizeof(DeviceActivation::a_f_cnt_down_)
      - PROTOBUF_FIELD_OFFSET(DeviceActivation, f_cnt_up_)>(
          reinterpret_cast<char*>(&f_cnt_up_),
          reinterpret_cast<char*>(&other->f_cnt_up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceActivation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivateDeviceRequest::InitAsDefaultInstance() {
  ::api::_ActivateDeviceRequest_default_instance_._instance.get_mutable()->device_activation_ = const_cast< ::api::DeviceActivation*>(
      ::api::DeviceActivation::internal_default_instance());
}
class ActivateDeviceRequest::_Internal {
 public:
  static const ::api::DeviceActivation& device_activation(const ActivateDeviceRequest* msg);
};

const ::api::DeviceActivation&
ActivateDeviceRequest::_Internal::device_activation(const ActivateDeviceRequest* msg) {
  return *msg->device_activation_;
}
ActivateDeviceRequest::ActivateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ActivateDeviceRequest)
}
ActivateDeviceRequest::ActivateDeviceRequest(const ActivateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_activation()) {
    device_activation_ = new ::api::DeviceActivation(*from.device_activation_);
  } else {
    device_activation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.ActivateDeviceRequest)
}

void ActivateDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivateDeviceRequest_api_2fdevice_2eproto.base);
  device_activation_ = nullptr;
}

ActivateDeviceRequest::~ActivateDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.ActivateDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_activation_;
}

void ActivateDeviceRequest::ArenaDtor(void* object) {
  ActivateDeviceRequest* _this = reinterpret_cast< ActivateDeviceRequest* >(object);
  (void)_this;
}
void ActivateDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivateDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivateDeviceRequest& ActivateDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivateDeviceRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void ActivateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ActivateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_activation_ != nullptr) {
    delete device_activation_;
  }
  device_activation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivateDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.DeviceActivation device_activation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_activation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivateDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ActivateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceActivation device_activation = 1;
  if (this->has_device_activation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device_activation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ActivateDeviceRequest)
  return target;
}

size_t ActivateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ActivateDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceActivation device_activation = 1;
  if (this->has_device_activation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_activation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivateDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ActivateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivateDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivateDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ActivateDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ActivateDeviceRequest)
    MergeFrom(*source);
  }
}

void ActivateDeviceRequest::MergeFrom(const ActivateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ActivateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device_activation()) {
    _internal_mutable_device_activation()->::api::DeviceActivation::MergeFrom(from._internal_device_activation());
  }
}

void ActivateDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ActivateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateDeviceRequest::CopyFrom(const ActivateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ActivateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateDeviceRequest::IsInitialized() const {
  return true;
}

void ActivateDeviceRequest::InternalSwap(ActivateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(device_activation_, other->device_activation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeactivateDeviceRequest::InitAsDefaultInstance() {
}
class DeactivateDeviceRequest::_Internal {
 public:
};

DeactivateDeviceRequest::DeactivateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DeactivateDeviceRequest)
}
DeactivateDeviceRequest::DeactivateDeviceRequest(const DeactivateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeactivateDeviceRequest)
}

void DeactivateDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeactivateDeviceRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeactivateDeviceRequest::~DeactivateDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.DeactivateDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeactivateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeactivateDeviceRequest::ArenaDtor(void* object) {
  DeactivateDeviceRequest* _this = reinterpret_cast< DeactivateDeviceRequest* >(object);
  (void)_this;
}
void DeactivateDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeactivateDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeactivateDeviceRequest& DeactivateDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeactivateDeviceRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeactivateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeactivateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeactivateDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeactivateDeviceRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeactivateDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeactivateDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeactivateDeviceRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeactivateDeviceRequest)
  return target;
}

size_t DeactivateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeactivateDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeactivateDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DeactivateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeactivateDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeactivateDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DeactivateDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DeactivateDeviceRequest)
    MergeFrom(*source);
  }
}

void DeactivateDeviceRequest::MergeFrom(const DeactivateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DeactivateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void DeactivateDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DeactivateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeactivateDeviceRequest::CopyFrom(const DeactivateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeactivateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeactivateDeviceRequest::IsInitialized() const {
  return true;
}

void DeactivateDeviceRequest::InternalSwap(DeactivateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeactivateDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceActivationRequest::InitAsDefaultInstance() {
}
class GetDeviceActivationRequest::_Internal {
 public:
};

GetDeviceActivationRequest::GetDeviceActivationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceActivationRequest)
}
GetDeviceActivationRequest::GetDeviceActivationRequest(const GetDeviceActivationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceActivationRequest)
}

void GetDeviceActivationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceActivationRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDeviceActivationRequest::~GetDeviceActivationRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceActivationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceActivationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceActivationRequest::ArenaDtor(void* object) {
  GetDeviceActivationRequest* _this = reinterpret_cast< GetDeviceActivationRequest* >(object);
  (void)_this;
}
void GetDeviceActivationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceActivationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceActivationRequest& GetDeviceActivationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceActivationRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceActivationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceActivationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceActivationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetDeviceActivationRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceActivationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceActivationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceActivationRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceActivationRequest)
  return target;
}

size_t GetDeviceActivationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceActivationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceActivationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceActivationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceActivationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceActivationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceActivationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceActivationRequest)
    MergeFrom(*source);
  }
}

void GetDeviceActivationRequest::MergeFrom(const GetDeviceActivationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceActivationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void GetDeviceActivationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceActivationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceActivationRequest::CopyFrom(const GetDeviceActivationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceActivationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceActivationRequest::IsInitialized() const {
  return true;
}

void GetDeviceActivationRequest::InternalSwap(GetDeviceActivationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceActivationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceActivationResponse::InitAsDefaultInstance() {
  ::api::_GetDeviceActivationResponse_default_instance_._instance.get_mutable()->device_activation_ = const_cast< ::api::DeviceActivation*>(
      ::api::DeviceActivation::internal_default_instance());
  ::api::_GetDeviceActivationResponse_default_instance_._instance.get_mutable()->join_server_context_ = const_cast< ::common::JoinServerContext*>(
      ::common::JoinServerContext::internal_default_instance());
}
class GetDeviceActivationResponse::_Internal {
 public:
  static const ::api::DeviceActivation& device_activation(const GetDeviceActivationResponse* msg);
  static const ::common::JoinServerContext& join_server_context(const GetDeviceActivationResponse* msg);
};

const ::api::DeviceActivation&
GetDeviceActivationResponse::_Internal::device_activation(const GetDeviceActivationResponse* msg) {
  return *msg->device_activation_;
}
const ::common::JoinServerContext&
GetDeviceActivationResponse::_Internal::join_server_context(const GetDeviceActivationResponse* msg) {
  return *msg->join_server_context_;
}
void GetDeviceActivationResponse::clear_join_server_context() {
  if (GetArena() == nullptr && join_server_context_ != nullptr) {
    delete join_server_context_;
  }
  join_server_context_ = nullptr;
}
GetDeviceActivationResponse::GetDeviceActivationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceActivationResponse)
}
GetDeviceActivationResponse::GetDeviceActivationResponse(const GetDeviceActivationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_activation()) {
    device_activation_ = new ::api::DeviceActivation(*from.device_activation_);
  } else {
    device_activation_ = nullptr;
  }
  if (from._internal_has_join_server_context()) {
    join_server_context_ = new ::common::JoinServerContext(*from.join_server_context_);
  } else {
    join_server_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceActivationResponse)
}

void GetDeviceActivationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceActivationResponse_api_2fdevice_2eproto.base);
  ::memset(&device_activation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_server_context_) -
      reinterpret_cast<char*>(&device_activation_)) + sizeof(join_server_context_));
}

GetDeviceActivationResponse::~GetDeviceActivationResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceActivationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceActivationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_activation_;
  if (this != internal_default_instance()) delete join_server_context_;
}

void GetDeviceActivationResponse::ArenaDtor(void* object) {
  GetDeviceActivationResponse* _this = reinterpret_cast< GetDeviceActivationResponse* >(object);
  (void)_this;
}
void GetDeviceActivationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceActivationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceActivationResponse& GetDeviceActivationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceActivationResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceActivationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceActivationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_activation_ != nullptr) {
    delete device_activation_;
  }
  device_activation_ = nullptr;
  if (GetArena() == nullptr && join_server_context_ != nullptr) {
    delete join_server_context_;
  }
  join_server_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceActivationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.DeviceActivation device_activation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_activation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.JoinServerContext join_server_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_join_server_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceActivationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceActivationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceActivation device_activation = 1;
  if (this->has_device_activation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device_activation(this), target, stream);
  }

  // .common.JoinServerContext join_server_context = 2;
  if (this->has_join_server_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::join_server_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceActivationResponse)
  return target;
}

size_t GetDeviceActivationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceActivationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceActivation device_activation = 1;
  if (this->has_device_activation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_activation_);
  }

  // .common.JoinServerContext join_server_context = 2;
  if (this->has_join_server_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *join_server_context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceActivationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceActivationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceActivationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceActivationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceActivationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceActivationResponse)
    MergeFrom(*source);
  }
}

void GetDeviceActivationResponse::MergeFrom(const GetDeviceActivationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceActivationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device_activation()) {
    _internal_mutable_device_activation()->::api::DeviceActivation::MergeFrom(from._internal_device_activation());
  }
  if (from.has_join_server_context()) {
    _internal_mutable_join_server_context()->::common::JoinServerContext::MergeFrom(from._internal_join_server_context());
  }
}

void GetDeviceActivationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceActivationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceActivationResponse::CopyFrom(const GetDeviceActivationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceActivationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceActivationResponse::IsInitialized() const {
  return true;
}

void GetDeviceActivationResponse::InternalSwap(GetDeviceActivationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceActivationResponse, join_server_context_)
      + sizeof(GetDeviceActivationResponse::join_server_context_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceActivationResponse, device_activation_)>(
          reinterpret_cast<char*>(&device_activation_),
          reinterpret_cast<char*>(&other->device_activation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceActivationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRandomDevAddrRequest::InitAsDefaultInstance() {
}
class GetRandomDevAddrRequest::_Internal {
 public:
};

GetRandomDevAddrRequest::GetRandomDevAddrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetRandomDevAddrRequest)
}
GetRandomDevAddrRequest::GetRandomDevAddrRequest(const GetRandomDevAddrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetRandomDevAddrRequest)
}

void GetRandomDevAddrRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRandomDevAddrRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRandomDevAddrRequest::~GetRandomDevAddrRequest() {
  // @@protoc_insertion_point(destructor:api.GetRandomDevAddrRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRandomDevAddrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRandomDevAddrRequest::ArenaDtor(void* object) {
  GetRandomDevAddrRequest* _this = reinterpret_cast< GetRandomDevAddrRequest* >(object);
  (void)_this;
}
void GetRandomDevAddrRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRandomDevAddrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRandomDevAddrRequest& GetRandomDevAddrRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRandomDevAddrRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetRandomDevAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetRandomDevAddrRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRandomDevAddrRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetRandomDevAddrRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRandomDevAddrRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetRandomDevAddrRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetRandomDevAddrRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetRandomDevAddrRequest)
  return target;
}

size_t GetRandomDevAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetRandomDevAddrRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRandomDevAddrRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetRandomDevAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRandomDevAddrRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRandomDevAddrRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetRandomDevAddrRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetRandomDevAddrRequest)
    MergeFrom(*source);
  }
}

void GetRandomDevAddrRequest::MergeFrom(const GetRandomDevAddrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetRandomDevAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void GetRandomDevAddrRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetRandomDevAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRandomDevAddrRequest::CopyFrom(const GetRandomDevAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetRandomDevAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomDevAddrRequest::IsInitialized() const {
  return true;
}

void GetRandomDevAddrRequest::InternalSwap(GetRandomDevAddrRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRandomDevAddrRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRandomDevAddrResponse::InitAsDefaultInstance() {
}
class GetRandomDevAddrResponse::_Internal {
 public:
};

GetRandomDevAddrResponse::GetRandomDevAddrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetRandomDevAddrResponse)
}
GetRandomDevAddrResponse::GetRandomDevAddrResponse(const GetRandomDevAddrResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_addr().empty()) {
    dev_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_addr(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetRandomDevAddrResponse)
}

void GetRandomDevAddrResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRandomDevAddrResponse_api_2fdevice_2eproto.base);
  dev_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRandomDevAddrResponse::~GetRandomDevAddrResponse() {
  // @@protoc_insertion_point(destructor:api.GetRandomDevAddrResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRandomDevAddrResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRandomDevAddrResponse::ArenaDtor(void* object) {
  GetRandomDevAddrResponse* _this = reinterpret_cast< GetRandomDevAddrResponse* >(object);
  (void)_this;
}
void GetRandomDevAddrResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRandomDevAddrResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRandomDevAddrResponse& GetRandomDevAddrResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRandomDevAddrResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetRandomDevAddrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetRandomDevAddrResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRandomDevAddrResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetRandomDevAddrResponse.dev_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRandomDevAddrResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetRandomDevAddrResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_addr = 1;
  if (this->dev_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_addr().data(), static_cast<int>(this->_internal_dev_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetRandomDevAddrResponse.dev_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetRandomDevAddrResponse)
  return target;
}

size_t GetRandomDevAddrResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetRandomDevAddrResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_addr = 1;
  if (this->dev_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRandomDevAddrResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetRandomDevAddrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRandomDevAddrResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRandomDevAddrResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetRandomDevAddrResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetRandomDevAddrResponse)
    MergeFrom(*source);
  }
}

void GetRandomDevAddrResponse::MergeFrom(const GetRandomDevAddrResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetRandomDevAddrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_addr().size() > 0) {
    _internal_set_dev_addr(from._internal_dev_addr());
  }
}

void GetRandomDevAddrResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetRandomDevAddrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRandomDevAddrResponse::CopyFrom(const GetRandomDevAddrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetRandomDevAddrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomDevAddrResponse::IsInitialized() const {
  return true;
}

void GetRandomDevAddrResponse::InternalSwap(GetRandomDevAddrResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_addr_.Swap(&other->dev_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRandomDevAddrResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceMetricsRequest::InitAsDefaultInstance() {
  ::api::_GetDeviceMetricsRequest_default_instance_._instance.get_mutable()->start_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::api::_GetDeviceMetricsRequest_default_instance_._instance.get_mutable()->end_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetDeviceMetricsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start(const GetDeviceMetricsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end(const GetDeviceMetricsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceMetricsRequest::_Internal::start(const GetDeviceMetricsRequest* msg) {
  return *msg->start_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceMetricsRequest::_Internal::end(const GetDeviceMetricsRequest* msg) {
  return *msg->end_;
}
void GetDeviceMetricsRequest::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void GetDeviceMetricsRequest::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
GetDeviceMetricsRequest::GetDeviceMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceMetricsRequest)
}
GetDeviceMetricsRequest::GetDeviceMetricsRequest(const GetDeviceMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  if (from._internal_has_start()) {
    start_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  aggregation_ = from.aggregation_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceMetricsRequest)
}

void GetDeviceMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceMetricsRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_) -
      reinterpret_cast<char*>(&start_)) + sizeof(aggregation_));
}

GetDeviceMetricsRequest::~GetDeviceMetricsRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceMetricsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void GetDeviceMetricsRequest::ArenaDtor(void* object) {
  GetDeviceMetricsRequest* _this = reinterpret_cast< GetDeviceMetricsRequest* >(object);
  (void)_this;
}
void GetDeviceMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceMetricsRequest& GetDeviceMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceMetricsRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  aggregation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetDeviceMetricsRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Aggregation aggregation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation(static_cast<::common::Aggregation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceMetricsRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // .common.Aggregation aggregation = 4;
  if (this->aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_aggregation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceMetricsRequest)
  return target;
}

size_t GetDeviceMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .common.Aggregation aggregation = 4;
  if (this->aggregation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceMetricsRequest)
    MergeFrom(*source);
  }
}

void GetDeviceMetricsRequest::MergeFrom(const GetDeviceMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from.has_start()) {
    _internal_mutable_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end());
  }
  if (from.aggregation() != 0) {
    _internal_set_aggregation(from._internal_aggregation());
  }
}

void GetDeviceMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceMetricsRequest::CopyFrom(const GetDeviceMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceMetricsRequest::IsInitialized() const {
  return true;
}

void GetDeviceMetricsRequest::InternalSwap(GetDeviceMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceMetricsRequest, aggregation_)
      + sizeof(GetDeviceMetricsRequest::aggregation_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceMetricsRequest, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetDeviceMetricsResponse_MetricsEntry_DoNotUse::GetDeviceMetricsResponse_MetricsEntry_DoNotUse() {}
GetDeviceMetricsResponse_MetricsEntry_DoNotUse::GetDeviceMetricsResponse_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetDeviceMetricsResponse_MetricsEntry_DoNotUse::MergeFrom(const GetDeviceMetricsResponse_MetricsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceMetricsResponse_MetricsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetDeviceMetricsResponse_MetricsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GetDeviceMetricsResponse_StatesEntry_DoNotUse::GetDeviceMetricsResponse_StatesEntry_DoNotUse() {}
GetDeviceMetricsResponse_StatesEntry_DoNotUse::GetDeviceMetricsResponse_StatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetDeviceMetricsResponse_StatesEntry_DoNotUse::MergeFrom(const GetDeviceMetricsResponse_StatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceMetricsResponse_StatesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetDeviceMetricsResponse_StatesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetDeviceMetricsResponse::InitAsDefaultInstance() {
}
class GetDeviceMetricsResponse::_Internal {
 public:
};

void GetDeviceMetricsResponse::clear_metrics() {
  metrics_.Clear();
}
GetDeviceMetricsResponse::GetDeviceMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceMetricsResponse)
}
GetDeviceMetricsResponse::GetDeviceMetricsResponse(const GetDeviceMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metrics_.MergeFrom(from.metrics_);
  states_.MergeFrom(from.states_);
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceMetricsResponse)
}

void GetDeviceMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceMetricsResponse_api_2fdevice_2eproto.base);
}

GetDeviceMetricsResponse::~GetDeviceMetricsResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceMetricsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDeviceMetricsResponse::ArenaDtor(void* object) {
  GetDeviceMetricsResponse* _this = reinterpret_cast< GetDeviceMetricsResponse* >(object);
  (void)_this;
}
void GetDeviceMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceMetricsResponse& GetDeviceMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceMetricsResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .common.Metric> metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metrics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .api.DeviceState> states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&states_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .common.Metric> metrics = 1;
  if (!this->_internal_metrics().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api.GetDeviceMetricsResponse.MetricsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metrics().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metrics().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >::const_iterator
          it = this->_internal_metrics().begin();
          it != this->_internal_metrics().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetDeviceMetricsResponse_MetricsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >::const_iterator
          it = this->_internal_metrics().begin();
          it != this->_internal_metrics().end(); ++it) {
        target = GetDeviceMetricsResponse_MetricsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .api.DeviceState> states = 2;
  if (!this->_internal_states().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api.GetDeviceMetricsResponse.StatesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_states().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >::const_iterator
          it = this->_internal_states().begin();
          it != this->_internal_states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetDeviceMetricsResponse_StatesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >::const_iterator
          it = this->_internal_states().begin();
          it != this->_internal_states().end(); ++it) {
        target = GetDeviceMetricsResponse_StatesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceMetricsResponse)
  return target;
}

size_t GetDeviceMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .common.Metric> metrics = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metrics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >::const_iterator
      it = this->_internal_metrics().begin();
      it != this->_internal_metrics().end(); ++it) {
    total_size += GetDeviceMetricsResponse_MetricsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .api.DeviceState> states = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_states_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >::const_iterator
      it = this->_internal_states().begin();
      it != this->_internal_states().end(); ++it) {
    total_size += GetDeviceMetricsResponse_StatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceMetricsResponse)
    MergeFrom(*source);
  }
}

void GetDeviceMetricsResponse::MergeFrom(const GetDeviceMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  states_.MergeFrom(from.states_);
}

void GetDeviceMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceMetricsResponse::CopyFrom(const GetDeviceMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceMetricsResponse::IsInitialized() const {
  return true;
}

void GetDeviceMetricsResponse::InternalSwap(GetDeviceMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metrics_.Swap(&other->metrics_);
  states_.Swap(&other->states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceState::InitAsDefaultInstance() {
}
class DeviceState::_Internal {
 public:
};

DeviceState::DeviceState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DeviceState)
}
DeviceState::DeviceState(const DeviceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeviceState)
}

void DeviceState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceState_api_2fdevice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceState::~DeviceState() {
  // @@protoc_insertion_point(destructor:api.DeviceState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceState::ArenaDtor(void* object) {
  DeviceState* _this = reinterpret_cast< DeviceState* >(object);
  (void)_this;
}
void DeviceState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceState& DeviceState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceState_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceState::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceState.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceState.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceState.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceState.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceState)
  return target;
}

size_t DeviceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DeviceState)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DeviceState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DeviceState)
    MergeFrom(*source);
  }
}

void DeviceState::MergeFrom(const DeviceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void DeviceState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DeviceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceState::CopyFrom(const DeviceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceState::IsInitialized() const {
  return true;
}

void DeviceState::InternalSwap(DeviceState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceLinkMetricsRequest::InitAsDefaultInstance() {
  ::api::_GetDeviceLinkMetricsRequest_default_instance_._instance.get_mutable()->start_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::api::_GetDeviceLinkMetricsRequest_default_instance_._instance.get_mutable()->end_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetDeviceLinkMetricsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start(const GetDeviceLinkMetricsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end(const GetDeviceLinkMetricsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceLinkMetricsRequest::_Internal::start(const GetDeviceLinkMetricsRequest* msg) {
  return *msg->start_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceLinkMetricsRequest::_Internal::end(const GetDeviceLinkMetricsRequest* msg) {
  return *msg->end_;
}
void GetDeviceLinkMetricsRequest::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void GetDeviceLinkMetricsRequest::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
GetDeviceLinkMetricsRequest::GetDeviceLinkMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceLinkMetricsRequest)
}
GetDeviceLinkMetricsRequest::GetDeviceLinkMetricsRequest(const GetDeviceLinkMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  if (from._internal_has_start()) {
    start_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  aggregation_ = from.aggregation_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceLinkMetricsRequest)
}

void GetDeviceLinkMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceLinkMetricsRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_) -
      reinterpret_cast<char*>(&start_)) + sizeof(aggregation_));
}

GetDeviceLinkMetricsRequest::~GetDeviceLinkMetricsRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceLinkMetricsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceLinkMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void GetDeviceLinkMetricsRequest::ArenaDtor(void* object) {
  GetDeviceLinkMetricsRequest* _this = reinterpret_cast< GetDeviceLinkMetricsRequest* >(object);
  (void)_this;
}
void GetDeviceLinkMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceLinkMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceLinkMetricsRequest& GetDeviceLinkMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceLinkMetricsRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceLinkMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceLinkMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  aggregation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceLinkMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetDeviceLinkMetricsRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Aggregation aggregation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation(static_cast<::common::Aggregation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceLinkMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceLinkMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceLinkMetricsRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // .common.Aggregation aggregation = 4;
  if (this->aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_aggregation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceLinkMetricsRequest)
  return target;
}

size_t GetDeviceLinkMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceLinkMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .common.Aggregation aggregation = 4;
  if (this->aggregation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceLinkMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceLinkMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceLinkMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceLinkMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceLinkMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceLinkMetricsRequest)
    MergeFrom(*source);
  }
}

void GetDeviceLinkMetricsRequest::MergeFrom(const GetDeviceLinkMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceLinkMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from.has_start()) {
    _internal_mutable_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end());
  }
  if (from.aggregation() != 0) {
    _internal_set_aggregation(from._internal_aggregation());
  }
}

void GetDeviceLinkMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceLinkMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceLinkMetricsRequest::CopyFrom(const GetDeviceLinkMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceLinkMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceLinkMetricsRequest::IsInitialized() const {
  return true;
}

void GetDeviceLinkMetricsRequest::InternalSwap(GetDeviceLinkMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceLinkMetricsRequest, aggregation_)
      + sizeof(GetDeviceLinkMetricsRequest::aggregation_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceLinkMetricsRequest, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceLinkMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceLinkMetricsResponse::InitAsDefaultInstance() {
  ::api::_GetDeviceLinkMetricsResponse_default_instance_._instance.get_mutable()->rx_packets_ = const_cast< ::common::Metric*>(
      ::common::Metric::internal_default_instance());
  ::api::_GetDeviceLinkMetricsResponse_default_instance_._instance.get_mutable()->gw_rssi_ = const_cast< ::common::Metric*>(
      ::common::Metric::internal_default_instance());
  ::api::_GetDeviceLinkMetricsResponse_default_instance_._instance.get_mutable()->gw_snr_ = const_cast< ::common::Metric*>(
      ::common::Metric::internal_default_instance());
  ::api::_GetDeviceLinkMetricsResponse_default_instance_._instance.get_mutable()->rx_packets_per_freq_ = const_cast< ::common::Metric*>(
      ::common::Metric::internal_default_instance());
  ::api::_GetDeviceLinkMetricsResponse_default_instance_._instance.get_mutable()->rx_packets_per_dr_ = const_cast< ::common::Metric*>(
      ::common::Metric::internal_default_instance());
  ::api::_GetDeviceLinkMetricsResponse_default_instance_._instance.get_mutable()->errors_ = const_cast< ::common::Metric*>(
      ::common::Metric::internal_default_instance());
}
class GetDeviceLinkMetricsResponse::_Internal {
 public:
  static const ::common::Metric& rx_packets(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& gw_rssi(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& gw_snr(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& rx_packets_per_freq(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& rx_packets_per_dr(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& errors(const GetDeviceLinkMetricsResponse* msg);
};

const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::rx_packets(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->rx_packets_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::gw_rssi(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->gw_rssi_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::gw_snr(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->gw_snr_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::rx_packets_per_freq(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->rx_packets_per_freq_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::rx_packets_per_dr(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->rx_packets_per_dr_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::errors(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->errors_;
}
void GetDeviceLinkMetricsResponse::clear_rx_packets() {
  if (GetArena() == nullptr && rx_packets_ != nullptr) {
    delete rx_packets_;
  }
  rx_packets_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_gw_rssi() {
  if (GetArena() == nullptr && gw_rssi_ != nullptr) {
    delete gw_rssi_;
  }
  gw_rssi_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_gw_snr() {
  if (GetArena() == nullptr && gw_snr_ != nullptr) {
    delete gw_snr_;
  }
  gw_snr_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_rx_packets_per_freq() {
  if (GetArena() == nullptr && rx_packets_per_freq_ != nullptr) {
    delete rx_packets_per_freq_;
  }
  rx_packets_per_freq_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_rx_packets_per_dr() {
  if (GetArena() == nullptr && rx_packets_per_dr_ != nullptr) {
    delete rx_packets_per_dr_;
  }
  rx_packets_per_dr_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_errors() {
  if (GetArena() == nullptr && errors_ != nullptr) {
    delete errors_;
  }
  errors_ = nullptr;
}
GetDeviceLinkMetricsResponse::GetDeviceLinkMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceLinkMetricsResponse)
}
GetDeviceLinkMetricsResponse::GetDeviceLinkMetricsResponse(const GetDeviceLinkMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rx_packets()) {
    rx_packets_ = new ::common::Metric(*from.rx_packets_);
  } else {
    rx_packets_ = nullptr;
  }
  if (from._internal_has_gw_rssi()) {
    gw_rssi_ = new ::common::Metric(*from.gw_rssi_);
  } else {
    gw_rssi_ = nullptr;
  }
  if (from._internal_has_gw_snr()) {
    gw_snr_ = new ::common::Metric(*from.gw_snr_);
  } else {
    gw_snr_ = nullptr;
  }
  if (from._internal_has_rx_packets_per_freq()) {
    rx_packets_per_freq_ = new ::common::Metric(*from.rx_packets_per_freq_);
  } else {
    rx_packets_per_freq_ = nullptr;
  }
  if (from._internal_has_rx_packets_per_dr()) {
    rx_packets_per_dr_ = new ::common::Metric(*from.rx_packets_per_dr_);
  } else {
    rx_packets_per_dr_ = nullptr;
  }
  if (from._internal_has_errors()) {
    errors_ = new ::common::Metric(*from.errors_);
  } else {
    errors_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceLinkMetricsResponse)
}

void GetDeviceLinkMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceLinkMetricsResponse_api_2fdevice_2eproto.base);
  ::memset(&rx_packets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errors_) -
      reinterpret_cast<char*>(&rx_packets_)) + sizeof(errors_));
}

GetDeviceLinkMetricsResponse::~GetDeviceLinkMetricsResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceLinkMetricsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceLinkMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rx_packets_;
  if (this != internal_default_instance()) delete gw_rssi_;
  if (this != internal_default_instance()) delete gw_snr_;
  if (this != internal_default_instance()) delete rx_packets_per_freq_;
  if (this != internal_default_instance()) delete rx_packets_per_dr_;
  if (this != internal_default_instance()) delete errors_;
}

void GetDeviceLinkMetricsResponse::ArenaDtor(void* object) {
  GetDeviceLinkMetricsResponse* _this = reinterpret_cast< GetDeviceLinkMetricsResponse* >(object);
  (void)_this;
}
void GetDeviceLinkMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceLinkMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceLinkMetricsResponse& GetDeviceLinkMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceLinkMetricsResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceLinkMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceLinkMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rx_packets_ != nullptr) {
    delete rx_packets_;
  }
  rx_packets_ = nullptr;
  if (GetArena() == nullptr && gw_rssi_ != nullptr) {
    delete gw_rssi_;
  }
  gw_rssi_ = nullptr;
  if (GetArena() == nullptr && gw_snr_ != nullptr) {
    delete gw_snr_;
  }
  gw_snr_ = nullptr;
  if (GetArena() == nullptr && rx_packets_per_freq_ != nullptr) {
    delete rx_packets_per_freq_;
  }
  rx_packets_per_freq_ = nullptr;
  if (GetArena() == nullptr && rx_packets_per_dr_ != nullptr) {
    delete rx_packets_per_dr_;
  }
  rx_packets_per_dr_ = nullptr;
  if (GetArena() == nullptr && errors_ != nullptr) {
    delete errors_;
  }
  errors_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceLinkMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.Metric rx_packets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_packets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Metric gw_rssi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gw_rssi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Metric gw_snr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gw_snr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Metric rx_packets_per_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_packets_per_freq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Metric rx_packets_per_dr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_packets_per_dr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Metric errors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_errors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceLinkMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceLinkMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Metric rx_packets = 1;
  if (this->has_rx_packets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rx_packets(this), target, stream);
  }

  // .common.Metric gw_rssi = 2;
  if (this->has_gw_rssi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gw_rssi(this), target, stream);
  }

  // .common.Metric gw_snr = 3;
  if (this->has_gw_snr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gw_snr(this), target, stream);
  }

  // .common.Metric rx_packets_per_freq = 4;
  if (this->has_rx_packets_per_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rx_packets_per_freq(this), target, stream);
  }

  // .common.Metric rx_packets_per_dr = 5;
  if (this->has_rx_packets_per_dr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rx_packets_per_dr(this), target, stream);
  }

  // .common.Metric errors = 6;
  if (this->has_errors()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::errors(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceLinkMetricsResponse)
  return target;
}

size_t GetDeviceLinkMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceLinkMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Metric rx_packets = 1;
  if (this->has_rx_packets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rx_packets_);
  }

  // .common.Metric gw_rssi = 2;
  if (this->has_gw_rssi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gw_rssi_);
  }

  // .common.Metric gw_snr = 3;
  if (this->has_gw_snr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gw_snr_);
  }

  // .common.Metric rx_packets_per_freq = 4;
  if (this->has_rx_packets_per_freq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rx_packets_per_freq_);
  }

  // .common.Metric rx_packets_per_dr = 5;
  if (this->has_rx_packets_per_dr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rx_packets_per_dr_);
  }

  // .common.Metric errors = 6;
  if (this->has_errors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errors_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceLinkMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceLinkMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceLinkMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceLinkMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceLinkMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceLinkMetricsResponse)
    MergeFrom(*source);
  }
}

void GetDeviceLinkMetricsResponse::MergeFrom(const GetDeviceLinkMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceLinkMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rx_packets()) {
    _internal_mutable_rx_packets()->::common::Metric::MergeFrom(from._internal_rx_packets());
  }
  if (from.has_gw_rssi()) {
    _internal_mutable_gw_rssi()->::common::Metric::MergeFrom(from._internal_gw_rssi());
  }
  if (from.has_gw_snr()) {
    _internal_mutable_gw_snr()->::common::Metric::MergeFrom(from._internal_gw_snr());
  }
  if (from.has_rx_packets_per_freq()) {
    _internal_mutable_rx_packets_per_freq()->::common::Metric::MergeFrom(from._internal_rx_packets_per_freq());
  }
  if (from.has_rx_packets_per_dr()) {
    _internal_mutable_rx_packets_per_dr()->::common::Metric::MergeFrom(from._internal_rx_packets_per_dr());
  }
  if (from.has_errors()) {
    _internal_mutable_errors()->::common::Metric::MergeFrom(from._internal_errors());
  }
}

void GetDeviceLinkMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceLinkMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceLinkMetricsResponse::CopyFrom(const GetDeviceLinkMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceLinkMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceLinkMetricsResponse::IsInitialized() const {
  return true;
}

void GetDeviceLinkMetricsResponse::InternalSwap(GetDeviceLinkMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceLinkMetricsResponse, errors_)
      + sizeof(GetDeviceLinkMetricsResponse::errors_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceLinkMetricsResponse, rx_packets_)>(
          reinterpret_cast<char*>(&rx_packets_),
          reinterpret_cast<char*>(&other->rx_packets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceLinkMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceQueueItem::InitAsDefaultInstance() {
  ::api::_DeviceQueueItem_default_instance_._instance.get_mutable()->object_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class DeviceQueueItem::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& object(const DeviceQueueItem* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
DeviceQueueItem::_Internal::object(const DeviceQueueItem* msg) {
  return *msg->object_;
}
void DeviceQueueItem::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
DeviceQueueItem::DeviceQueueItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DeviceQueueItem)
}
DeviceQueueItem::DeviceQueueItem(const DeviceQueueItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_object()) {
    object_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.object_);
  } else {
    object_ = nullptr;
  }
  ::memcpy(&f_port_, &from.f_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_cnt_down_) -
    reinterpret_cast<char*>(&f_port_)) + sizeof(f_cnt_down_));
  // @@protoc_insertion_point(copy_constructor:api.DeviceQueueItem)
}

void DeviceQueueItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceQueueItem_api_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_cnt_down_) -
      reinterpret_cast<char*>(&object_)) + sizeof(f_cnt_down_));
}

DeviceQueueItem::~DeviceQueueItem() {
  // @@protoc_insertion_point(destructor:api.DeviceQueueItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceQueueItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_;
}

void DeviceQueueItem::ArenaDtor(void* object) {
  DeviceQueueItem* _this = reinterpret_cast< DeviceQueueItem* >(object);
  (void)_this;
}
void DeviceQueueItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceQueueItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceQueueItem& DeviceQueueItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceQueueItem_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceQueueItem::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceQueueItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  ::memset(&f_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_cnt_down_) -
      reinterpret_cast<char*>(&f_port_)) + sizeof(f_cnt_down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceQueueItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceQueueItem.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dev_eui = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DeviceQueueItem.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool confirmed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          confirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 f_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          f_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pending = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 f_cnt_down = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          f_cnt_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_encrypted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceQueueItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceQueueItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceQueueItem.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string dev_eui = 2;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceQueueItem.dev_eui");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dev_eui(), target);
  }

  // bool confirmed = 3;
  if (this->confirmed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_confirmed(), target);
  }

  // uint32 f_port = 4;
  if (this->f_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_f_port(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // .google.protobuf.Struct object = 6;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::object(this), target, stream);
  }

  // bool is_pending = 7;
  if (this->is_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_pending(), target);
  }

  // uint32 f_cnt_down = 8;
  if (this->f_cnt_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_f_cnt_down(), target);
  }

  // bool is_encrypted = 9;
  if (this->is_encrypted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_encrypted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceQueueItem)
  return target;
}

size_t DeviceQueueItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceQueueItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string dev_eui = 2;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .google.protobuf.Struct object = 6;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // uint32 f_port = 4;
  if (this->f_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_f_port());
  }

  // bool confirmed = 3;
  if (this->confirmed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pending = 7;
  if (this->is_pending() != 0) {
    total_size += 1 + 1;
  }

  // bool is_encrypted = 9;
  if (this->is_encrypted() != 0) {
    total_size += 1 + 1;
  }

  // uint32 f_cnt_down = 8;
  if (this->f_cnt_down() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_f_cnt_down());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceQueueItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DeviceQueueItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceQueueItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceQueueItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DeviceQueueItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DeviceQueueItem)
    MergeFrom(*source);
  }
}

void DeviceQueueItem::MergeFrom(const DeviceQueueItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceQueueItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_object()) {
    _internal_mutable_object()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_object());
  }
  if (from.f_port() != 0) {
    _internal_set_f_port(from._internal_f_port());
  }
  if (from.confirmed() != 0) {
    _internal_set_confirmed(from._internal_confirmed());
  }
  if (from.is_pending() != 0) {
    _internal_set_is_pending(from._internal_is_pending());
  }
  if (from.is_encrypted() != 0) {
    _internal_set_is_encrypted(from._internal_is_encrypted());
  }
  if (from.f_cnt_down() != 0) {
    _internal_set_f_cnt_down(from._internal_f_cnt_down());
  }
}

void DeviceQueueItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DeviceQueueItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceQueueItem::CopyFrom(const DeviceQueueItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceQueueItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceQueueItem::IsInitialized() const {
  return true;
}

void DeviceQueueItem::InternalSwap(DeviceQueueItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceQueueItem, f_cnt_down_)
      + sizeof(DeviceQueueItem::f_cnt_down_)
      - PROTOBUF_FIELD_OFFSET(DeviceQueueItem, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceQueueItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnqueueDeviceQueueItemRequest::InitAsDefaultInstance() {
  ::api::_EnqueueDeviceQueueItemRequest_default_instance_._instance.get_mutable()->queue_item_ = const_cast< ::api::DeviceQueueItem*>(
      ::api::DeviceQueueItem::internal_default_instance());
}
class EnqueueDeviceQueueItemRequest::_Internal {
 public:
  static const ::api::DeviceQueueItem& queue_item(const EnqueueDeviceQueueItemRequest* msg);
};

const ::api::DeviceQueueItem&
EnqueueDeviceQueueItemRequest::_Internal::queue_item(const EnqueueDeviceQueueItemRequest* msg) {
  return *msg->queue_item_;
}
EnqueueDeviceQueueItemRequest::EnqueueDeviceQueueItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.EnqueueDeviceQueueItemRequest)
}
EnqueueDeviceQueueItemRequest::EnqueueDeviceQueueItemRequest(const EnqueueDeviceQueueItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_queue_item()) {
    queue_item_ = new ::api::DeviceQueueItem(*from.queue_item_);
  } else {
    queue_item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.EnqueueDeviceQueueItemRequest)
}

void EnqueueDeviceQueueItemRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnqueueDeviceQueueItemRequest_api_2fdevice_2eproto.base);
  queue_item_ = nullptr;
}

EnqueueDeviceQueueItemRequest::~EnqueueDeviceQueueItemRequest() {
  // @@protoc_insertion_point(destructor:api.EnqueueDeviceQueueItemRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnqueueDeviceQueueItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete queue_item_;
}

void EnqueueDeviceQueueItemRequest::ArenaDtor(void* object) {
  EnqueueDeviceQueueItemRequest* _this = reinterpret_cast< EnqueueDeviceQueueItemRequest* >(object);
  (void)_this;
}
void EnqueueDeviceQueueItemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnqueueDeviceQueueItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnqueueDeviceQueueItemRequest& EnqueueDeviceQueueItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnqueueDeviceQueueItemRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void EnqueueDeviceQueueItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.EnqueueDeviceQueueItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && queue_item_ != nullptr) {
    delete queue_item_;
  }
  queue_item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnqueueDeviceQueueItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.DeviceQueueItem queue_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_queue_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnqueueDeviceQueueItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.EnqueueDeviceQueueItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceQueueItem queue_item = 1;
  if (this->has_queue_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::queue_item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.EnqueueDeviceQueueItemRequest)
  return target;
}

size_t EnqueueDeviceQueueItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.EnqueueDeviceQueueItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceQueueItem queue_item = 1;
  if (this->has_queue_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *queue_item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnqueueDeviceQueueItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.EnqueueDeviceQueueItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnqueueDeviceQueueItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnqueueDeviceQueueItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.EnqueueDeviceQueueItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.EnqueueDeviceQueueItemRequest)
    MergeFrom(*source);
  }
}

void EnqueueDeviceQueueItemRequest::MergeFrom(const EnqueueDeviceQueueItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.EnqueueDeviceQueueItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_queue_item()) {
    _internal_mutable_queue_item()->::api::DeviceQueueItem::MergeFrom(from._internal_queue_item());
  }
}

void EnqueueDeviceQueueItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.EnqueueDeviceQueueItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueDeviceQueueItemRequest::CopyFrom(const EnqueueDeviceQueueItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.EnqueueDeviceQueueItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueDeviceQueueItemRequest::IsInitialized() const {
  return true;
}

void EnqueueDeviceQueueItemRequest::InternalSwap(EnqueueDeviceQueueItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(queue_item_, other->queue_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueDeviceQueueItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnqueueDeviceQueueItemResponse::InitAsDefaultInstance() {
}
class EnqueueDeviceQueueItemResponse::_Internal {
 public:
};

EnqueueDeviceQueueItemResponse::EnqueueDeviceQueueItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.EnqueueDeviceQueueItemResponse)
}
EnqueueDeviceQueueItemResponse::EnqueueDeviceQueueItemResponse(const EnqueueDeviceQueueItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.EnqueueDeviceQueueItemResponse)
}

void EnqueueDeviceQueueItemResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnqueueDeviceQueueItemResponse_api_2fdevice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnqueueDeviceQueueItemResponse::~EnqueueDeviceQueueItemResponse() {
  // @@protoc_insertion_point(destructor:api.EnqueueDeviceQueueItemResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnqueueDeviceQueueItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnqueueDeviceQueueItemResponse::ArenaDtor(void* object) {
  EnqueueDeviceQueueItemResponse* _this = reinterpret_cast< EnqueueDeviceQueueItemResponse* >(object);
  (void)_this;
}
void EnqueueDeviceQueueItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnqueueDeviceQueueItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnqueueDeviceQueueItemResponse& EnqueueDeviceQueueItemResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnqueueDeviceQueueItemResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void EnqueueDeviceQueueItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.EnqueueDeviceQueueItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnqueueDeviceQueueItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.EnqueueDeviceQueueItemResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnqueueDeviceQueueItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.EnqueueDeviceQueueItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.EnqueueDeviceQueueItemResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.EnqueueDeviceQueueItemResponse)
  return target;
}

size_t EnqueueDeviceQueueItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.EnqueueDeviceQueueItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnqueueDeviceQueueItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.EnqueueDeviceQueueItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnqueueDeviceQueueItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnqueueDeviceQueueItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.EnqueueDeviceQueueItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.EnqueueDeviceQueueItemResponse)
    MergeFrom(*source);
  }
}

void EnqueueDeviceQueueItemResponse::MergeFrom(const EnqueueDeviceQueueItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.EnqueueDeviceQueueItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void EnqueueDeviceQueueItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.EnqueueDeviceQueueItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueDeviceQueueItemResponse::CopyFrom(const EnqueueDeviceQueueItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.EnqueueDeviceQueueItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueDeviceQueueItemResponse::IsInitialized() const {
  return true;
}

void EnqueueDeviceQueueItemResponse::InternalSwap(EnqueueDeviceQueueItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueDeviceQueueItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushDeviceQueueRequest::InitAsDefaultInstance() {
}
class FlushDeviceQueueRequest::_Internal {
 public:
};

FlushDeviceQueueRequest::FlushDeviceQueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.FlushDeviceQueueRequest)
}
FlushDeviceQueueRequest::FlushDeviceQueueRequest(const FlushDeviceQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.FlushDeviceQueueRequest)
}

void FlushDeviceQueueRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushDeviceQueueRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FlushDeviceQueueRequest::~FlushDeviceQueueRequest() {
  // @@protoc_insertion_point(destructor:api.FlushDeviceQueueRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlushDeviceQueueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlushDeviceQueueRequest::ArenaDtor(void* object) {
  FlushDeviceQueueRequest* _this = reinterpret_cast< FlushDeviceQueueRequest* >(object);
  (void)_this;
}
void FlushDeviceQueueRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushDeviceQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushDeviceQueueRequest& FlushDeviceQueueRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushDeviceQueueRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void FlushDeviceQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.FlushDeviceQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushDeviceQueueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.FlushDeviceQueueRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushDeviceQueueRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.FlushDeviceQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.FlushDeviceQueueRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.FlushDeviceQueueRequest)
  return target;
}

size_t FlushDeviceQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.FlushDeviceQueueRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushDeviceQueueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.FlushDeviceQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushDeviceQueueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushDeviceQueueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.FlushDeviceQueueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.FlushDeviceQueueRequest)
    MergeFrom(*source);
  }
}

void FlushDeviceQueueRequest::MergeFrom(const FlushDeviceQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.FlushDeviceQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void FlushDeviceQueueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.FlushDeviceQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushDeviceQueueRequest::CopyFrom(const FlushDeviceQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.FlushDeviceQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDeviceQueueRequest::IsInitialized() const {
  return true;
}

void FlushDeviceQueueRequest::InternalSwap(FlushDeviceQueueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushDeviceQueueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceQueueItemsRequest::InitAsDefaultInstance() {
}
class GetDeviceQueueItemsRequest::_Internal {
 public:
};

GetDeviceQueueItemsRequest::GetDeviceQueueItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceQueueItemsRequest)
}
GetDeviceQueueItemsRequest::GetDeviceQueueItemsRequest(const GetDeviceQueueItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  count_only_ = from.count_only_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceQueueItemsRequest)
}

void GetDeviceQueueItemsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceQueueItemsRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_only_ = false;
}

GetDeviceQueueItemsRequest::~GetDeviceQueueItemsRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceQueueItemsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceQueueItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceQueueItemsRequest::ArenaDtor(void* object) {
  GetDeviceQueueItemsRequest* _this = reinterpret_cast< GetDeviceQueueItemsRequest* >(object);
  (void)_this;
}
void GetDeviceQueueItemsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceQueueItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceQueueItemsRequest& GetDeviceQueueItemsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceQueueItemsRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceQueueItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceQueueItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  count_only_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceQueueItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetDeviceQueueItemsRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool count_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceQueueItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceQueueItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceQueueItemsRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // bool count_only = 2;
  if (this->count_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_count_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceQueueItemsRequest)
  return target;
}

size_t GetDeviceQueueItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceQueueItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // bool count_only = 2;
  if (this->count_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceQueueItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceQueueItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceQueueItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceQueueItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceQueueItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceQueueItemsRequest)
    MergeFrom(*source);
  }
}

void GetDeviceQueueItemsRequest::MergeFrom(const GetDeviceQueueItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceQueueItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from.count_only() != 0) {
    _internal_set_count_only(from._internal_count_only());
  }
}

void GetDeviceQueueItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceQueueItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceQueueItemsRequest::CopyFrom(const GetDeviceQueueItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceQueueItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceQueueItemsRequest::IsInitialized() const {
  return true;
}

void GetDeviceQueueItemsRequest::InternalSwap(GetDeviceQueueItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(count_only_, other->count_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceQueueItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceQueueItemsResponse::InitAsDefaultInstance() {
}
class GetDeviceQueueItemsResponse::_Internal {
 public:
};

GetDeviceQueueItemsResponse::GetDeviceQueueItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceQueueItemsResponse)
}
GetDeviceQueueItemsResponse::GetDeviceQueueItemsResponse(const GetDeviceQueueItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_count_ = from.total_count_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceQueueItemsResponse)
}

void GetDeviceQueueItemsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceQueueItemsResponse_api_2fdevice_2eproto.base);
  total_count_ = 0u;
}

GetDeviceQueueItemsResponse::~GetDeviceQueueItemsResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceQueueItemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceQueueItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDeviceQueueItemsResponse::ArenaDtor(void* object) {
  GetDeviceQueueItemsResponse* _this = reinterpret_cast< GetDeviceQueueItemsResponse* >(object);
  (void)_this;
}
void GetDeviceQueueItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceQueueItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceQueueItemsResponse& GetDeviceQueueItemsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceQueueItemsResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceQueueItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceQueueItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  total_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceQueueItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 total_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api.DeviceQueueItem result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceQueueItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceQueueItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_count = 1;
  if (this->total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_count(), target);
  }

  // repeated .api.DeviceQueueItem result = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_result(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceQueueItemsResponse)
  return target;
}

size_t GetDeviceQueueItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceQueueItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.DeviceQueueItem result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_count = 1;
  if (this->total_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceQueueItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceQueueItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceQueueItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceQueueItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceQueueItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceQueueItemsResponse)
    MergeFrom(*source);
  }
}

void GetDeviceQueueItemsResponse::MergeFrom(const GetDeviceQueueItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceQueueItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.total_count() != 0) {
    _internal_set_total_count(from._internal_total_count());
  }
}

void GetDeviceQueueItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceQueueItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceQueueItemsResponse::CopyFrom(const GetDeviceQueueItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceQueueItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceQueueItemsResponse::IsInitialized() const {
  return true;
}

void GetDeviceQueueItemsResponse::InternalSwap(GetDeviceQueueItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  swap(total_count_, other->total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceQueueItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushDevNoncesRequest::InitAsDefaultInstance() {
}
class FlushDevNoncesRequest::_Internal {
 public:
};

FlushDevNoncesRequest::FlushDevNoncesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.FlushDevNoncesRequest)
}
FlushDevNoncesRequest::FlushDevNoncesRequest(const FlushDevNoncesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.FlushDevNoncesRequest)
}

void FlushDevNoncesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushDevNoncesRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FlushDevNoncesRequest::~FlushDevNoncesRequest() {
  // @@protoc_insertion_point(destructor:api.FlushDevNoncesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlushDevNoncesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlushDevNoncesRequest::ArenaDtor(void* object) {
  FlushDevNoncesRequest* _this = reinterpret_cast< FlushDevNoncesRequest* >(object);
  (void)_this;
}
void FlushDevNoncesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushDevNoncesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushDevNoncesRequest& FlushDevNoncesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushDevNoncesRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void FlushDevNoncesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.FlushDevNoncesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushDevNoncesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.FlushDevNoncesRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushDevNoncesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.FlushDevNoncesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.FlushDevNoncesRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.FlushDevNoncesRequest)
  return target;
}

size_t FlushDevNoncesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.FlushDevNoncesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushDevNoncesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.FlushDevNoncesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushDevNoncesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushDevNoncesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.FlushDevNoncesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.FlushDevNoncesRequest)
    MergeFrom(*source);
  }
}

void FlushDevNoncesRequest::MergeFrom(const FlushDevNoncesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.FlushDevNoncesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void FlushDevNoncesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.FlushDevNoncesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushDevNoncesRequest::CopyFrom(const FlushDevNoncesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.FlushDevNoncesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDevNoncesRequest::IsInitialized() const {
  return true;
}

void FlushDevNoncesRequest::InternalSwap(FlushDevNoncesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushDevNoncesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceNextFCntDownRequest::InitAsDefaultInstance() {
}
class GetDeviceNextFCntDownRequest::_Internal {
 public:
};

GetDeviceNextFCntDownRequest::GetDeviceNextFCntDownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceNextFCntDownRequest)
}
GetDeviceNextFCntDownRequest::GetDeviceNextFCntDownRequest(const GetDeviceNextFCntDownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_eui().empty()) {
    dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_eui(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceNextFCntDownRequest)
}

void GetDeviceNextFCntDownRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeviceNextFCntDownRequest_api_2fdevice_2eproto.base);
  dev_eui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDeviceNextFCntDownRequest::~GetDeviceNextFCntDownRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceNextFCntDownRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceNextFCntDownRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_eui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceNextFCntDownRequest::ArenaDtor(void* object) {
  GetDeviceNextFCntDownRequest* _this = reinterpret_cast< GetDeviceNextFCntDownRequest* >(object);
  (void)_this;
}
void GetDeviceNextFCntDownRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceNextFCntDownRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceNextFCntDownRequest& GetDeviceNextFCntDownRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceNextFCntDownRequest_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceNextFCntDownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceNextFCntDownRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceNextFCntDownRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetDeviceNextFCntDownRequest.dev_eui"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceNextFCntDownRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceNextFCntDownRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceNextFCntDownRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceNextFCntDownRequest)
  return target;
}

size_t GetDeviceNextFCntDownRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceNextFCntDownRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (this->dev_eui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceNextFCntDownRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceNextFCntDownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceNextFCntDownRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceNextFCntDownRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceNextFCntDownRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceNextFCntDownRequest)
    MergeFrom(*source);
  }
}

void GetDeviceNextFCntDownRequest::MergeFrom(const GetDeviceNextFCntDownRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceNextFCntDownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_eui().size() > 0) {
    _internal_set_dev_eui(from._internal_dev_eui());
  }
}

void GetDeviceNextFCntDownRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceNextFCntDownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceNextFCntDownRequest::CopyFrom(const GetDeviceNextFCntDownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceNextFCntDownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceNextFCntDownRequest::IsInitialized() const {
  return true;
}

void GetDeviceNextFCntDownRequest::InternalSwap(GetDeviceNextFCntDownRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_eui_.Swap(&other->dev_eui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceNextFCntDownRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceNextFCntDownResponse::InitAsDefaultInstance() {
}
class GetDeviceNextFCntDownResponse::_Internal {
 public:
};

GetDeviceNextFCntDownResponse::GetDeviceNextFCntDownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceNextFCntDownResponse)
}
GetDeviceNextFCntDownResponse::GetDeviceNextFCntDownResponse(const GetDeviceNextFCntDownResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  f_cnt_down_ = from.f_cnt_down_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceNextFCntDownResponse)
}

void GetDeviceNextFCntDownResponse::SharedCtor() {
  f_cnt_down_ = 0u;
}

GetDeviceNextFCntDownResponse::~GetDeviceNextFCntDownResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceNextFCntDownResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDeviceNextFCntDownResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDeviceNextFCntDownResponse::ArenaDtor(void* object) {
  GetDeviceNextFCntDownResponse* _this = reinterpret_cast< GetDeviceNextFCntDownResponse* >(object);
  (void)_this;
}
void GetDeviceNextFCntDownResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceNextFCntDownResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceNextFCntDownResponse& GetDeviceNextFCntDownResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceNextFCntDownResponse_api_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceNextFCntDownResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceNextFCntDownResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f_cnt_down_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceNextFCntDownResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 f_cnt_down = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          f_cnt_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceNextFCntDownResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceNextFCntDownResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 f_cnt_down = 1;
  if (this->f_cnt_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_f_cnt_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceNextFCntDownResponse)
  return target;
}

size_t GetDeviceNextFCntDownResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceNextFCntDownResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 f_cnt_down = 1;
  if (this->f_cnt_down() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_f_cnt_down());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceNextFCntDownResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetDeviceNextFCntDownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceNextFCntDownResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceNextFCntDownResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetDeviceNextFCntDownResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetDeviceNextFCntDownResponse)
    MergeFrom(*source);
  }
}

void GetDeviceNextFCntDownResponse::MergeFrom(const GetDeviceNextFCntDownResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceNextFCntDownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.f_cnt_down() != 0) {
    _internal_set_f_cnt_down(from._internal_f_cnt_down());
  }
}

void GetDeviceNextFCntDownResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetDeviceNextFCntDownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceNextFCntDownResponse::CopyFrom(const GetDeviceNextFCntDownResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceNextFCntDownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceNextFCntDownResponse::IsInitialized() const {
  return true;
}

void GetDeviceNextFCntDownResponse::InternalSwap(GetDeviceNextFCntDownResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(f_cnt_down_, other->f_cnt_down_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceNextFCntDownResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::api::Device_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::Device_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Device_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Device_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::Device_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Device_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Device* Arena::CreateMaybeMessage< ::api::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceStatus* Arena::CreateMaybeMessage< ::api::DeviceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceListItem* Arena::CreateMaybeMessage< ::api::DeviceListItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceKeys* Arena::CreateMaybeMessage< ::api::DeviceKeys >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceKeys >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CreateDeviceRequest* Arena::CreateMaybeMessage< ::api::CreateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::CreateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceRequest* Arena::CreateMaybeMessage< ::api::GetDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceResponse* Arena::CreateMaybeMessage< ::api::GetDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::UpdateDeviceRequest* Arena::CreateMaybeMessage< ::api::UpdateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::UpdateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeleteDeviceRequest* Arena::CreateMaybeMessage< ::api::DeleteDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeleteDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ListDevicesRequest* Arena::CreateMaybeMessage< ::api::ListDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ListDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ListDevicesResponse* Arena::CreateMaybeMessage< ::api::ListDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ListDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CreateDeviceKeysRequest* Arena::CreateMaybeMessage< ::api::CreateDeviceKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::CreateDeviceKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceKeysRequest* Arena::CreateMaybeMessage< ::api::GetDeviceKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceKeysResponse* Arena::CreateMaybeMessage< ::api::GetDeviceKeysResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceKeysResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::UpdateDeviceKeysRequest* Arena::CreateMaybeMessage< ::api::UpdateDeviceKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::UpdateDeviceKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeleteDeviceKeysRequest* Arena::CreateMaybeMessage< ::api::DeleteDeviceKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeleteDeviceKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceActivation* Arena::CreateMaybeMessage< ::api::DeviceActivation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceActivation >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ActivateDeviceRequest* Arena::CreateMaybeMessage< ::api::ActivateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ActivateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeactivateDeviceRequest* Arena::CreateMaybeMessage< ::api::DeactivateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeactivateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceActivationRequest* Arena::CreateMaybeMessage< ::api::GetDeviceActivationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceActivationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceActivationResponse* Arena::CreateMaybeMessage< ::api::GetDeviceActivationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceActivationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetRandomDevAddrRequest* Arena::CreateMaybeMessage< ::api::GetRandomDevAddrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetRandomDevAddrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetRandomDevAddrResponse* Arena::CreateMaybeMessage< ::api::GetRandomDevAddrResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetRandomDevAddrResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceMetricsRequest* Arena::CreateMaybeMessage< ::api::GetDeviceMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse* Arena::CreateMaybeMessage< ::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceMetricsResponse* Arena::CreateMaybeMessage< ::api::GetDeviceMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceState* Arena::CreateMaybeMessage< ::api::DeviceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceState >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceLinkMetricsRequest* Arena::CreateMaybeMessage< ::api::GetDeviceLinkMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceLinkMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceLinkMetricsResponse* Arena::CreateMaybeMessage< ::api::GetDeviceLinkMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceLinkMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceQueueItem* Arena::CreateMaybeMessage< ::api::DeviceQueueItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceQueueItem >(arena);
}
template<> PROTOBUF_NOINLINE ::api::EnqueueDeviceQueueItemRequest* Arena::CreateMaybeMessage< ::api::EnqueueDeviceQueueItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::EnqueueDeviceQueueItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::EnqueueDeviceQueueItemResponse* Arena::CreateMaybeMessage< ::api::EnqueueDeviceQueueItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::EnqueueDeviceQueueItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::FlushDeviceQueueRequest* Arena::CreateMaybeMessage< ::api::FlushDeviceQueueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::FlushDeviceQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceQueueItemsRequest* Arena::CreateMaybeMessage< ::api::GetDeviceQueueItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceQueueItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceQueueItemsResponse* Arena::CreateMaybeMessage< ::api::GetDeviceQueueItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceQueueItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::FlushDevNoncesRequest* Arena::CreateMaybeMessage< ::api::FlushDevNoncesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::FlushDevNoncesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceNextFCntDownRequest* Arena::CreateMaybeMessage< ::api::GetDeviceNextFCntDownRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceNextFCntDownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceNextFCntDownResponse* Arena::CreateMaybeMessage< ::api::GetDeviceNextFCntDownResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceNextFCntDownResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
