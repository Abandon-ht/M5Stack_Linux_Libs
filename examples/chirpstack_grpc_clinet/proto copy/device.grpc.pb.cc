// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/device.proto

#include "device.pb.h"
#include "device.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace api {

static const char* DeviceService_method_names[] = {
  "/api.DeviceService/Create",
  "/api.DeviceService/Get",
  "/api.DeviceService/Update",
  "/api.DeviceService/Delete",
  "/api.DeviceService/List",
  "/api.DeviceService/CreateKeys",
  "/api.DeviceService/GetKeys",
  "/api.DeviceService/UpdateKeys",
  "/api.DeviceService/DeleteKeys",
  "/api.DeviceService/FlushDevNonces",
  "/api.DeviceService/Activate",
  "/api.DeviceService/Deactivate",
  "/api.DeviceService/GetActivation",
  "/api.DeviceService/GetRandomDevAddr",
  "/api.DeviceService/GetMetrics",
  "/api.DeviceService/GetLinkMetrics",
  "/api.DeviceService/Enqueue",
  "/api.DeviceService/FlushQueue",
  "/api.DeviceService/GetQueue",
  "/api.DeviceService/GetNextFCntDown",
};

std::unique_ptr< DeviceService::Stub> DeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceService::Stub> stub(new DeviceService::Stub(channel));
  return stub;
}

DeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(DeviceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(DeviceService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(DeviceService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(DeviceService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(DeviceService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateKeys_(DeviceService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKeys_(DeviceService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateKeys_(DeviceService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteKeys_(DeviceService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FlushDevNonces_(DeviceService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Activate_(DeviceService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Deactivate_(DeviceService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActivation_(DeviceService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRandomDevAddr_(DeviceService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMetrics_(DeviceService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLinkMetrics_(DeviceService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enqueue_(DeviceService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FlushQueue_(DeviceService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQueue_(DeviceService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNextFCntDown_(DeviceService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceService::Stub::Create(::grpc::ClientContext* context, const ::api::CreateDeviceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void DeviceService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::api::CreateDeviceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::api::CreateDeviceRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::api::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::api::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status DeviceService::Stub::Get(::grpc::ClientContext* context, const ::api::GetDeviceRequest& request, ::api::GetDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void DeviceService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::api::GetDeviceRequest* request, ::api::GetDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::api::GetDeviceRequest* request, ::api::GetDeviceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceResponse>* DeviceService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::api::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceResponse>* DeviceService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::api::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status DeviceService::Stub::Update(::grpc::ClientContext* context, const ::api::UpdateDeviceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void DeviceService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::api::UpdateDeviceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::api::UpdateDeviceRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::api::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::api::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status DeviceService::Stub::Delete(::grpc::ClientContext* context, const ::api::DeleteDeviceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void DeviceService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::api::DeleteDeviceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::api::DeleteDeviceRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::api::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::api::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status DeviceService::Stub::List(::grpc::ClientContext* context, const ::api::ListDevicesRequest& request, ::api::ListDevicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void DeviceService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::api::ListDevicesRequest* request, ::api::ListDevicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ListDevicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::api::ListDevicesRequest* request, ::api::ListDevicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ListDevicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::ListDevicesResponse>* DeviceService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::api::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::ListDevicesResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::ListDevicesResponse>* DeviceService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::api::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::ListDevicesResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status DeviceService::Stub::CreateKeys(::grpc::ClientContext* context, const ::api::CreateDeviceKeysRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateKeys_, context, request, response);
}

void DeviceService::Stub::experimental_async::CreateKeys(::grpc::ClientContext* context, const ::api::CreateDeviceKeysRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateKeys_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::CreateKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateKeys_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::CreateKeys(::grpc::ClientContext* context, const ::api::CreateDeviceKeysRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateKeys_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::CreateKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncCreateKeysRaw(::grpc::ClientContext* context, const ::api::CreateDeviceKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CreateKeys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncCreateKeysRaw(::grpc::ClientContext* context, const ::api::CreateDeviceKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CreateKeys_, context, request, false);
}

::grpc::Status DeviceService::Stub::GetKeys(::grpc::ClientContext* context, const ::api::GetDeviceKeysRequest& request, ::api::GetDeviceKeysResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetKeys_, context, request, response);
}

void DeviceService::Stub::experimental_async::GetKeys(::grpc::ClientContext* context, const ::api::GetDeviceKeysRequest* request, ::api::GetDeviceKeysResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKeys_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceKeysResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKeys_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetKeys(::grpc::ClientContext* context, const ::api::GetDeviceKeysRequest* request, ::api::GetDeviceKeysResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKeys_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::GetKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceKeysResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceKeysResponse>* DeviceService::Stub::AsyncGetKeysRaw(::grpc::ClientContext* context, const ::api::GetDeviceKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceKeysResponse>::Create(channel_.get(), cq, rpcmethod_GetKeys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceKeysResponse>* DeviceService::Stub::PrepareAsyncGetKeysRaw(::grpc::ClientContext* context, const ::api::GetDeviceKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceKeysResponse>::Create(channel_.get(), cq, rpcmethod_GetKeys_, context, request, false);
}

::grpc::Status DeviceService::Stub::UpdateKeys(::grpc::ClientContext* context, const ::api::UpdateDeviceKeysRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateKeys_, context, request, response);
}

void DeviceService::Stub::experimental_async::UpdateKeys(::grpc::ClientContext* context, const ::api::UpdateDeviceKeysRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateKeys_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::UpdateKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateKeys_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::UpdateKeys(::grpc::ClientContext* context, const ::api::UpdateDeviceKeysRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateKeys_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::UpdateKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncUpdateKeysRaw(::grpc::ClientContext* context, const ::api::UpdateDeviceKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UpdateKeys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncUpdateKeysRaw(::grpc::ClientContext* context, const ::api::UpdateDeviceKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UpdateKeys_, context, request, false);
}

::grpc::Status DeviceService::Stub::DeleteKeys(::grpc::ClientContext* context, const ::api::DeleteDeviceKeysRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteKeys_, context, request, response);
}

void DeviceService::Stub::experimental_async::DeleteKeys(::grpc::ClientContext* context, const ::api::DeleteDeviceKeysRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteKeys_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::DeleteKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteKeys_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::DeleteKeys(::grpc::ClientContext* context, const ::api::DeleteDeviceKeysRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteKeys_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::DeleteKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncDeleteKeysRaw(::grpc::ClientContext* context, const ::api::DeleteDeviceKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteKeys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncDeleteKeysRaw(::grpc::ClientContext* context, const ::api::DeleteDeviceKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteKeys_, context, request, false);
}

::grpc::Status DeviceService::Stub::FlushDevNonces(::grpc::ClientContext* context, const ::api::FlushDevNoncesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FlushDevNonces_, context, request, response);
}

void DeviceService::Stub::experimental_async::FlushDevNonces(::grpc::ClientContext* context, const ::api::FlushDevNoncesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FlushDevNonces_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::FlushDevNonces(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FlushDevNonces_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::FlushDevNonces(::grpc::ClientContext* context, const ::api::FlushDevNoncesRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FlushDevNonces_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::FlushDevNonces(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FlushDevNonces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncFlushDevNoncesRaw(::grpc::ClientContext* context, const ::api::FlushDevNoncesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_FlushDevNonces_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncFlushDevNoncesRaw(::grpc::ClientContext* context, const ::api::FlushDevNoncesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_FlushDevNonces_, context, request, false);
}

::grpc::Status DeviceService::Stub::Activate(::grpc::ClientContext* context, const ::api::ActivateDeviceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Activate_, context, request, response);
}

void DeviceService::Stub::experimental_async::Activate(::grpc::ClientContext* context, const ::api::ActivateDeviceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Activate_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Activate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Activate_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Activate(::grpc::ClientContext* context, const ::api::ActivateDeviceRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Activate_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::Activate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Activate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncActivateRaw(::grpc::ClientContext* context, const ::api::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Activate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncActivateRaw(::grpc::ClientContext* context, const ::api::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Activate_, context, request, false);
}

::grpc::Status DeviceService::Stub::Deactivate(::grpc::ClientContext* context, const ::api::DeactivateDeviceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Deactivate_, context, request, response);
}

void DeviceService::Stub::experimental_async::Deactivate(::grpc::ClientContext* context, const ::api::DeactivateDeviceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Deactivate_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Deactivate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Deactivate_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Deactivate(::grpc::ClientContext* context, const ::api::DeactivateDeviceRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Deactivate_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::Deactivate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Deactivate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncDeactivateRaw(::grpc::ClientContext* context, const ::api::DeactivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Deactivate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncDeactivateRaw(::grpc::ClientContext* context, const ::api::DeactivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Deactivate_, context, request, false);
}

::grpc::Status DeviceService::Stub::GetActivation(::grpc::ClientContext* context, const ::api::GetDeviceActivationRequest& request, ::api::GetDeviceActivationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetActivation_, context, request, response);
}

void DeviceService::Stub::experimental_async::GetActivation(::grpc::ClientContext* context, const ::api::GetDeviceActivationRequest* request, ::api::GetDeviceActivationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActivation_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetActivation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceActivationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActivation_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetActivation(::grpc::ClientContext* context, const ::api::GetDeviceActivationRequest* request, ::api::GetDeviceActivationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActivation_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::GetActivation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceActivationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActivation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceActivationResponse>* DeviceService::Stub::AsyncGetActivationRaw(::grpc::ClientContext* context, const ::api::GetDeviceActivationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceActivationResponse>::Create(channel_.get(), cq, rpcmethod_GetActivation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceActivationResponse>* DeviceService::Stub::PrepareAsyncGetActivationRaw(::grpc::ClientContext* context, const ::api::GetDeviceActivationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceActivationResponse>::Create(channel_.get(), cq, rpcmethod_GetActivation_, context, request, false);
}

::grpc::Status DeviceService::Stub::GetRandomDevAddr(::grpc::ClientContext* context, const ::api::GetRandomDevAddrRequest& request, ::api::GetRandomDevAddrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRandomDevAddr_, context, request, response);
}

void DeviceService::Stub::experimental_async::GetRandomDevAddr(::grpc::ClientContext* context, const ::api::GetRandomDevAddrRequest* request, ::api::GetRandomDevAddrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRandomDevAddr_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetRandomDevAddr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetRandomDevAddrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRandomDevAddr_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetRandomDevAddr(::grpc::ClientContext* context, const ::api::GetRandomDevAddrRequest* request, ::api::GetRandomDevAddrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRandomDevAddr_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::GetRandomDevAddr(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetRandomDevAddrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRandomDevAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetRandomDevAddrResponse>* DeviceService::Stub::AsyncGetRandomDevAddrRaw(::grpc::ClientContext* context, const ::api::GetRandomDevAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetRandomDevAddrResponse>::Create(channel_.get(), cq, rpcmethod_GetRandomDevAddr_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetRandomDevAddrResponse>* DeviceService::Stub::PrepareAsyncGetRandomDevAddrRaw(::grpc::ClientContext* context, const ::api::GetRandomDevAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetRandomDevAddrResponse>::Create(channel_.get(), cq, rpcmethod_GetRandomDevAddr_, context, request, false);
}

::grpc::Status DeviceService::Stub::GetMetrics(::grpc::ClientContext* context, const ::api::GetDeviceMetricsRequest& request, ::api::GetDeviceMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMetrics_, context, request, response);
}

void DeviceService::Stub::experimental_async::GetMetrics(::grpc::ClientContext* context, const ::api::GetDeviceMetricsRequest* request, ::api::GetDeviceMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetMetrics(::grpc::ClientContext* context, const ::api::GetDeviceMetricsRequest* request, ::api::GetDeviceMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::GetMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceMetricsResponse>* DeviceService::Stub::AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::api::GetDeviceMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceMetricsResponse>* DeviceService::Stub::PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::api::GetDeviceMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetMetrics_, context, request, false);
}

::grpc::Status DeviceService::Stub::GetLinkMetrics(::grpc::ClientContext* context, const ::api::GetDeviceLinkMetricsRequest& request, ::api::GetDeviceLinkMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLinkMetrics_, context, request, response);
}

void DeviceService::Stub::experimental_async::GetLinkMetrics(::grpc::ClientContext* context, const ::api::GetDeviceLinkMetricsRequest* request, ::api::GetDeviceLinkMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLinkMetrics_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetLinkMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceLinkMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLinkMetrics_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetLinkMetrics(::grpc::ClientContext* context, const ::api::GetDeviceLinkMetricsRequest* request, ::api::GetDeviceLinkMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLinkMetrics_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::GetLinkMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceLinkMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLinkMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceLinkMetricsResponse>* DeviceService::Stub::AsyncGetLinkMetricsRaw(::grpc::ClientContext* context, const ::api::GetDeviceLinkMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceLinkMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetLinkMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceLinkMetricsResponse>* DeviceService::Stub::PrepareAsyncGetLinkMetricsRaw(::grpc::ClientContext* context, const ::api::GetDeviceLinkMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceLinkMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetLinkMetrics_, context, request, false);
}

::grpc::Status DeviceService::Stub::Enqueue(::grpc::ClientContext* context, const ::api::EnqueueDeviceQueueItemRequest& request, ::api::EnqueueDeviceQueueItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Enqueue_, context, request, response);
}

void DeviceService::Stub::experimental_async::Enqueue(::grpc::ClientContext* context, const ::api::EnqueueDeviceQueueItemRequest* request, ::api::EnqueueDeviceQueueItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Enqueue_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Enqueue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::EnqueueDeviceQueueItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Enqueue_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Enqueue(::grpc::ClientContext* context, const ::api::EnqueueDeviceQueueItemRequest* request, ::api::EnqueueDeviceQueueItemResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Enqueue_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::Enqueue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::EnqueueDeviceQueueItemResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Enqueue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::EnqueueDeviceQueueItemResponse>* DeviceService::Stub::AsyncEnqueueRaw(::grpc::ClientContext* context, const ::api::EnqueueDeviceQueueItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::EnqueueDeviceQueueItemResponse>::Create(channel_.get(), cq, rpcmethod_Enqueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::EnqueueDeviceQueueItemResponse>* DeviceService::Stub::PrepareAsyncEnqueueRaw(::grpc::ClientContext* context, const ::api::EnqueueDeviceQueueItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::EnqueueDeviceQueueItemResponse>::Create(channel_.get(), cq, rpcmethod_Enqueue_, context, request, false);
}

::grpc::Status DeviceService::Stub::FlushQueue(::grpc::ClientContext* context, const ::api::FlushDeviceQueueRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FlushQueue_, context, request, response);
}

void DeviceService::Stub::experimental_async::FlushQueue(::grpc::ClientContext* context, const ::api::FlushDeviceQueueRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FlushQueue_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::FlushQueue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FlushQueue_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::FlushQueue(::grpc::ClientContext* context, const ::api::FlushDeviceQueueRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FlushQueue_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::FlushQueue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FlushQueue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncFlushQueueRaw(::grpc::ClientContext* context, const ::api::FlushDeviceQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_FlushQueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncFlushQueueRaw(::grpc::ClientContext* context, const ::api::FlushDeviceQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_FlushQueue_, context, request, false);
}

::grpc::Status DeviceService::Stub::GetQueue(::grpc::ClientContext* context, const ::api::GetDeviceQueueItemsRequest& request, ::api::GetDeviceQueueItemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetQueue_, context, request, response);
}

void DeviceService::Stub::experimental_async::GetQueue(::grpc::ClientContext* context, const ::api::GetDeviceQueueItemsRequest* request, ::api::GetDeviceQueueItemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetQueue_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetQueue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceQueueItemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetQueue_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetQueue(::grpc::ClientContext* context, const ::api::GetDeviceQueueItemsRequest* request, ::api::GetDeviceQueueItemsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetQueue_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::GetQueue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceQueueItemsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetQueue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceQueueItemsResponse>* DeviceService::Stub::AsyncGetQueueRaw(::grpc::ClientContext* context, const ::api::GetDeviceQueueItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceQueueItemsResponse>::Create(channel_.get(), cq, rpcmethod_GetQueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceQueueItemsResponse>* DeviceService::Stub::PrepareAsyncGetQueueRaw(::grpc::ClientContext* context, const ::api::GetDeviceQueueItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceQueueItemsResponse>::Create(channel_.get(), cq, rpcmethod_GetQueue_, context, request, false);
}

::grpc::Status DeviceService::Stub::GetNextFCntDown(::grpc::ClientContext* context, const ::api::GetDeviceNextFCntDownRequest& request, ::api::GetDeviceNextFCntDownResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNextFCntDown_, context, request, response);
}

void DeviceService::Stub::experimental_async::GetNextFCntDown(::grpc::ClientContext* context, const ::api::GetDeviceNextFCntDownRequest* request, ::api::GetDeviceNextFCntDownResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNextFCntDown_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetNextFCntDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceNextFCntDownResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNextFCntDown_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::GetNextFCntDown(::grpc::ClientContext* context, const ::api::GetDeviceNextFCntDownRequest* request, ::api::GetDeviceNextFCntDownResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNextFCntDown_, context, request, response, reactor);
}

void DeviceService::Stub::experimental_async::GetNextFCntDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetDeviceNextFCntDownResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNextFCntDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceNextFCntDownResponse>* DeviceService::Stub::AsyncGetNextFCntDownRaw(::grpc::ClientContext* context, const ::api::GetDeviceNextFCntDownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceNextFCntDownResponse>::Create(channel_.get(), cq, rpcmethod_GetNextFCntDown_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetDeviceNextFCntDownResponse>* DeviceService::Stub::PrepareAsyncGetNextFCntDownRaw(::grpc::ClientContext* context, const ::api::GetDeviceNextFCntDownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::api::GetDeviceNextFCntDownResponse>::Create(channel_.get(), cq, rpcmethod_GetNextFCntDown_, context, request, false);
}

DeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::CreateDeviceRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::CreateDeviceRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::GetDeviceRequest, ::api::GetDeviceResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::GetDeviceRequest* req,
             ::api::GetDeviceResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::UpdateDeviceRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::UpdateDeviceRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::DeleteDeviceRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::DeleteDeviceRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::ListDevicesRequest, ::api::ListDevicesResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::ListDevicesRequest* req,
             ::api::ListDevicesResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::CreateDeviceKeysRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::CreateDeviceKeysRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->CreateKeys(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::GetDeviceKeysRequest, ::api::GetDeviceKeysResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::GetDeviceKeysRequest* req,
             ::api::GetDeviceKeysResponse* resp) {
               return service->GetKeys(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::UpdateDeviceKeysRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::UpdateDeviceKeysRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateKeys(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::DeleteDeviceKeysRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::DeleteDeviceKeysRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteKeys(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::FlushDevNoncesRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::FlushDevNoncesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->FlushDevNonces(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::ActivateDeviceRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::ActivateDeviceRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Activate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::DeactivateDeviceRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::DeactivateDeviceRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Deactivate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::GetDeviceActivationRequest, ::api::GetDeviceActivationResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::GetDeviceActivationRequest* req,
             ::api::GetDeviceActivationResponse* resp) {
               return service->GetActivation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::GetRandomDevAddrRequest, ::api::GetRandomDevAddrResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::GetRandomDevAddrRequest* req,
             ::api::GetRandomDevAddrResponse* resp) {
               return service->GetRandomDevAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::GetDeviceMetricsRequest, ::api::GetDeviceMetricsResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::GetDeviceMetricsRequest* req,
             ::api::GetDeviceMetricsResponse* resp) {
               return service->GetMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::GetDeviceLinkMetricsRequest, ::api::GetDeviceLinkMetricsResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::GetDeviceLinkMetricsRequest* req,
             ::api::GetDeviceLinkMetricsResponse* resp) {
               return service->GetLinkMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::EnqueueDeviceQueueItemRequest, ::api::EnqueueDeviceQueueItemResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::EnqueueDeviceQueueItemRequest* req,
             ::api::EnqueueDeviceQueueItemResponse* resp) {
               return service->Enqueue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::FlushDeviceQueueRequest, ::google::protobuf::Empty>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::FlushDeviceQueueRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->FlushQueue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::GetDeviceQueueItemsRequest, ::api::GetDeviceQueueItemsResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::GetDeviceQueueItemsRequest* req,
             ::api::GetDeviceQueueItemsResponse* resp) {
               return service->GetQueue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::api::GetDeviceNextFCntDownRequest, ::api::GetDeviceNextFCntDownResponse>(
          [](DeviceService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::api::GetDeviceNextFCntDownRequest* req,
             ::api::GetDeviceNextFCntDownResponse* resp) {
               return service->GetNextFCntDown(ctx, req, resp);
             }, this)));
}

DeviceService::Service::~Service() {
}

::grpc::Status DeviceService::Service::Create(::grpc::ServerContext* context, const ::api::CreateDeviceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::Get(::grpc::ServerContext* context, const ::api::GetDeviceRequest* request, ::api::GetDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::Update(::grpc::ServerContext* context, const ::api::UpdateDeviceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::Delete(::grpc::ServerContext* context, const ::api::DeleteDeviceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::List(::grpc::ServerContext* context, const ::api::ListDevicesRequest* request, ::api::ListDevicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::CreateKeys(::grpc::ServerContext* context, const ::api::CreateDeviceKeysRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetKeys(::grpc::ServerContext* context, const ::api::GetDeviceKeysRequest* request, ::api::GetDeviceKeysResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::UpdateKeys(::grpc::ServerContext* context, const ::api::UpdateDeviceKeysRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::DeleteKeys(::grpc::ServerContext* context, const ::api::DeleteDeviceKeysRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::FlushDevNonces(::grpc::ServerContext* context, const ::api::FlushDevNoncesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::Activate(::grpc::ServerContext* context, const ::api::ActivateDeviceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::Deactivate(::grpc::ServerContext* context, const ::api::DeactivateDeviceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetActivation(::grpc::ServerContext* context, const ::api::GetDeviceActivationRequest* request, ::api::GetDeviceActivationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetRandomDevAddr(::grpc::ServerContext* context, const ::api::GetRandomDevAddrRequest* request, ::api::GetRandomDevAddrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetMetrics(::grpc::ServerContext* context, const ::api::GetDeviceMetricsRequest* request, ::api::GetDeviceMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetLinkMetrics(::grpc::ServerContext* context, const ::api::GetDeviceLinkMetricsRequest* request, ::api::GetDeviceLinkMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::Enqueue(::grpc::ServerContext* context, const ::api::EnqueueDeviceQueueItemRequest* request, ::api::EnqueueDeviceQueueItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::FlushQueue(::grpc::ServerContext* context, const ::api::FlushDeviceQueueRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetQueue(::grpc::ServerContext* context, const ::api::GetDeviceQueueItemsRequest* request, ::api::GetDeviceQueueItemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetNextFCntDown(::grpc::ServerContext* context, const ::api::GetDeviceNextFCntDownRequest* request, ::api::GetDeviceNextFCntDownResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api

