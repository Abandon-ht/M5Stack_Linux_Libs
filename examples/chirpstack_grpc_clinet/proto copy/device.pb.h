// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fdevice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2fdevice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2fdevice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fdevice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[41]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2fdevice_2eproto;
namespace api {
class ActivateDeviceRequest;
class ActivateDeviceRequestDefaultTypeInternal;
extern ActivateDeviceRequestDefaultTypeInternal _ActivateDeviceRequest_default_instance_;
class CreateDeviceKeysRequest;
class CreateDeviceKeysRequestDefaultTypeInternal;
extern CreateDeviceKeysRequestDefaultTypeInternal _CreateDeviceKeysRequest_default_instance_;
class CreateDeviceRequest;
class CreateDeviceRequestDefaultTypeInternal;
extern CreateDeviceRequestDefaultTypeInternal _CreateDeviceRequest_default_instance_;
class DeactivateDeviceRequest;
class DeactivateDeviceRequestDefaultTypeInternal;
extern DeactivateDeviceRequestDefaultTypeInternal _DeactivateDeviceRequest_default_instance_;
class DeleteDeviceKeysRequest;
class DeleteDeviceKeysRequestDefaultTypeInternal;
extern DeleteDeviceKeysRequestDefaultTypeInternal _DeleteDeviceKeysRequest_default_instance_;
class DeleteDeviceRequest;
class DeleteDeviceRequestDefaultTypeInternal;
extern DeleteDeviceRequestDefaultTypeInternal _DeleteDeviceRequest_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceActivation;
class DeviceActivationDefaultTypeInternal;
extern DeviceActivationDefaultTypeInternal _DeviceActivation_default_instance_;
class DeviceKeys;
class DeviceKeysDefaultTypeInternal;
extern DeviceKeysDefaultTypeInternal _DeviceKeys_default_instance_;
class DeviceListItem;
class DeviceListItemDefaultTypeInternal;
extern DeviceListItemDefaultTypeInternal _DeviceListItem_default_instance_;
class DeviceQueueItem;
class DeviceQueueItemDefaultTypeInternal;
extern DeviceQueueItemDefaultTypeInternal _DeviceQueueItem_default_instance_;
class DeviceState;
class DeviceStateDefaultTypeInternal;
extern DeviceStateDefaultTypeInternal _DeviceState_default_instance_;
class DeviceStatus;
class DeviceStatusDefaultTypeInternal;
extern DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
class Device_TagsEntry_DoNotUse;
class Device_TagsEntry_DoNotUseDefaultTypeInternal;
extern Device_TagsEntry_DoNotUseDefaultTypeInternal _Device_TagsEntry_DoNotUse_default_instance_;
class Device_VariablesEntry_DoNotUse;
class Device_VariablesEntry_DoNotUseDefaultTypeInternal;
extern Device_VariablesEntry_DoNotUseDefaultTypeInternal _Device_VariablesEntry_DoNotUse_default_instance_;
class EnqueueDeviceQueueItemRequest;
class EnqueueDeviceQueueItemRequestDefaultTypeInternal;
extern EnqueueDeviceQueueItemRequestDefaultTypeInternal _EnqueueDeviceQueueItemRequest_default_instance_;
class EnqueueDeviceQueueItemResponse;
class EnqueueDeviceQueueItemResponseDefaultTypeInternal;
extern EnqueueDeviceQueueItemResponseDefaultTypeInternal _EnqueueDeviceQueueItemResponse_default_instance_;
class FlushDevNoncesRequest;
class FlushDevNoncesRequestDefaultTypeInternal;
extern FlushDevNoncesRequestDefaultTypeInternal _FlushDevNoncesRequest_default_instance_;
class FlushDeviceQueueRequest;
class FlushDeviceQueueRequestDefaultTypeInternal;
extern FlushDeviceQueueRequestDefaultTypeInternal _FlushDeviceQueueRequest_default_instance_;
class GetDeviceActivationRequest;
class GetDeviceActivationRequestDefaultTypeInternal;
extern GetDeviceActivationRequestDefaultTypeInternal _GetDeviceActivationRequest_default_instance_;
class GetDeviceActivationResponse;
class GetDeviceActivationResponseDefaultTypeInternal;
extern GetDeviceActivationResponseDefaultTypeInternal _GetDeviceActivationResponse_default_instance_;
class GetDeviceKeysRequest;
class GetDeviceKeysRequestDefaultTypeInternal;
extern GetDeviceKeysRequestDefaultTypeInternal _GetDeviceKeysRequest_default_instance_;
class GetDeviceKeysResponse;
class GetDeviceKeysResponseDefaultTypeInternal;
extern GetDeviceKeysResponseDefaultTypeInternal _GetDeviceKeysResponse_default_instance_;
class GetDeviceLinkMetricsRequest;
class GetDeviceLinkMetricsRequestDefaultTypeInternal;
extern GetDeviceLinkMetricsRequestDefaultTypeInternal _GetDeviceLinkMetricsRequest_default_instance_;
class GetDeviceLinkMetricsResponse;
class GetDeviceLinkMetricsResponseDefaultTypeInternal;
extern GetDeviceLinkMetricsResponseDefaultTypeInternal _GetDeviceLinkMetricsResponse_default_instance_;
class GetDeviceMetricsRequest;
class GetDeviceMetricsRequestDefaultTypeInternal;
extern GetDeviceMetricsRequestDefaultTypeInternal _GetDeviceMetricsRequest_default_instance_;
class GetDeviceMetricsResponse;
class GetDeviceMetricsResponseDefaultTypeInternal;
extern GetDeviceMetricsResponseDefaultTypeInternal _GetDeviceMetricsResponse_default_instance_;
class GetDeviceMetricsResponse_MetricsEntry_DoNotUse;
class GetDeviceMetricsResponse_MetricsEntry_DoNotUseDefaultTypeInternal;
extern GetDeviceMetricsResponse_MetricsEntry_DoNotUseDefaultTypeInternal _GetDeviceMetricsResponse_MetricsEntry_DoNotUse_default_instance_;
class GetDeviceMetricsResponse_StatesEntry_DoNotUse;
class GetDeviceMetricsResponse_StatesEntry_DoNotUseDefaultTypeInternal;
extern GetDeviceMetricsResponse_StatesEntry_DoNotUseDefaultTypeInternal _GetDeviceMetricsResponse_StatesEntry_DoNotUse_default_instance_;
class GetDeviceNextFCntDownRequest;
class GetDeviceNextFCntDownRequestDefaultTypeInternal;
extern GetDeviceNextFCntDownRequestDefaultTypeInternal _GetDeviceNextFCntDownRequest_default_instance_;
class GetDeviceNextFCntDownResponse;
class GetDeviceNextFCntDownResponseDefaultTypeInternal;
extern GetDeviceNextFCntDownResponseDefaultTypeInternal _GetDeviceNextFCntDownResponse_default_instance_;
class GetDeviceQueueItemsRequest;
class GetDeviceQueueItemsRequestDefaultTypeInternal;
extern GetDeviceQueueItemsRequestDefaultTypeInternal _GetDeviceQueueItemsRequest_default_instance_;
class GetDeviceQueueItemsResponse;
class GetDeviceQueueItemsResponseDefaultTypeInternal;
extern GetDeviceQueueItemsResponseDefaultTypeInternal _GetDeviceQueueItemsResponse_default_instance_;
class GetDeviceRequest;
class GetDeviceRequestDefaultTypeInternal;
extern GetDeviceRequestDefaultTypeInternal _GetDeviceRequest_default_instance_;
class GetDeviceResponse;
class GetDeviceResponseDefaultTypeInternal;
extern GetDeviceResponseDefaultTypeInternal _GetDeviceResponse_default_instance_;
class GetRandomDevAddrRequest;
class GetRandomDevAddrRequestDefaultTypeInternal;
extern GetRandomDevAddrRequestDefaultTypeInternal _GetRandomDevAddrRequest_default_instance_;
class GetRandomDevAddrResponse;
class GetRandomDevAddrResponseDefaultTypeInternal;
extern GetRandomDevAddrResponseDefaultTypeInternal _GetRandomDevAddrResponse_default_instance_;
class ListDevicesRequest;
class ListDevicesRequestDefaultTypeInternal;
extern ListDevicesRequestDefaultTypeInternal _ListDevicesRequest_default_instance_;
class ListDevicesResponse;
class ListDevicesResponseDefaultTypeInternal;
extern ListDevicesResponseDefaultTypeInternal _ListDevicesResponse_default_instance_;
class UpdateDeviceKeysRequest;
class UpdateDeviceKeysRequestDefaultTypeInternal;
extern UpdateDeviceKeysRequestDefaultTypeInternal _UpdateDeviceKeysRequest_default_instance_;
class UpdateDeviceRequest;
class UpdateDeviceRequestDefaultTypeInternal;
extern UpdateDeviceRequestDefaultTypeInternal _UpdateDeviceRequest_default_instance_;
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> ::api::ActivateDeviceRequest* Arena::CreateMaybeMessage<::api::ActivateDeviceRequest>(Arena*);
template<> ::api::CreateDeviceKeysRequest* Arena::CreateMaybeMessage<::api::CreateDeviceKeysRequest>(Arena*);
template<> ::api::CreateDeviceRequest* Arena::CreateMaybeMessage<::api::CreateDeviceRequest>(Arena*);
template<> ::api::DeactivateDeviceRequest* Arena::CreateMaybeMessage<::api::DeactivateDeviceRequest>(Arena*);
template<> ::api::DeleteDeviceKeysRequest* Arena::CreateMaybeMessage<::api::DeleteDeviceKeysRequest>(Arena*);
template<> ::api::DeleteDeviceRequest* Arena::CreateMaybeMessage<::api::DeleteDeviceRequest>(Arena*);
template<> ::api::Device* Arena::CreateMaybeMessage<::api::Device>(Arena*);
template<> ::api::DeviceActivation* Arena::CreateMaybeMessage<::api::DeviceActivation>(Arena*);
template<> ::api::DeviceKeys* Arena::CreateMaybeMessage<::api::DeviceKeys>(Arena*);
template<> ::api::DeviceListItem* Arena::CreateMaybeMessage<::api::DeviceListItem>(Arena*);
template<> ::api::DeviceQueueItem* Arena::CreateMaybeMessage<::api::DeviceQueueItem>(Arena*);
template<> ::api::DeviceState* Arena::CreateMaybeMessage<::api::DeviceState>(Arena*);
template<> ::api::DeviceStatus* Arena::CreateMaybeMessage<::api::DeviceStatus>(Arena*);
template<> ::api::Device_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::api::Device_TagsEntry_DoNotUse>(Arena*);
template<> ::api::Device_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::api::Device_VariablesEntry_DoNotUse>(Arena*);
template<> ::api::EnqueueDeviceQueueItemRequest* Arena::CreateMaybeMessage<::api::EnqueueDeviceQueueItemRequest>(Arena*);
template<> ::api::EnqueueDeviceQueueItemResponse* Arena::CreateMaybeMessage<::api::EnqueueDeviceQueueItemResponse>(Arena*);
template<> ::api::FlushDevNoncesRequest* Arena::CreateMaybeMessage<::api::FlushDevNoncesRequest>(Arena*);
template<> ::api::FlushDeviceQueueRequest* Arena::CreateMaybeMessage<::api::FlushDeviceQueueRequest>(Arena*);
template<> ::api::GetDeviceActivationRequest* Arena::CreateMaybeMessage<::api::GetDeviceActivationRequest>(Arena*);
template<> ::api::GetDeviceActivationResponse* Arena::CreateMaybeMessage<::api::GetDeviceActivationResponse>(Arena*);
template<> ::api::GetDeviceKeysRequest* Arena::CreateMaybeMessage<::api::GetDeviceKeysRequest>(Arena*);
template<> ::api::GetDeviceKeysResponse* Arena::CreateMaybeMessage<::api::GetDeviceKeysResponse>(Arena*);
template<> ::api::GetDeviceLinkMetricsRequest* Arena::CreateMaybeMessage<::api::GetDeviceLinkMetricsRequest>(Arena*);
template<> ::api::GetDeviceLinkMetricsResponse* Arena::CreateMaybeMessage<::api::GetDeviceLinkMetricsResponse>(Arena*);
template<> ::api::GetDeviceMetricsRequest* Arena::CreateMaybeMessage<::api::GetDeviceMetricsRequest>(Arena*);
template<> ::api::GetDeviceMetricsResponse* Arena::CreateMaybeMessage<::api::GetDeviceMetricsResponse>(Arena*);
template<> ::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage<::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse>(Arena*);
template<> ::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse* Arena::CreateMaybeMessage<::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse>(Arena*);
template<> ::api::GetDeviceNextFCntDownRequest* Arena::CreateMaybeMessage<::api::GetDeviceNextFCntDownRequest>(Arena*);
template<> ::api::GetDeviceNextFCntDownResponse* Arena::CreateMaybeMessage<::api::GetDeviceNextFCntDownResponse>(Arena*);
template<> ::api::GetDeviceQueueItemsRequest* Arena::CreateMaybeMessage<::api::GetDeviceQueueItemsRequest>(Arena*);
template<> ::api::GetDeviceQueueItemsResponse* Arena::CreateMaybeMessage<::api::GetDeviceQueueItemsResponse>(Arena*);
template<> ::api::GetDeviceRequest* Arena::CreateMaybeMessage<::api::GetDeviceRequest>(Arena*);
template<> ::api::GetDeviceResponse* Arena::CreateMaybeMessage<::api::GetDeviceResponse>(Arena*);
template<> ::api::GetRandomDevAddrRequest* Arena::CreateMaybeMessage<::api::GetRandomDevAddrRequest>(Arena*);
template<> ::api::GetRandomDevAddrResponse* Arena::CreateMaybeMessage<::api::GetRandomDevAddrResponse>(Arena*);
template<> ::api::ListDevicesRequest* Arena::CreateMaybeMessage<::api::ListDevicesRequest>(Arena*);
template<> ::api::ListDevicesResponse* Arena::CreateMaybeMessage<::api::ListDevicesResponse>(Arena*);
template<> ::api::UpdateDeviceKeysRequest* Arena::CreateMaybeMessage<::api::UpdateDeviceKeysRequest>(Arena*);
template<> ::api::UpdateDeviceRequest* Arena::CreateMaybeMessage<::api::UpdateDeviceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api {

// ===================================================================

class Device_VariablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Device_VariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Device_VariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Device_VariablesEntry_DoNotUse();
  Device_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Device_VariablesEntry_DoNotUse& other);
  static const Device_VariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Device_VariablesEntry_DoNotUse*>(&_Device_VariablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api.Device.VariablesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api.Device.VariablesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Device_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Device_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Device_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Device_TagsEntry_DoNotUse();
  Device_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Device_TagsEntry_DoNotUse& other);
  static const Device_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Device_TagsEntry_DoNotUse*>(&_Device_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api.Device.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api.Device.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.Device) */ {
 public:
  inline Device() : Device(nullptr) {};
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 8,
    kTagsFieldNumber = 9,
    kDevEuiFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kApplicationIdFieldNumber = 4,
    kDeviceProfileIdFieldNumber = 5,
    kJoinEuiFieldNumber = 10,
    kSkipFcntCheckFieldNumber = 6,
    kIsDisabledFieldNumber = 7,
  };
  // map<string, string> variables = 8;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_variables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_variables();

  // map<string, string> tags = 9;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string application_id = 4;
  void clear_application_id();
  const std::string& application_id() const;
  void set_application_id(const std::string& value);
  void set_application_id(std::string&& value);
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  std::string* mutable_application_id();
  std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_application_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_application_id(
      std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string device_profile_id = 5;
  void clear_device_profile_id();
  const std::string& device_profile_id() const;
  void set_device_profile_id(const std::string& value);
  void set_device_profile_id(std::string&& value);
  void set_device_profile_id(const char* value);
  void set_device_profile_id(const char* value, size_t size);
  std::string* mutable_device_profile_id();
  std::string* release_device_profile_id();
  void set_allocated_device_profile_id(std::string* device_profile_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_profile_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_profile_id(
      std::string* device_profile_id);
  private:
  const std::string& _internal_device_profile_id() const;
  void _internal_set_device_profile_id(const std::string& value);
  std::string* _internal_mutable_device_profile_id();
  public:

  // string join_eui = 10;
  void clear_join_eui();
  const std::string& join_eui() const;
  void set_join_eui(const std::string& value);
  void set_join_eui(std::string&& value);
  void set_join_eui(const char* value);
  void set_join_eui(const char* value, size_t size);
  std::string* mutable_join_eui();
  std::string* release_join_eui();
  void set_allocated_join_eui(std::string* join_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_join_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_join_eui(
      std::string* join_eui);
  private:
  const std::string& _internal_join_eui() const;
  void _internal_set_join_eui(const std::string& value);
  std::string* _internal_mutable_join_eui();
  public:

  // bool skip_fcnt_check = 6;
  void clear_skip_fcnt_check();
  bool skip_fcnt_check() const;
  void set_skip_fcnt_check(bool value);
  private:
  bool _internal_skip_fcnt_check() const;
  void _internal_set_skip_fcnt_check(bool value);
  public:

  // bool is_disabled = 7;
  void clear_is_disabled();
  bool is_disabled() const;
  void set_is_disabled(bool value);
  private:
  bool _internal_is_disabled() const;
  void _internal_set_is_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Device_VariablesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Device_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_profile_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr join_eui_;
  bool skip_fcnt_check_;
  bool is_disabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DeviceStatus) */ {
 public:
  inline DeviceStatus() : DeviceStatus(nullptr) {};
  virtual ~DeviceStatus();

  DeviceStatus(const DeviceStatus& from);
  DeviceStatus(DeviceStatus&& from) noexcept
    : DeviceStatus() {
    *this = ::std::move(from);
  }

  inline DeviceStatus& operator=(const DeviceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStatus& operator=(DeviceStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceStatus* internal_default_instance() {
    return reinterpret_cast<const DeviceStatus*>(
               &_DeviceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceStatus& a, DeviceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceStatus* New() const final {
    return CreateMaybeMessage<DeviceStatus>(nullptr);
  }

  DeviceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceStatus& from);
  void MergeFrom(const DeviceStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DeviceStatus";
  }
  protected:
  explicit DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarginFieldNumber = 1,
    kExternalPowerSourceFieldNumber = 2,
    kBatteryLevelFieldNumber = 3,
  };
  // int32 margin = 1;
  void clear_margin();
  ::PROTOBUF_NAMESPACE_ID::int32 margin() const;
  void set_margin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_margin() const;
  void _internal_set_margin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool external_power_source = 2;
  void clear_external_power_source();
  bool external_power_source() const;
  void set_external_power_source(bool value);
  private:
  bool _internal_external_power_source() const;
  void _internal_set_external_power_source(bool value);
  public:

  // float battery_level = 3;
  void clear_battery_level();
  float battery_level() const;
  void set_battery_level(float value);
  private:
  float _internal_battery_level() const;
  void _internal_set_battery_level(float value);
  public:

  // @@protoc_insertion_point(class_scope:api.DeviceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 margin_;
  bool external_power_source_;
  float battery_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceListItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DeviceListItem) */ {
 public:
  inline DeviceListItem() : DeviceListItem(nullptr) {};
  virtual ~DeviceListItem();

  DeviceListItem(const DeviceListItem& from);
  DeviceListItem(DeviceListItem&& from) noexcept
    : DeviceListItem() {
    *this = ::std::move(from);
  }

  inline DeviceListItem& operator=(const DeviceListItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceListItem& operator=(DeviceListItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceListItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceListItem* internal_default_instance() {
    return reinterpret_cast<const DeviceListItem*>(
               &_DeviceListItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceListItem& a, DeviceListItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceListItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceListItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceListItem* New() const final {
    return CreateMaybeMessage<DeviceListItem>(nullptr);
  }

  DeviceListItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceListItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceListItem& from);
  void MergeFrom(const DeviceListItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceListItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DeviceListItem";
  }
  protected:
  explicit DeviceListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
    kNameFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kDeviceProfileIdFieldNumber = 7,
    kDeviceProfileNameFieldNumber = 8,
    kCreatedAtFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
    kLastSeenAtFieldNumber = 4,
    kDeviceStatusFieldNumber = 9,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 6;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string device_profile_id = 7;
  void clear_device_profile_id();
  const std::string& device_profile_id() const;
  void set_device_profile_id(const std::string& value);
  void set_device_profile_id(std::string&& value);
  void set_device_profile_id(const char* value);
  void set_device_profile_id(const char* value, size_t size);
  std::string* mutable_device_profile_id();
  std::string* release_device_profile_id();
  void set_allocated_device_profile_id(std::string* device_profile_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_profile_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_profile_id(
      std::string* device_profile_id);
  private:
  const std::string& _internal_device_profile_id() const;
  void _internal_set_device_profile_id(const std::string& value);
  std::string* _internal_mutable_device_profile_id();
  public:

  // string device_profile_name = 8;
  void clear_device_profile_name();
  const std::string& device_profile_name() const;
  void set_device_profile_name(const std::string& value);
  void set_device_profile_name(std::string&& value);
  void set_device_profile_name(const char* value);
  void set_device_profile_name(const char* value, size_t size);
  std::string* mutable_device_profile_name();
  std::string* release_device_profile_name();
  void set_allocated_device_profile_name(std::string* device_profile_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_profile_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_profile_name(
      std::string* device_profile_name);
  private:
  const std::string& _internal_device_profile_name() const;
  void _internal_set_device_profile_name(const std::string& value);
  std::string* _internal_mutable_device_profile_name();
  public:

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 3;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .google.protobuf.Timestamp last_seen_at = 4;
  bool has_last_seen_at() const;
  private:
  bool _internal_has_last_seen_at() const;
  public:
  void clear_last_seen_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_seen_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_seen_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_seen_at();
  void set_allocated_last_seen_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_seen_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_seen_at();
  public:
  void unsafe_arena_set_allocated_last_seen_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_seen_at();

  // .api.DeviceStatus device_status = 9;
  bool has_device_status() const;
  private:
  bool _internal_has_device_status() const;
  public:
  void clear_device_status();
  const ::api::DeviceStatus& device_status() const;
  ::api::DeviceStatus* release_device_status();
  ::api::DeviceStatus* mutable_device_status();
  void set_allocated_device_status(::api::DeviceStatus* device_status);
  private:
  const ::api::DeviceStatus& _internal_device_status() const;
  ::api::DeviceStatus* _internal_mutable_device_status();
  public:
  void unsafe_arena_set_allocated_device_status(
      ::api::DeviceStatus* device_status);
  ::api::DeviceStatus* unsafe_arena_release_device_status();

  // @@protoc_insertion_point(class_scope:api.DeviceListItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_profile_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_profile_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at_;
  ::api::DeviceStatus* device_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceKeys PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DeviceKeys) */ {
 public:
  inline DeviceKeys() : DeviceKeys(nullptr) {};
  virtual ~DeviceKeys();

  DeviceKeys(const DeviceKeys& from);
  DeviceKeys(DeviceKeys&& from) noexcept
    : DeviceKeys() {
    *this = ::std::move(from);
  }

  inline DeviceKeys& operator=(const DeviceKeys& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceKeys& operator=(DeviceKeys&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceKeys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceKeys* internal_default_instance() {
    return reinterpret_cast<const DeviceKeys*>(
               &_DeviceKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeviceKeys& a, DeviceKeys& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceKeys* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceKeys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceKeys* New() const final {
    return CreateMaybeMessage<DeviceKeys>(nullptr);
  }

  DeviceKeys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceKeys>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceKeys& from);
  void MergeFrom(const DeviceKeys& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceKeys* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DeviceKeys";
  }
  protected:
  explicit DeviceKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
    kNwkKeyFieldNumber = 2,
    kAppKeyFieldNumber = 3,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // string nwk_key = 2;
  void clear_nwk_key();
  const std::string& nwk_key() const;
  void set_nwk_key(const std::string& value);
  void set_nwk_key(std::string&& value);
  void set_nwk_key(const char* value);
  void set_nwk_key(const char* value, size_t size);
  std::string* mutable_nwk_key();
  std::string* release_nwk_key();
  void set_allocated_nwk_key(std::string* nwk_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nwk_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nwk_key(
      std::string* nwk_key);
  private:
  const std::string& _internal_nwk_key() const;
  void _internal_set_nwk_key(const std::string& value);
  std::string* _internal_mutable_nwk_key();
  public:

  // string app_key = 3;
  void clear_app_key();
  const std::string& app_key() const;
  void set_app_key(const std::string& value);
  void set_app_key(std::string&& value);
  void set_app_key(const char* value);
  void set_app_key(const char* value, size_t size);
  std::string* mutable_app_key();
  std::string* release_app_key();
  void set_allocated_app_key(std::string* app_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_key(
      std::string* app_key);
  private:
  const std::string& _internal_app_key() const;
  void _internal_set_app_key(const std::string& value);
  std::string* _internal_mutable_app_key();
  public:

  // @@protoc_insertion_point(class_scope:api.DeviceKeys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nwk_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.CreateDeviceRequest) */ {
 public:
  inline CreateDeviceRequest() : CreateDeviceRequest(nullptr) {};
  virtual ~CreateDeviceRequest();

  CreateDeviceRequest(const CreateDeviceRequest& from);
  CreateDeviceRequest(CreateDeviceRequest&& from) noexcept
    : CreateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline CreateDeviceRequest& operator=(const CreateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceRequest& operator=(CreateDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceRequest*>(
               &_CreateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateDeviceRequest& a, CreateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceRequest* New() const final {
    return CreateMaybeMessage<CreateDeviceRequest>(nullptr);
  }

  CreateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceRequest& from);
  void MergeFrom(const CreateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.CreateDeviceRequest";
  }
  protected:
  explicit CreateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .api.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::api::Device& device() const;
  ::api::Device* release_device();
  ::api::Device* mutable_device();
  void set_allocated_device(::api::Device* device);
  private:
  const ::api::Device& _internal_device() const;
  ::api::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::api::Device* device);
  ::api::Device* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:api.CreateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::Device* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceRequest) */ {
 public:
  inline GetDeviceRequest() : GetDeviceRequest(nullptr) {};
  virtual ~GetDeviceRequest();

  GetDeviceRequest(const GetDeviceRequest& from);
  GetDeviceRequest(GetDeviceRequest&& from) noexcept
    : GetDeviceRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceRequest& operator=(const GetDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceRequest& operator=(GetDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceRequest*>(
               &_GetDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetDeviceRequest& a, GetDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceRequest* New() const final {
    return CreateMaybeMessage<GetDeviceRequest>(nullptr);
  }

  GetDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceRequest& from);
  void MergeFrom(const GetDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceRequest";
  }
  protected:
  explicit GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceResponse) */ {
 public:
  inline GetDeviceResponse() : GetDeviceResponse(nullptr) {};
  virtual ~GetDeviceResponse();

  GetDeviceResponse(const GetDeviceResponse& from);
  GetDeviceResponse(GetDeviceResponse&& from) noexcept
    : GetDeviceResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceResponse& operator=(const GetDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceResponse& operator=(GetDeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceResponse*>(
               &_GetDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetDeviceResponse& a, GetDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceResponse* New() const final {
    return CreateMaybeMessage<GetDeviceResponse>(nullptr);
  }

  GetDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceResponse& from);
  void MergeFrom(const GetDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceResponse";
  }
  protected:
  explicit GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kCreatedAtFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
    kLastSeenAtFieldNumber = 4,
    kDeviceStatusFieldNumber = 5,
    kClassEnabledFieldNumber = 6,
  };
  // .api.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::api::Device& device() const;
  ::api::Device* release_device();
  ::api::Device* mutable_device();
  void set_allocated_device(::api::Device* device);
  private:
  const ::api::Device& _internal_device() const;
  ::api::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::api::Device* device);
  ::api::Device* unsafe_arena_release_device();

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 3;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .google.protobuf.Timestamp last_seen_at = 4;
  bool has_last_seen_at() const;
  private:
  bool _internal_has_last_seen_at() const;
  public:
  void clear_last_seen_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_seen_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_seen_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_seen_at();
  void set_allocated_last_seen_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_seen_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_seen_at();
  public:
  void unsafe_arena_set_allocated_last_seen_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_seen_at();

  // .api.DeviceStatus device_status = 5;
  bool has_device_status() const;
  private:
  bool _internal_has_device_status() const;
  public:
  void clear_device_status();
  const ::api::DeviceStatus& device_status() const;
  ::api::DeviceStatus* release_device_status();
  ::api::DeviceStatus* mutable_device_status();
  void set_allocated_device_status(::api::DeviceStatus* device_status);
  private:
  const ::api::DeviceStatus& _internal_device_status() const;
  ::api::DeviceStatus* _internal_mutable_device_status();
  public:
  void unsafe_arena_set_allocated_device_status(
      ::api::DeviceStatus* device_status);
  ::api::DeviceStatus* unsafe_arena_release_device_status();

  // .common.DeviceClass class_enabled = 6;
  void clear_class_enabled();
  ::common::DeviceClass class_enabled() const;
  void set_class_enabled(::common::DeviceClass value);
  private:
  ::common::DeviceClass _internal_class_enabled() const;
  void _internal_set_class_enabled(::common::DeviceClass value);
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::Device* device_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at_;
  ::api::DeviceStatus* device_status_;
  int class_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.UpdateDeviceRequest) */ {
 public:
  inline UpdateDeviceRequest() : UpdateDeviceRequest(nullptr) {};
  virtual ~UpdateDeviceRequest();

  UpdateDeviceRequest(const UpdateDeviceRequest& from);
  UpdateDeviceRequest(UpdateDeviceRequest&& from) noexcept
    : UpdateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceRequest& operator=(const UpdateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceRequest& operator=(UpdateDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceRequest*>(
               &_UpdateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateDeviceRequest& a, UpdateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeviceRequest* New() const final {
    return CreateMaybeMessage<UpdateDeviceRequest>(nullptr);
  }

  UpdateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeviceRequest& from);
  void MergeFrom(const UpdateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.UpdateDeviceRequest";
  }
  protected:
  explicit UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .api.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::api::Device& device() const;
  ::api::Device* release_device();
  ::api::Device* mutable_device();
  void set_allocated_device(::api::Device* device);
  private:
  const ::api::Device& _internal_device() const;
  ::api::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::api::Device* device);
  ::api::Device* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:api.UpdateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::Device* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DeleteDeviceRequest) */ {
 public:
  inline DeleteDeviceRequest() : DeleteDeviceRequest(nullptr) {};
  virtual ~DeleteDeviceRequest();

  DeleteDeviceRequest(const DeleteDeviceRequest& from);
  DeleteDeviceRequest(DeleteDeviceRequest&& from) noexcept
    : DeleteDeviceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDeviceRequest& operator=(const DeleteDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDeviceRequest& operator=(DeleteDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDeviceRequest*>(
               &_DeleteDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteDeviceRequest& a, DeleteDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDeviceRequest* New() const final {
    return CreateMaybeMessage<DeleteDeviceRequest>(nullptr);
  }

  DeleteDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDeviceRequest& from);
  void MergeFrom(const DeleteDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DeleteDeviceRequest";
  }
  protected:
  explicit DeleteDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.DeleteDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ListDevicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ListDevicesRequest) */ {
 public:
  inline ListDevicesRequest() : ListDevicesRequest(nullptr) {};
  virtual ~ListDevicesRequest();

  ListDevicesRequest(const ListDevicesRequest& from);
  ListDevicesRequest(ListDevicesRequest&& from) noexcept
    : ListDevicesRequest() {
    *this = ::std::move(from);
  }

  inline ListDevicesRequest& operator=(const ListDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDevicesRequest& operator=(ListDevicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDevicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDevicesRequest*>(
               &_ListDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListDevicesRequest& a, ListDevicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDevicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDevicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDevicesRequest* New() const final {
    return CreateMaybeMessage<ListDevicesRequest>(nullptr);
  }

  ListDevicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDevicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDevicesRequest& from);
  void MergeFrom(const ListDevicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDevicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ListDevicesRequest";
  }
  protected:
  explicit ListDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchFieldNumber = 3,
    kApplicationIdFieldNumber = 4,
    kMulticastGroupIdFieldNumber = 5,
    kLimitFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string search = 3;
  void clear_search();
  const std::string& search() const;
  void set_search(const std::string& value);
  void set_search(std::string&& value);
  void set_search(const char* value);
  void set_search(const char* value, size_t size);
  std::string* mutable_search();
  std::string* release_search();
  void set_allocated_search(std::string* search);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_search();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_search(
      std::string* search);
  private:
  const std::string& _internal_search() const;
  void _internal_set_search(const std::string& value);
  std::string* _internal_mutable_search();
  public:

  // string application_id = 4;
  void clear_application_id();
  const std::string& application_id() const;
  void set_application_id(const std::string& value);
  void set_application_id(std::string&& value);
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  std::string* mutable_application_id();
  std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_application_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_application_id(
      std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string multicast_group_id = 5;
  void clear_multicast_group_id();
  const std::string& multicast_group_id() const;
  void set_multicast_group_id(const std::string& value);
  void set_multicast_group_id(std::string&& value);
  void set_multicast_group_id(const char* value);
  void set_multicast_group_id(const char* value, size_t size);
  std::string* mutable_multicast_group_id();
  std::string* release_multicast_group_id();
  void set_allocated_multicast_group_id(std::string* multicast_group_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_multicast_group_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_multicast_group_id(
      std::string* multicast_group_id);
  private:
  const std::string& _internal_multicast_group_id() const;
  void _internal_set_multicast_group_id(const std::string& value);
  std::string* _internal_mutable_multicast_group_id();
  public:

  // uint32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.ListDevicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multicast_group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ListDevicesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ListDevicesResponse) */ {
 public:
  inline ListDevicesResponse() : ListDevicesResponse(nullptr) {};
  virtual ~ListDevicesResponse();

  ListDevicesResponse(const ListDevicesResponse& from);
  ListDevicesResponse(ListDevicesResponse&& from) noexcept
    : ListDevicesResponse() {
    *this = ::std::move(from);
  }

  inline ListDevicesResponse& operator=(const ListDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDevicesResponse& operator=(ListDevicesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDevicesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDevicesResponse*>(
               &_ListDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListDevicesResponse& a, ListDevicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDevicesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDevicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDevicesResponse* New() const final {
    return CreateMaybeMessage<ListDevicesResponse>(nullptr);
  }

  ListDevicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDevicesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDevicesResponse& from);
  void MergeFrom(const ListDevicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDevicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ListDevicesResponse";
  }
  protected:
  explicit ListDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .api.DeviceListItem result = 2;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::api::DeviceListItem* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceListItem >*
      mutable_result();
  private:
  const ::api::DeviceListItem& _internal_result(int index) const;
  ::api::DeviceListItem* _internal_add_result();
  public:
  const ::api::DeviceListItem& result(int index) const;
  ::api::DeviceListItem* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceListItem >&
      result() const;

  // uint32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.ListDevicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceListItem > result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceKeysRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.CreateDeviceKeysRequest) */ {
 public:
  inline CreateDeviceKeysRequest() : CreateDeviceKeysRequest(nullptr) {};
  virtual ~CreateDeviceKeysRequest();

  CreateDeviceKeysRequest(const CreateDeviceKeysRequest& from);
  CreateDeviceKeysRequest(CreateDeviceKeysRequest&& from) noexcept
    : CreateDeviceKeysRequest() {
    *this = ::std::move(from);
  }

  inline CreateDeviceKeysRequest& operator=(const CreateDeviceKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceKeysRequest& operator=(CreateDeviceKeysRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeviceKeysRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceKeysRequest*>(
               &_CreateDeviceKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CreateDeviceKeysRequest& a, CreateDeviceKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceKeysRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeviceKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceKeysRequest* New() const final {
    return CreateMaybeMessage<CreateDeviceKeysRequest>(nullptr);
  }

  CreateDeviceKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceKeysRequest& from);
  void MergeFrom(const CreateDeviceKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.CreateDeviceKeysRequest";
  }
  protected:
  explicit CreateDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceKeysFieldNumber = 1,
  };
  // .api.DeviceKeys device_keys = 1;
  bool has_device_keys() const;
  private:
  bool _internal_has_device_keys() const;
  public:
  void clear_device_keys();
  const ::api::DeviceKeys& device_keys() const;
  ::api::DeviceKeys* release_device_keys();
  ::api::DeviceKeys* mutable_device_keys();
  void set_allocated_device_keys(::api::DeviceKeys* device_keys);
  private:
  const ::api::DeviceKeys& _internal_device_keys() const;
  ::api::DeviceKeys* _internal_mutable_device_keys();
  public:
  void unsafe_arena_set_allocated_device_keys(
      ::api::DeviceKeys* device_keys);
  ::api::DeviceKeys* unsafe_arena_release_device_keys();

  // @@protoc_insertion_point(class_scope:api.CreateDeviceKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::DeviceKeys* device_keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceKeysRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceKeysRequest) */ {
 public:
  inline GetDeviceKeysRequest() : GetDeviceKeysRequest(nullptr) {};
  virtual ~GetDeviceKeysRequest();

  GetDeviceKeysRequest(const GetDeviceKeysRequest& from);
  GetDeviceKeysRequest(GetDeviceKeysRequest&& from) noexcept
    : GetDeviceKeysRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceKeysRequest& operator=(const GetDeviceKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceKeysRequest& operator=(GetDeviceKeysRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceKeysRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceKeysRequest*>(
               &_GetDeviceKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetDeviceKeysRequest& a, GetDeviceKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceKeysRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceKeysRequest* New() const final {
    return CreateMaybeMessage<GetDeviceKeysRequest>(nullptr);
  }

  GetDeviceKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceKeysRequest& from);
  void MergeFrom(const GetDeviceKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceKeysRequest";
  }
  protected:
  explicit GetDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceKeysResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceKeysResponse) */ {
 public:
  inline GetDeviceKeysResponse() : GetDeviceKeysResponse(nullptr) {};
  virtual ~GetDeviceKeysResponse();

  GetDeviceKeysResponse(const GetDeviceKeysResponse& from);
  GetDeviceKeysResponse(GetDeviceKeysResponse&& from) noexcept
    : GetDeviceKeysResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceKeysResponse& operator=(const GetDeviceKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceKeysResponse& operator=(GetDeviceKeysResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceKeysResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceKeysResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceKeysResponse*>(
               &_GetDeviceKeysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetDeviceKeysResponse& a, GetDeviceKeysResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceKeysResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceKeysResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceKeysResponse* New() const final {
    return CreateMaybeMessage<GetDeviceKeysResponse>(nullptr);
  }

  GetDeviceKeysResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceKeysResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceKeysResponse& from);
  void MergeFrom(const GetDeviceKeysResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceKeysResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceKeysResponse";
  }
  protected:
  explicit GetDeviceKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceKeysFieldNumber = 1,
    kCreatedAtFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
  };
  // .api.DeviceKeys device_keys = 1;
  bool has_device_keys() const;
  private:
  bool _internal_has_device_keys() const;
  public:
  void clear_device_keys();
  const ::api::DeviceKeys& device_keys() const;
  ::api::DeviceKeys* release_device_keys();
  ::api::DeviceKeys* mutable_device_keys();
  void set_allocated_device_keys(::api::DeviceKeys* device_keys);
  private:
  const ::api::DeviceKeys& _internal_device_keys() const;
  ::api::DeviceKeys* _internal_mutable_device_keys();
  public:
  void unsafe_arena_set_allocated_device_keys(
      ::api::DeviceKeys* device_keys);
  ::api::DeviceKeys* unsafe_arena_release_device_keys();

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 3;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // @@protoc_insertion_point(class_scope:api.GetDeviceKeysResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::DeviceKeys* device_keys_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeviceKeysRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.UpdateDeviceKeysRequest) */ {
 public:
  inline UpdateDeviceKeysRequest() : UpdateDeviceKeysRequest(nullptr) {};
  virtual ~UpdateDeviceKeysRequest();

  UpdateDeviceKeysRequest(const UpdateDeviceKeysRequest& from);
  UpdateDeviceKeysRequest(UpdateDeviceKeysRequest&& from) noexcept
    : UpdateDeviceKeysRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceKeysRequest& operator=(const UpdateDeviceKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceKeysRequest& operator=(UpdateDeviceKeysRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeviceKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDeviceKeysRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceKeysRequest*>(
               &_UpdateDeviceKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdateDeviceKeysRequest& a, UpdateDeviceKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceKeysRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeviceKeysRequest* New() const final {
    return CreateMaybeMessage<UpdateDeviceKeysRequest>(nullptr);
  }

  UpdateDeviceKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeviceKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeviceKeysRequest& from);
  void MergeFrom(const UpdateDeviceKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeviceKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.UpdateDeviceKeysRequest";
  }
  protected:
  explicit UpdateDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceKeysFieldNumber = 1,
  };
  // .api.DeviceKeys device_keys = 1;
  bool has_device_keys() const;
  private:
  bool _internal_has_device_keys() const;
  public:
  void clear_device_keys();
  const ::api::DeviceKeys& device_keys() const;
  ::api::DeviceKeys* release_device_keys();
  ::api::DeviceKeys* mutable_device_keys();
  void set_allocated_device_keys(::api::DeviceKeys* device_keys);
  private:
  const ::api::DeviceKeys& _internal_device_keys() const;
  ::api::DeviceKeys* _internal_mutable_device_keys();
  public:
  void unsafe_arena_set_allocated_device_keys(
      ::api::DeviceKeys* device_keys);
  ::api::DeviceKeys* unsafe_arena_release_device_keys();

  // @@protoc_insertion_point(class_scope:api.UpdateDeviceKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::DeviceKeys* device_keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDeviceKeysRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DeleteDeviceKeysRequest) */ {
 public:
  inline DeleteDeviceKeysRequest() : DeleteDeviceKeysRequest(nullptr) {};
  virtual ~DeleteDeviceKeysRequest();

  DeleteDeviceKeysRequest(const DeleteDeviceKeysRequest& from);
  DeleteDeviceKeysRequest(DeleteDeviceKeysRequest&& from) noexcept
    : DeleteDeviceKeysRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDeviceKeysRequest& operator=(const DeleteDeviceKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDeviceKeysRequest& operator=(DeleteDeviceKeysRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDeviceKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDeviceKeysRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDeviceKeysRequest*>(
               &_DeleteDeviceKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteDeviceKeysRequest& a, DeleteDeviceKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDeviceKeysRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDeviceKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDeviceKeysRequest* New() const final {
    return CreateMaybeMessage<DeleteDeviceKeysRequest>(nullptr);
  }

  DeleteDeviceKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDeviceKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDeviceKeysRequest& from);
  void MergeFrom(const DeleteDeviceKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDeviceKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DeleteDeviceKeysRequest";
  }
  protected:
  explicit DeleteDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.DeleteDeviceKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceActivation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DeviceActivation) */ {
 public:
  inline DeviceActivation() : DeviceActivation(nullptr) {};
  virtual ~DeviceActivation();

  DeviceActivation(const DeviceActivation& from);
  DeviceActivation(DeviceActivation&& from) noexcept
    : DeviceActivation() {
    *this = ::std::move(from);
  }

  inline DeviceActivation& operator=(const DeviceActivation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceActivation& operator=(DeviceActivation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceActivation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceActivation* internal_default_instance() {
    return reinterpret_cast<const DeviceActivation*>(
               &_DeviceActivation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeviceActivation& a, DeviceActivation& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceActivation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceActivation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceActivation* New() const final {
    return CreateMaybeMessage<DeviceActivation>(nullptr);
  }

  DeviceActivation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceActivation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceActivation& from);
  void MergeFrom(const DeviceActivation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceActivation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DeviceActivation";
  }
  protected:
  explicit DeviceActivation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
    kDevAddrFieldNumber = 2,
    kAppSKeyFieldNumber = 3,
    kNwkSEncKeyFieldNumber = 4,
    kSNwkSIntKeyFieldNumber = 8,
    kFNwkSIntKeyFieldNumber = 9,
    kFCntUpFieldNumber = 5,
    kNFCntDownFieldNumber = 6,
    kAFCntDownFieldNumber = 10,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // string dev_addr = 2;
  void clear_dev_addr();
  const std::string& dev_addr() const;
  void set_dev_addr(const std::string& value);
  void set_dev_addr(std::string&& value);
  void set_dev_addr(const char* value);
  void set_dev_addr(const char* value, size_t size);
  std::string* mutable_dev_addr();
  std::string* release_dev_addr();
  void set_allocated_dev_addr(std::string* dev_addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_addr(
      std::string* dev_addr);
  private:
  const std::string& _internal_dev_addr() const;
  void _internal_set_dev_addr(const std::string& value);
  std::string* _internal_mutable_dev_addr();
  public:

  // string app_s_key = 3;
  void clear_app_s_key();
  const std::string& app_s_key() const;
  void set_app_s_key(const std::string& value);
  void set_app_s_key(std::string&& value);
  void set_app_s_key(const char* value);
  void set_app_s_key(const char* value, size_t size);
  std::string* mutable_app_s_key();
  std::string* release_app_s_key();
  void set_allocated_app_s_key(std::string* app_s_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_s_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_s_key(
      std::string* app_s_key);
  private:
  const std::string& _internal_app_s_key() const;
  void _internal_set_app_s_key(const std::string& value);
  std::string* _internal_mutable_app_s_key();
  public:

  // string nwk_s_enc_key = 4;
  void clear_nwk_s_enc_key();
  const std::string& nwk_s_enc_key() const;
  void set_nwk_s_enc_key(const std::string& value);
  void set_nwk_s_enc_key(std::string&& value);
  void set_nwk_s_enc_key(const char* value);
  void set_nwk_s_enc_key(const char* value, size_t size);
  std::string* mutable_nwk_s_enc_key();
  std::string* release_nwk_s_enc_key();
  void set_allocated_nwk_s_enc_key(std::string* nwk_s_enc_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nwk_s_enc_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nwk_s_enc_key(
      std::string* nwk_s_enc_key);
  private:
  const std::string& _internal_nwk_s_enc_key() const;
  void _internal_set_nwk_s_enc_key(const std::string& value);
  std::string* _internal_mutable_nwk_s_enc_key();
  public:

  // string s_nwk_s_int_key = 8;
  void clear_s_nwk_s_int_key();
  const std::string& s_nwk_s_int_key() const;
  void set_s_nwk_s_int_key(const std::string& value);
  void set_s_nwk_s_int_key(std::string&& value);
  void set_s_nwk_s_int_key(const char* value);
  void set_s_nwk_s_int_key(const char* value, size_t size);
  std::string* mutable_s_nwk_s_int_key();
  std::string* release_s_nwk_s_int_key();
  void set_allocated_s_nwk_s_int_key(std::string* s_nwk_s_int_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_s_nwk_s_int_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_s_nwk_s_int_key(
      std::string* s_nwk_s_int_key);
  private:
  const std::string& _internal_s_nwk_s_int_key() const;
  void _internal_set_s_nwk_s_int_key(const std::string& value);
  std::string* _internal_mutable_s_nwk_s_int_key();
  public:

  // string f_nwk_s_int_key = 9;
  void clear_f_nwk_s_int_key();
  const std::string& f_nwk_s_int_key() const;
  void set_f_nwk_s_int_key(const std::string& value);
  void set_f_nwk_s_int_key(std::string&& value);
  void set_f_nwk_s_int_key(const char* value);
  void set_f_nwk_s_int_key(const char* value, size_t size);
  std::string* mutable_f_nwk_s_int_key();
  std::string* release_f_nwk_s_int_key();
  void set_allocated_f_nwk_s_int_key(std::string* f_nwk_s_int_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f_nwk_s_int_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f_nwk_s_int_key(
      std::string* f_nwk_s_int_key);
  private:
  const std::string& _internal_f_nwk_s_int_key() const;
  void _internal_set_f_nwk_s_int_key(const std::string& value);
  std::string* _internal_mutable_f_nwk_s_int_key();
  public:

  // uint32 f_cnt_up = 5;
  void clear_f_cnt_up();
  ::PROTOBUF_NAMESPACE_ID::uint32 f_cnt_up() const;
  void set_f_cnt_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f_cnt_up() const;
  void _internal_set_f_cnt_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n_f_cnt_down = 6;
  void clear_n_f_cnt_down();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_f_cnt_down() const;
  void set_n_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_f_cnt_down() const;
  void _internal_set_n_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 a_f_cnt_down = 10;
  void clear_a_f_cnt_down();
  ::PROTOBUF_NAMESPACE_ID::uint32 a_f_cnt_down() const;
  void set_a_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_a_f_cnt_down() const;
  void _internal_set_a_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.DeviceActivation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_s_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nwk_s_enc_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_nwk_s_int_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f_nwk_s_int_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f_cnt_up_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_f_cnt_down_;
  ::PROTOBUF_NAMESPACE_ID::uint32 a_f_cnt_down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ActivateDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ActivateDeviceRequest) */ {
 public:
  inline ActivateDeviceRequest() : ActivateDeviceRequest(nullptr) {};
  virtual ~ActivateDeviceRequest();

  ActivateDeviceRequest(const ActivateDeviceRequest& from);
  ActivateDeviceRequest(ActivateDeviceRequest&& from) noexcept
    : ActivateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline ActivateDeviceRequest& operator=(const ActivateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateDeviceRequest& operator=(ActivateDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivateDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const ActivateDeviceRequest*>(
               &_ActivateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ActivateDeviceRequest& a, ActivateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivateDeviceRequest* New() const final {
    return CreateMaybeMessage<ActivateDeviceRequest>(nullptr);
  }

  ActivateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivateDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivateDeviceRequest& from);
  void MergeFrom(const ActivateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivateDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ActivateDeviceRequest";
  }
  protected:
  explicit ActivateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceActivationFieldNumber = 1,
  };
  // .api.DeviceActivation device_activation = 1;
  bool has_device_activation() const;
  private:
  bool _internal_has_device_activation() const;
  public:
  void clear_device_activation();
  const ::api::DeviceActivation& device_activation() const;
  ::api::DeviceActivation* release_device_activation();
  ::api::DeviceActivation* mutable_device_activation();
  void set_allocated_device_activation(::api::DeviceActivation* device_activation);
  private:
  const ::api::DeviceActivation& _internal_device_activation() const;
  ::api::DeviceActivation* _internal_mutable_device_activation();
  public:
  void unsafe_arena_set_allocated_device_activation(
      ::api::DeviceActivation* device_activation);
  ::api::DeviceActivation* unsafe_arena_release_device_activation();

  // @@protoc_insertion_point(class_scope:api.ActivateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::DeviceActivation* device_activation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeactivateDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DeactivateDeviceRequest) */ {
 public:
  inline DeactivateDeviceRequest() : DeactivateDeviceRequest(nullptr) {};
  virtual ~DeactivateDeviceRequest();

  DeactivateDeviceRequest(const DeactivateDeviceRequest& from);
  DeactivateDeviceRequest(DeactivateDeviceRequest&& from) noexcept
    : DeactivateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline DeactivateDeviceRequest& operator=(const DeactivateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeactivateDeviceRequest& operator=(DeactivateDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeactivateDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeactivateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DeactivateDeviceRequest*>(
               &_DeactivateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DeactivateDeviceRequest& a, DeactivateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeactivateDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeactivateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeactivateDeviceRequest* New() const final {
    return CreateMaybeMessage<DeactivateDeviceRequest>(nullptr);
  }

  DeactivateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeactivateDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeactivateDeviceRequest& from);
  void MergeFrom(const DeactivateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeactivateDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DeactivateDeviceRequest";
  }
  protected:
  explicit DeactivateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.DeactivateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceActivationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceActivationRequest) */ {
 public:
  inline GetDeviceActivationRequest() : GetDeviceActivationRequest(nullptr) {};
  virtual ~GetDeviceActivationRequest();

  GetDeviceActivationRequest(const GetDeviceActivationRequest& from);
  GetDeviceActivationRequest(GetDeviceActivationRequest&& from) noexcept
    : GetDeviceActivationRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceActivationRequest& operator=(const GetDeviceActivationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceActivationRequest& operator=(GetDeviceActivationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceActivationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceActivationRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceActivationRequest*>(
               &_GetDeviceActivationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetDeviceActivationRequest& a, GetDeviceActivationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceActivationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceActivationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceActivationRequest* New() const final {
    return CreateMaybeMessage<GetDeviceActivationRequest>(nullptr);
  }

  GetDeviceActivationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceActivationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceActivationRequest& from);
  void MergeFrom(const GetDeviceActivationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceActivationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceActivationRequest";
  }
  protected:
  explicit GetDeviceActivationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceActivationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceActivationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceActivationResponse) */ {
 public:
  inline GetDeviceActivationResponse() : GetDeviceActivationResponse(nullptr) {};
  virtual ~GetDeviceActivationResponse();

  GetDeviceActivationResponse(const GetDeviceActivationResponse& from);
  GetDeviceActivationResponse(GetDeviceActivationResponse&& from) noexcept
    : GetDeviceActivationResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceActivationResponse& operator=(const GetDeviceActivationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceActivationResponse& operator=(GetDeviceActivationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceActivationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceActivationResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceActivationResponse*>(
               &_GetDeviceActivationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetDeviceActivationResponse& a, GetDeviceActivationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceActivationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceActivationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceActivationResponse* New() const final {
    return CreateMaybeMessage<GetDeviceActivationResponse>(nullptr);
  }

  GetDeviceActivationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceActivationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceActivationResponse& from);
  void MergeFrom(const GetDeviceActivationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceActivationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceActivationResponse";
  }
  protected:
  explicit GetDeviceActivationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceActivationFieldNumber = 1,
    kJoinServerContextFieldNumber = 2,
  };
  // .api.DeviceActivation device_activation = 1;
  bool has_device_activation() const;
  private:
  bool _internal_has_device_activation() const;
  public:
  void clear_device_activation();
  const ::api::DeviceActivation& device_activation() const;
  ::api::DeviceActivation* release_device_activation();
  ::api::DeviceActivation* mutable_device_activation();
  void set_allocated_device_activation(::api::DeviceActivation* device_activation);
  private:
  const ::api::DeviceActivation& _internal_device_activation() const;
  ::api::DeviceActivation* _internal_mutable_device_activation();
  public:
  void unsafe_arena_set_allocated_device_activation(
      ::api::DeviceActivation* device_activation);
  ::api::DeviceActivation* unsafe_arena_release_device_activation();

  // .common.JoinServerContext join_server_context = 2;
  bool has_join_server_context() const;
  private:
  bool _internal_has_join_server_context() const;
  public:
  void clear_join_server_context();
  const ::common::JoinServerContext& join_server_context() const;
  ::common::JoinServerContext* release_join_server_context();
  ::common::JoinServerContext* mutable_join_server_context();
  void set_allocated_join_server_context(::common::JoinServerContext* join_server_context);
  private:
  const ::common::JoinServerContext& _internal_join_server_context() const;
  ::common::JoinServerContext* _internal_mutable_join_server_context();
  public:
  void unsafe_arena_set_allocated_join_server_context(
      ::common::JoinServerContext* join_server_context);
  ::common::JoinServerContext* unsafe_arena_release_join_server_context();

  // @@protoc_insertion_point(class_scope:api.GetDeviceActivationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::DeviceActivation* device_activation_;
  ::common::JoinServerContext* join_server_context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetRandomDevAddrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetRandomDevAddrRequest) */ {
 public:
  inline GetRandomDevAddrRequest() : GetRandomDevAddrRequest(nullptr) {};
  virtual ~GetRandomDevAddrRequest();

  GetRandomDevAddrRequest(const GetRandomDevAddrRequest& from);
  GetRandomDevAddrRequest(GetRandomDevAddrRequest&& from) noexcept
    : GetRandomDevAddrRequest() {
    *this = ::std::move(from);
  }

  inline GetRandomDevAddrRequest& operator=(const GetRandomDevAddrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRandomDevAddrRequest& operator=(GetRandomDevAddrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRandomDevAddrRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRandomDevAddrRequest* internal_default_instance() {
    return reinterpret_cast<const GetRandomDevAddrRequest*>(
               &_GetRandomDevAddrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetRandomDevAddrRequest& a, GetRandomDevAddrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRandomDevAddrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRandomDevAddrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRandomDevAddrRequest* New() const final {
    return CreateMaybeMessage<GetRandomDevAddrRequest>(nullptr);
  }

  GetRandomDevAddrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRandomDevAddrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRandomDevAddrRequest& from);
  void MergeFrom(const GetRandomDevAddrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRandomDevAddrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetRandomDevAddrRequest";
  }
  protected:
  explicit GetRandomDevAddrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.GetRandomDevAddrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetRandomDevAddrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetRandomDevAddrResponse) */ {
 public:
  inline GetRandomDevAddrResponse() : GetRandomDevAddrResponse(nullptr) {};
  virtual ~GetRandomDevAddrResponse();

  GetRandomDevAddrResponse(const GetRandomDevAddrResponse& from);
  GetRandomDevAddrResponse(GetRandomDevAddrResponse&& from) noexcept
    : GetRandomDevAddrResponse() {
    *this = ::std::move(from);
  }

  inline GetRandomDevAddrResponse& operator=(const GetRandomDevAddrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRandomDevAddrResponse& operator=(GetRandomDevAddrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRandomDevAddrResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRandomDevAddrResponse* internal_default_instance() {
    return reinterpret_cast<const GetRandomDevAddrResponse*>(
               &_GetRandomDevAddrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetRandomDevAddrResponse& a, GetRandomDevAddrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRandomDevAddrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRandomDevAddrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRandomDevAddrResponse* New() const final {
    return CreateMaybeMessage<GetRandomDevAddrResponse>(nullptr);
  }

  GetRandomDevAddrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRandomDevAddrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRandomDevAddrResponse& from);
  void MergeFrom(const GetRandomDevAddrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRandomDevAddrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetRandomDevAddrResponse";
  }
  protected:
  explicit GetRandomDevAddrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevAddrFieldNumber = 1,
  };
  // string dev_addr = 1;
  void clear_dev_addr();
  const std::string& dev_addr() const;
  void set_dev_addr(const std::string& value);
  void set_dev_addr(std::string&& value);
  void set_dev_addr(const char* value);
  void set_dev_addr(const char* value, size_t size);
  std::string* mutable_dev_addr();
  std::string* release_dev_addr();
  void set_allocated_dev_addr(std::string* dev_addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_addr(
      std::string* dev_addr);
  private:
  const std::string& _internal_dev_addr() const;
  void _internal_set_dev_addr(const std::string& value);
  std::string* _internal_mutable_dev_addr();
  public:

  // @@protoc_insertion_point(class_scope:api.GetRandomDevAddrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceMetricsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceMetricsRequest) */ {
 public:
  inline GetDeviceMetricsRequest() : GetDeviceMetricsRequest(nullptr) {};
  virtual ~GetDeviceMetricsRequest();

  GetDeviceMetricsRequest(const GetDeviceMetricsRequest& from);
  GetDeviceMetricsRequest(GetDeviceMetricsRequest&& from) noexcept
    : GetDeviceMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceMetricsRequest& operator=(const GetDeviceMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceMetricsRequest& operator=(GetDeviceMetricsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceMetricsRequest*>(
               &_GetDeviceMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetDeviceMetricsRequest& a, GetDeviceMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceMetricsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceMetricsRequest* New() const final {
    return CreateMaybeMessage<GetDeviceMetricsRequest>(nullptr);
  }

  GetDeviceMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceMetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceMetricsRequest& from);
  void MergeFrom(const GetDeviceMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceMetricsRequest";
  }
  protected:
  explicit GetDeviceMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kAggregationFieldNumber = 4,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // .google.protobuf.Timestamp start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      PROTOBUF_NAMESPACE_ID::Timestamp* start);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start();

  // .google.protobuf.Timestamp end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      PROTOBUF_NAMESPACE_ID::Timestamp* end);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end();

  // .common.Aggregation aggregation = 4;
  void clear_aggregation();
  ::common::Aggregation aggregation() const;
  void set_aggregation(::common::Aggregation value);
  private:
  ::common::Aggregation _internal_aggregation() const;
  void _internal_set_aggregation(::common::Aggregation value);
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_;
  int aggregation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceMetricsResponse_MetricsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetDeviceMetricsResponse_MetricsEntry_DoNotUse, 
    std::string, ::common::Metric,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetDeviceMetricsResponse_MetricsEntry_DoNotUse, 
    std::string, ::common::Metric,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetDeviceMetricsResponse_MetricsEntry_DoNotUse();
  GetDeviceMetricsResponse_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetDeviceMetricsResponse_MetricsEntry_DoNotUse& other);
  static const GetDeviceMetricsResponse_MetricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetDeviceMetricsResponse_MetricsEntry_DoNotUse*>(&_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api.GetDeviceMetricsResponse.MetricsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[26];
  }

  public:
};

// -------------------------------------------------------------------

class GetDeviceMetricsResponse_StatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetDeviceMetricsResponse_StatesEntry_DoNotUse, 
    std::string, ::api::DeviceState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetDeviceMetricsResponse_StatesEntry_DoNotUse, 
    std::string, ::api::DeviceState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetDeviceMetricsResponse_StatesEntry_DoNotUse();
  GetDeviceMetricsResponse_StatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetDeviceMetricsResponse_StatesEntry_DoNotUse& other);
  static const GetDeviceMetricsResponse_StatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetDeviceMetricsResponse_StatesEntry_DoNotUse*>(&_GetDeviceMetricsResponse_StatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api.GetDeviceMetricsResponse.StatesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[27];
  }

  public:
};

// -------------------------------------------------------------------

class GetDeviceMetricsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceMetricsResponse) */ {
 public:
  inline GetDeviceMetricsResponse() : GetDeviceMetricsResponse(nullptr) {};
  virtual ~GetDeviceMetricsResponse();

  GetDeviceMetricsResponse(const GetDeviceMetricsResponse& from);
  GetDeviceMetricsResponse(GetDeviceMetricsResponse&& from) noexcept
    : GetDeviceMetricsResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceMetricsResponse& operator=(const GetDeviceMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceMetricsResponse& operator=(GetDeviceMetricsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceMetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceMetricsResponse*>(
               &_GetDeviceMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetDeviceMetricsResponse& a, GetDeviceMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceMetricsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceMetricsResponse* New() const final {
    return CreateMaybeMessage<GetDeviceMetricsResponse>(nullptr);
  }

  GetDeviceMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceMetricsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceMetricsResponse& from);
  void MergeFrom(const GetDeviceMetricsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceMetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceMetricsResponse";
  }
  protected:
  explicit GetDeviceMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
    kStatesFieldNumber = 2,
  };
  // map<string, .common.Metric> metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >&
      _internal_metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >*
      _internal_mutable_metrics();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >&
      metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >*
      mutable_metrics();

  // map<string, .api.DeviceState> states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >&
      _internal_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >*
      _internal_mutable_states();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >&
      states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >*
      mutable_states();

  // @@protoc_insertion_point(class_scope:api.GetDeviceMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetDeviceMetricsResponse_MetricsEntry_DoNotUse,
      std::string, ::common::Metric,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetDeviceMetricsResponse_StatesEntry_DoNotUse,
      std::string, ::api::DeviceState,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > states_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DeviceState) */ {
 public:
  inline DeviceState() : DeviceState(nullptr) {};
  virtual ~DeviceState();

  DeviceState(const DeviceState& from);
  DeviceState(DeviceState&& from) noexcept
    : DeviceState() {
    *this = ::std::move(from);
  }

  inline DeviceState& operator=(const DeviceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceState& operator=(DeviceState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceState* internal_default_instance() {
    return reinterpret_cast<const DeviceState*>(
               &_DeviceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DeviceState& a, DeviceState& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceState* New() const final {
    return CreateMaybeMessage<DeviceState>(nullptr);
  }

  DeviceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceState& from);
  void MergeFrom(const DeviceState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DeviceState";
  }
  protected:
  explicit DeviceState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:api.DeviceState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceLinkMetricsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceLinkMetricsRequest) */ {
 public:
  inline GetDeviceLinkMetricsRequest() : GetDeviceLinkMetricsRequest(nullptr) {};
  virtual ~GetDeviceLinkMetricsRequest();

  GetDeviceLinkMetricsRequest(const GetDeviceLinkMetricsRequest& from);
  GetDeviceLinkMetricsRequest(GetDeviceLinkMetricsRequest&& from) noexcept
    : GetDeviceLinkMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceLinkMetricsRequest& operator=(const GetDeviceLinkMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceLinkMetricsRequest& operator=(GetDeviceLinkMetricsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceLinkMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceLinkMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceLinkMetricsRequest*>(
               &_GetDeviceLinkMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetDeviceLinkMetricsRequest& a, GetDeviceLinkMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceLinkMetricsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceLinkMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceLinkMetricsRequest* New() const final {
    return CreateMaybeMessage<GetDeviceLinkMetricsRequest>(nullptr);
  }

  GetDeviceLinkMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceLinkMetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceLinkMetricsRequest& from);
  void MergeFrom(const GetDeviceLinkMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceLinkMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceLinkMetricsRequest";
  }
  protected:
  explicit GetDeviceLinkMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kAggregationFieldNumber = 4,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // .google.protobuf.Timestamp start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      PROTOBUF_NAMESPACE_ID::Timestamp* start);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start();

  // .google.protobuf.Timestamp end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      PROTOBUF_NAMESPACE_ID::Timestamp* end);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end();

  // .common.Aggregation aggregation = 4;
  void clear_aggregation();
  ::common::Aggregation aggregation() const;
  void set_aggregation(::common::Aggregation value);
  private:
  ::common::Aggregation _internal_aggregation() const;
  void _internal_set_aggregation(::common::Aggregation value);
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceLinkMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_;
  int aggregation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceLinkMetricsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceLinkMetricsResponse) */ {
 public:
  inline GetDeviceLinkMetricsResponse() : GetDeviceLinkMetricsResponse(nullptr) {};
  virtual ~GetDeviceLinkMetricsResponse();

  GetDeviceLinkMetricsResponse(const GetDeviceLinkMetricsResponse& from);
  GetDeviceLinkMetricsResponse(GetDeviceLinkMetricsResponse&& from) noexcept
    : GetDeviceLinkMetricsResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceLinkMetricsResponse& operator=(const GetDeviceLinkMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceLinkMetricsResponse& operator=(GetDeviceLinkMetricsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceLinkMetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceLinkMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceLinkMetricsResponse*>(
               &_GetDeviceLinkMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetDeviceLinkMetricsResponse& a, GetDeviceLinkMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceLinkMetricsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceLinkMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceLinkMetricsResponse* New() const final {
    return CreateMaybeMessage<GetDeviceLinkMetricsResponse>(nullptr);
  }

  GetDeviceLinkMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceLinkMetricsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceLinkMetricsResponse& from);
  void MergeFrom(const GetDeviceLinkMetricsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceLinkMetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceLinkMetricsResponse";
  }
  protected:
  explicit GetDeviceLinkMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRxPacketsFieldNumber = 1,
    kGwRssiFieldNumber = 2,
    kGwSnrFieldNumber = 3,
    kRxPacketsPerFreqFieldNumber = 4,
    kRxPacketsPerDrFieldNumber = 5,
    kErrorsFieldNumber = 6,
  };
  // .common.Metric rx_packets = 1;
  bool has_rx_packets() const;
  private:
  bool _internal_has_rx_packets() const;
  public:
  void clear_rx_packets();
  const ::common::Metric& rx_packets() const;
  ::common::Metric* release_rx_packets();
  ::common::Metric* mutable_rx_packets();
  void set_allocated_rx_packets(::common::Metric* rx_packets);
  private:
  const ::common::Metric& _internal_rx_packets() const;
  ::common::Metric* _internal_mutable_rx_packets();
  public:
  void unsafe_arena_set_allocated_rx_packets(
      ::common::Metric* rx_packets);
  ::common::Metric* unsafe_arena_release_rx_packets();

  // .common.Metric gw_rssi = 2;
  bool has_gw_rssi() const;
  private:
  bool _internal_has_gw_rssi() const;
  public:
  void clear_gw_rssi();
  const ::common::Metric& gw_rssi() const;
  ::common::Metric* release_gw_rssi();
  ::common::Metric* mutable_gw_rssi();
  void set_allocated_gw_rssi(::common::Metric* gw_rssi);
  private:
  const ::common::Metric& _internal_gw_rssi() const;
  ::common::Metric* _internal_mutable_gw_rssi();
  public:
  void unsafe_arena_set_allocated_gw_rssi(
      ::common::Metric* gw_rssi);
  ::common::Metric* unsafe_arena_release_gw_rssi();

  // .common.Metric gw_snr = 3;
  bool has_gw_snr() const;
  private:
  bool _internal_has_gw_snr() const;
  public:
  void clear_gw_snr();
  const ::common::Metric& gw_snr() const;
  ::common::Metric* release_gw_snr();
  ::common::Metric* mutable_gw_snr();
  void set_allocated_gw_snr(::common::Metric* gw_snr);
  private:
  const ::common::Metric& _internal_gw_snr() const;
  ::common::Metric* _internal_mutable_gw_snr();
  public:
  void unsafe_arena_set_allocated_gw_snr(
      ::common::Metric* gw_snr);
  ::common::Metric* unsafe_arena_release_gw_snr();

  // .common.Metric rx_packets_per_freq = 4;
  bool has_rx_packets_per_freq() const;
  private:
  bool _internal_has_rx_packets_per_freq() const;
  public:
  void clear_rx_packets_per_freq();
  const ::common::Metric& rx_packets_per_freq() const;
  ::common::Metric* release_rx_packets_per_freq();
  ::common::Metric* mutable_rx_packets_per_freq();
  void set_allocated_rx_packets_per_freq(::common::Metric* rx_packets_per_freq);
  private:
  const ::common::Metric& _internal_rx_packets_per_freq() const;
  ::common::Metric* _internal_mutable_rx_packets_per_freq();
  public:
  void unsafe_arena_set_allocated_rx_packets_per_freq(
      ::common::Metric* rx_packets_per_freq);
  ::common::Metric* unsafe_arena_release_rx_packets_per_freq();

  // .common.Metric rx_packets_per_dr = 5;
  bool has_rx_packets_per_dr() const;
  private:
  bool _internal_has_rx_packets_per_dr() const;
  public:
  void clear_rx_packets_per_dr();
  const ::common::Metric& rx_packets_per_dr() const;
  ::common::Metric* release_rx_packets_per_dr();
  ::common::Metric* mutable_rx_packets_per_dr();
  void set_allocated_rx_packets_per_dr(::common::Metric* rx_packets_per_dr);
  private:
  const ::common::Metric& _internal_rx_packets_per_dr() const;
  ::common::Metric* _internal_mutable_rx_packets_per_dr();
  public:
  void unsafe_arena_set_allocated_rx_packets_per_dr(
      ::common::Metric* rx_packets_per_dr);
  ::common::Metric* unsafe_arena_release_rx_packets_per_dr();

  // .common.Metric errors = 6;
  bool has_errors() const;
  private:
  bool _internal_has_errors() const;
  public:
  void clear_errors();
  const ::common::Metric& errors() const;
  ::common::Metric* release_errors();
  ::common::Metric* mutable_errors();
  void set_allocated_errors(::common::Metric* errors);
  private:
  const ::common::Metric& _internal_errors() const;
  ::common::Metric* _internal_mutable_errors();
  public:
  void unsafe_arena_set_allocated_errors(
      ::common::Metric* errors);
  ::common::Metric* unsafe_arena_release_errors();

  // @@protoc_insertion_point(class_scope:api.GetDeviceLinkMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::Metric* rx_packets_;
  ::common::Metric* gw_rssi_;
  ::common::Metric* gw_snr_;
  ::common::Metric* rx_packets_per_freq_;
  ::common::Metric* rx_packets_per_dr_;
  ::common::Metric* errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceQueueItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DeviceQueueItem) */ {
 public:
  inline DeviceQueueItem() : DeviceQueueItem(nullptr) {};
  virtual ~DeviceQueueItem();

  DeviceQueueItem(const DeviceQueueItem& from);
  DeviceQueueItem(DeviceQueueItem&& from) noexcept
    : DeviceQueueItem() {
    *this = ::std::move(from);
  }

  inline DeviceQueueItem& operator=(const DeviceQueueItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceQueueItem& operator=(DeviceQueueItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceQueueItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceQueueItem* internal_default_instance() {
    return reinterpret_cast<const DeviceQueueItem*>(
               &_DeviceQueueItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeviceQueueItem& a, DeviceQueueItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceQueueItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceQueueItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceQueueItem* New() const final {
    return CreateMaybeMessage<DeviceQueueItem>(nullptr);
  }

  DeviceQueueItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceQueueItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceQueueItem& from);
  void MergeFrom(const DeviceQueueItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceQueueItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DeviceQueueItem";
  }
  protected:
  explicit DeviceQueueItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDevEuiFieldNumber = 2,
    kDataFieldNumber = 5,
    kObjectFieldNumber = 6,
    kFPortFieldNumber = 4,
    kConfirmedFieldNumber = 3,
    kIsPendingFieldNumber = 7,
    kIsEncryptedFieldNumber = 9,
    kFCntDownFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string dev_eui = 2;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .google.protobuf.Struct object = 6;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const PROTOBUF_NAMESPACE_ID::Struct& object() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_object();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_object();
  void set_allocated_object(PROTOBUF_NAMESPACE_ID::Struct* object);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_object() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      PROTOBUF_NAMESPACE_ID::Struct* object);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_object();

  // uint32 f_port = 4;
  void clear_f_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 f_port() const;
  void set_f_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f_port() const;
  void _internal_set_f_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool confirmed = 3;
  void clear_confirmed();
  bool confirmed() const;
  void set_confirmed(bool value);
  private:
  bool _internal_confirmed() const;
  void _internal_set_confirmed(bool value);
  public:

  // bool is_pending = 7;
  void clear_is_pending();
  bool is_pending() const;
  void set_is_pending(bool value);
  private:
  bool _internal_is_pending() const;
  void _internal_set_is_pending(bool value);
  public:

  // bool is_encrypted = 9;
  void clear_is_encrypted();
  bool is_encrypted() const;
  void set_is_encrypted(bool value);
  private:
  bool _internal_is_encrypted() const;
  void _internal_set_is_encrypted(bool value);
  public:

  // uint32 f_cnt_down = 8;
  void clear_f_cnt_down();
  ::PROTOBUF_NAMESPACE_ID::uint32 f_cnt_down() const;
  void set_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f_cnt_down() const;
  void _internal_set_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.DeviceQueueItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  PROTOBUF_NAMESPACE_ID::Struct* object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f_port_;
  bool confirmed_;
  bool is_pending_;
  bool is_encrypted_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f_cnt_down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class EnqueueDeviceQueueItemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.EnqueueDeviceQueueItemRequest) */ {
 public:
  inline EnqueueDeviceQueueItemRequest() : EnqueueDeviceQueueItemRequest(nullptr) {};
  virtual ~EnqueueDeviceQueueItemRequest();

  EnqueueDeviceQueueItemRequest(const EnqueueDeviceQueueItemRequest& from);
  EnqueueDeviceQueueItemRequest(EnqueueDeviceQueueItemRequest&& from) noexcept
    : EnqueueDeviceQueueItemRequest() {
    *this = ::std::move(from);
  }

  inline EnqueueDeviceQueueItemRequest& operator=(const EnqueueDeviceQueueItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnqueueDeviceQueueItemRequest& operator=(EnqueueDeviceQueueItemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnqueueDeviceQueueItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnqueueDeviceQueueItemRequest* internal_default_instance() {
    return reinterpret_cast<const EnqueueDeviceQueueItemRequest*>(
               &_EnqueueDeviceQueueItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(EnqueueDeviceQueueItemRequest& a, EnqueueDeviceQueueItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnqueueDeviceQueueItemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnqueueDeviceQueueItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnqueueDeviceQueueItemRequest* New() const final {
    return CreateMaybeMessage<EnqueueDeviceQueueItemRequest>(nullptr);
  }

  EnqueueDeviceQueueItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnqueueDeviceQueueItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnqueueDeviceQueueItemRequest& from);
  void MergeFrom(const EnqueueDeviceQueueItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnqueueDeviceQueueItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.EnqueueDeviceQueueItemRequest";
  }
  protected:
  explicit EnqueueDeviceQueueItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueItemFieldNumber = 1,
  };
  // .api.DeviceQueueItem queue_item = 1;
  bool has_queue_item() const;
  private:
  bool _internal_has_queue_item() const;
  public:
  void clear_queue_item();
  const ::api::DeviceQueueItem& queue_item() const;
  ::api::DeviceQueueItem* release_queue_item();
  ::api::DeviceQueueItem* mutable_queue_item();
  void set_allocated_queue_item(::api::DeviceQueueItem* queue_item);
  private:
  const ::api::DeviceQueueItem& _internal_queue_item() const;
  ::api::DeviceQueueItem* _internal_mutable_queue_item();
  public:
  void unsafe_arena_set_allocated_queue_item(
      ::api::DeviceQueueItem* queue_item);
  ::api::DeviceQueueItem* unsafe_arena_release_queue_item();

  // @@protoc_insertion_point(class_scope:api.EnqueueDeviceQueueItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::DeviceQueueItem* queue_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class EnqueueDeviceQueueItemResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.EnqueueDeviceQueueItemResponse) */ {
 public:
  inline EnqueueDeviceQueueItemResponse() : EnqueueDeviceQueueItemResponse(nullptr) {};
  virtual ~EnqueueDeviceQueueItemResponse();

  EnqueueDeviceQueueItemResponse(const EnqueueDeviceQueueItemResponse& from);
  EnqueueDeviceQueueItemResponse(EnqueueDeviceQueueItemResponse&& from) noexcept
    : EnqueueDeviceQueueItemResponse() {
    *this = ::std::move(from);
  }

  inline EnqueueDeviceQueueItemResponse& operator=(const EnqueueDeviceQueueItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnqueueDeviceQueueItemResponse& operator=(EnqueueDeviceQueueItemResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnqueueDeviceQueueItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnqueueDeviceQueueItemResponse* internal_default_instance() {
    return reinterpret_cast<const EnqueueDeviceQueueItemResponse*>(
               &_EnqueueDeviceQueueItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(EnqueueDeviceQueueItemResponse& a, EnqueueDeviceQueueItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EnqueueDeviceQueueItemResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnqueueDeviceQueueItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnqueueDeviceQueueItemResponse* New() const final {
    return CreateMaybeMessage<EnqueueDeviceQueueItemResponse>(nullptr);
  }

  EnqueueDeviceQueueItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnqueueDeviceQueueItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnqueueDeviceQueueItemResponse& from);
  void MergeFrom(const EnqueueDeviceQueueItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnqueueDeviceQueueItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.EnqueueDeviceQueueItemResponse";
  }
  protected:
  explicit EnqueueDeviceQueueItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.EnqueueDeviceQueueItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class FlushDeviceQueueRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.FlushDeviceQueueRequest) */ {
 public:
  inline FlushDeviceQueueRequest() : FlushDeviceQueueRequest(nullptr) {};
  virtual ~FlushDeviceQueueRequest();

  FlushDeviceQueueRequest(const FlushDeviceQueueRequest& from);
  FlushDeviceQueueRequest(FlushDeviceQueueRequest&& from) noexcept
    : FlushDeviceQueueRequest() {
    *this = ::std::move(from);
  }

  inline FlushDeviceQueueRequest& operator=(const FlushDeviceQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushDeviceQueueRequest& operator=(FlushDeviceQueueRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlushDeviceQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushDeviceQueueRequest* internal_default_instance() {
    return reinterpret_cast<const FlushDeviceQueueRequest*>(
               &_FlushDeviceQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(FlushDeviceQueueRequest& a, FlushDeviceQueueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushDeviceQueueRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushDeviceQueueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushDeviceQueueRequest* New() const final {
    return CreateMaybeMessage<FlushDeviceQueueRequest>(nullptr);
  }

  FlushDeviceQueueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushDeviceQueueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlushDeviceQueueRequest& from);
  void MergeFrom(const FlushDeviceQueueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushDeviceQueueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.FlushDeviceQueueRequest";
  }
  protected:
  explicit FlushDeviceQueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.FlushDeviceQueueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceQueueItemsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceQueueItemsRequest) */ {
 public:
  inline GetDeviceQueueItemsRequest() : GetDeviceQueueItemsRequest(nullptr) {};
  virtual ~GetDeviceQueueItemsRequest();

  GetDeviceQueueItemsRequest(const GetDeviceQueueItemsRequest& from);
  GetDeviceQueueItemsRequest(GetDeviceQueueItemsRequest&& from) noexcept
    : GetDeviceQueueItemsRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceQueueItemsRequest& operator=(const GetDeviceQueueItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceQueueItemsRequest& operator=(GetDeviceQueueItemsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceQueueItemsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceQueueItemsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceQueueItemsRequest*>(
               &_GetDeviceQueueItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetDeviceQueueItemsRequest& a, GetDeviceQueueItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceQueueItemsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceQueueItemsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceQueueItemsRequest* New() const final {
    return CreateMaybeMessage<GetDeviceQueueItemsRequest>(nullptr);
  }

  GetDeviceQueueItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceQueueItemsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceQueueItemsRequest& from);
  void MergeFrom(const GetDeviceQueueItemsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceQueueItemsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceQueueItemsRequest";
  }
  protected:
  explicit GetDeviceQueueItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
    kCountOnlyFieldNumber = 2,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // bool count_only = 2;
  void clear_count_only();
  bool count_only() const;
  void set_count_only(bool value);
  private:
  bool _internal_count_only() const;
  void _internal_set_count_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceQueueItemsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  bool count_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceQueueItemsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceQueueItemsResponse) */ {
 public:
  inline GetDeviceQueueItemsResponse() : GetDeviceQueueItemsResponse(nullptr) {};
  virtual ~GetDeviceQueueItemsResponse();

  GetDeviceQueueItemsResponse(const GetDeviceQueueItemsResponse& from);
  GetDeviceQueueItemsResponse(GetDeviceQueueItemsResponse&& from) noexcept
    : GetDeviceQueueItemsResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceQueueItemsResponse& operator=(const GetDeviceQueueItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceQueueItemsResponse& operator=(GetDeviceQueueItemsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceQueueItemsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceQueueItemsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceQueueItemsResponse*>(
               &_GetDeviceQueueItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetDeviceQueueItemsResponse& a, GetDeviceQueueItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceQueueItemsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceQueueItemsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceQueueItemsResponse* New() const final {
    return CreateMaybeMessage<GetDeviceQueueItemsResponse>(nullptr);
  }

  GetDeviceQueueItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceQueueItemsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceQueueItemsResponse& from);
  void MergeFrom(const GetDeviceQueueItemsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceQueueItemsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceQueueItemsResponse";
  }
  protected:
  explicit GetDeviceQueueItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .api.DeviceQueueItem result = 2;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::api::DeviceQueueItem* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceQueueItem >*
      mutable_result();
  private:
  const ::api::DeviceQueueItem& _internal_result(int index) const;
  ::api::DeviceQueueItem* _internal_add_result();
  public:
  const ::api::DeviceQueueItem& result(int index) const;
  ::api::DeviceQueueItem* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceQueueItem >&
      result() const;

  // uint32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceQueueItemsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceQueueItem > result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class FlushDevNoncesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.FlushDevNoncesRequest) */ {
 public:
  inline FlushDevNoncesRequest() : FlushDevNoncesRequest(nullptr) {};
  virtual ~FlushDevNoncesRequest();

  FlushDevNoncesRequest(const FlushDevNoncesRequest& from);
  FlushDevNoncesRequest(FlushDevNoncesRequest&& from) noexcept
    : FlushDevNoncesRequest() {
    *this = ::std::move(from);
  }

  inline FlushDevNoncesRequest& operator=(const FlushDevNoncesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushDevNoncesRequest& operator=(FlushDevNoncesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlushDevNoncesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushDevNoncesRequest* internal_default_instance() {
    return reinterpret_cast<const FlushDevNoncesRequest*>(
               &_FlushDevNoncesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(FlushDevNoncesRequest& a, FlushDevNoncesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushDevNoncesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushDevNoncesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushDevNoncesRequest* New() const final {
    return CreateMaybeMessage<FlushDevNoncesRequest>(nullptr);
  }

  FlushDevNoncesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushDevNoncesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlushDevNoncesRequest& from);
  void MergeFrom(const FlushDevNoncesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushDevNoncesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.FlushDevNoncesRequest";
  }
  protected:
  explicit FlushDevNoncesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.FlushDevNoncesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceNextFCntDownRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceNextFCntDownRequest) */ {
 public:
  inline GetDeviceNextFCntDownRequest() : GetDeviceNextFCntDownRequest(nullptr) {};
  virtual ~GetDeviceNextFCntDownRequest();

  GetDeviceNextFCntDownRequest(const GetDeviceNextFCntDownRequest& from);
  GetDeviceNextFCntDownRequest(GetDeviceNextFCntDownRequest&& from) noexcept
    : GetDeviceNextFCntDownRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceNextFCntDownRequest& operator=(const GetDeviceNextFCntDownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceNextFCntDownRequest& operator=(GetDeviceNextFCntDownRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceNextFCntDownRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceNextFCntDownRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceNextFCntDownRequest*>(
               &_GetDeviceNextFCntDownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetDeviceNextFCntDownRequest& a, GetDeviceNextFCntDownRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceNextFCntDownRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceNextFCntDownRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceNextFCntDownRequest* New() const final {
    return CreateMaybeMessage<GetDeviceNextFCntDownRequest>(nullptr);
  }

  GetDeviceNextFCntDownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceNextFCntDownRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceNextFCntDownRequest& from);
  void MergeFrom(const GetDeviceNextFCntDownRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceNextFCntDownRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceNextFCntDownRequest";
  }
  protected:
  explicit GetDeviceNextFCntDownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevEuiFieldNumber = 1,
  };
  // string dev_eui = 1;
  void clear_dev_eui();
  const std::string& dev_eui() const;
  void set_dev_eui(const std::string& value);
  void set_dev_eui(std::string&& value);
  void set_dev_eui(const char* value);
  void set_dev_eui(const char* value, size_t size);
  std::string* mutable_dev_eui();
  std::string* release_dev_eui();
  void set_allocated_dev_eui(std::string* dev_eui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dev_eui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dev_eui(
      std::string* dev_eui);
  private:
  const std::string& _internal_dev_eui() const;
  void _internal_set_dev_eui(const std::string& value);
  std::string* _internal_mutable_dev_eui();
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceNextFCntDownRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_eui_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceNextFCntDownResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetDeviceNextFCntDownResponse) */ {
 public:
  inline GetDeviceNextFCntDownResponse() : GetDeviceNextFCntDownResponse(nullptr) {};
  virtual ~GetDeviceNextFCntDownResponse();

  GetDeviceNextFCntDownResponse(const GetDeviceNextFCntDownResponse& from);
  GetDeviceNextFCntDownResponse(GetDeviceNextFCntDownResponse&& from) noexcept
    : GetDeviceNextFCntDownResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceNextFCntDownResponse& operator=(const GetDeviceNextFCntDownResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceNextFCntDownResponse& operator=(GetDeviceNextFCntDownResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceNextFCntDownResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceNextFCntDownResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceNextFCntDownResponse*>(
               &_GetDeviceNextFCntDownResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetDeviceNextFCntDownResponse& a, GetDeviceNextFCntDownResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceNextFCntDownResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceNextFCntDownResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceNextFCntDownResponse* New() const final {
    return CreateMaybeMessage<GetDeviceNextFCntDownResponse>(nullptr);
  }

  GetDeviceNextFCntDownResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceNextFCntDownResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceNextFCntDownResponse& from);
  void MergeFrom(const GetDeviceNextFCntDownResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceNextFCntDownResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetDeviceNextFCntDownResponse";
  }
  protected:
  explicit GetDeviceNextFCntDownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2fdevice_2eproto);
    return ::descriptor_table_api_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFCntDownFieldNumber = 1,
  };
  // uint32 f_cnt_down = 1;
  void clear_f_cnt_down();
  ::PROTOBUF_NAMESPACE_ID::uint32 f_cnt_down() const;
  void set_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f_cnt_down() const;
  void _internal_set_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.GetDeviceNextFCntDownResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f_cnt_down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2fdevice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Device

// string dev_eui = 1;
inline void Device::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Device::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.Device.dev_eui)
  return _internal_dev_eui();
}
inline void Device::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.Device.dev_eui)
}
inline std::string* Device::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.Device.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& Device::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void Device::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Device::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Device.dev_eui)
}
inline void Device::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Device.dev_eui)
}
inline void Device::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Device.dev_eui)
}
inline std::string* Device::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Device::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.Device.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Device.dev_eui)
}
inline std::string* Device::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Device.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Device::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Device.dev_eui)
}

// string name = 2;
inline void Device::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:api.Device.name)
  return _internal_name();
}
inline void Device::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:api.Device.name)
}
inline std::string* Device::mutable_name() {
  // @@protoc_insertion_point(field_mutable:api.Device.name)
  return _internal_mutable_name();
}
inline const std::string& Device::_internal_name() const {
  return name_.Get();
}
inline void Device::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Device::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Device.name)
}
inline void Device::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Device.name)
}
inline void Device::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Device.name)
}
inline std::string* Device::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:api.Device.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Device.name)
}
inline std::string* Device::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Device.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Device::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Device.name)
}

// string description = 3;
inline void Device::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Device::description() const {
  // @@protoc_insertion_point(field_get:api.Device.description)
  return _internal_description();
}
inline void Device::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:api.Device.description)
}
inline std::string* Device::mutable_description() {
  // @@protoc_insertion_point(field_mutable:api.Device.description)
  return _internal_mutable_description();
}
inline const std::string& Device::_internal_description() const {
  return description_.Get();
}
inline void Device::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Device::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Device.description)
}
inline void Device::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Device.description)
}
inline void Device::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Device.description)
}
inline std::string* Device::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Device::release_description() {
  // @@protoc_insertion_point(field_release:api.Device.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Device.description)
}
inline std::string* Device::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Device.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Device::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Device.description)
}

// string application_id = 4;
inline void Device::clear_application_id() {
  application_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Device::application_id() const {
  // @@protoc_insertion_point(field_get:api.Device.application_id)
  return _internal_application_id();
}
inline void Device::set_application_id(const std::string& value) {
  _internal_set_application_id(value);
  // @@protoc_insertion_point(field_set:api.Device.application_id)
}
inline std::string* Device::mutable_application_id() {
  // @@protoc_insertion_point(field_mutable:api.Device.application_id)
  return _internal_mutable_application_id();
}
inline const std::string& Device::_internal_application_id() const {
  return application_id_.Get();
}
inline void Device::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Device::set_application_id(std::string&& value) {
  
  application_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Device.application_id)
}
inline void Device::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Device.application_id)
}
inline void Device::set_application_id(const char* value,
    size_t size) {
  
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Device.application_id)
}
inline std::string* Device::_internal_mutable_application_id() {
  
  return application_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Device::release_application_id() {
  // @@protoc_insertion_point(field_release:api.Device.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Device.application_id)
}
inline std::string* Device::unsafe_arena_release_application_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Device.application_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return application_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Device::unsafe_arena_set_allocated_application_id(
    std::string* application_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      application_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Device.application_id)
}

// string device_profile_id = 5;
inline void Device::clear_device_profile_id() {
  device_profile_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Device::device_profile_id() const {
  // @@protoc_insertion_point(field_get:api.Device.device_profile_id)
  return _internal_device_profile_id();
}
inline void Device::set_device_profile_id(const std::string& value) {
  _internal_set_device_profile_id(value);
  // @@protoc_insertion_point(field_set:api.Device.device_profile_id)
}
inline std::string* Device::mutable_device_profile_id() {
  // @@protoc_insertion_point(field_mutable:api.Device.device_profile_id)
  return _internal_mutable_device_profile_id();
}
inline const std::string& Device::_internal_device_profile_id() const {
  return device_profile_id_.Get();
}
inline void Device::_internal_set_device_profile_id(const std::string& value) {
  
  device_profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Device::set_device_profile_id(std::string&& value) {
  
  device_profile_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Device.device_profile_id)
}
inline void Device::set_device_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Device.device_profile_id)
}
inline void Device::set_device_profile_id(const char* value,
    size_t size) {
  
  device_profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Device.device_profile_id)
}
inline std::string* Device::_internal_mutable_device_profile_id() {
  
  return device_profile_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Device::release_device_profile_id() {
  // @@protoc_insertion_point(field_release:api.Device.device_profile_id)
  return device_profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_device_profile_id(std::string* device_profile_id) {
  if (device_profile_id != nullptr) {
    
  } else {
    
  }
  device_profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Device.device_profile_id)
}
inline std::string* Device::unsafe_arena_release_device_profile_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Device.device_profile_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_profile_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Device::unsafe_arena_set_allocated_device_profile_id(
    std::string* device_profile_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_profile_id != nullptr) {
    
  } else {
    
  }
  device_profile_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_profile_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Device.device_profile_id)
}

// bool skip_fcnt_check = 6;
inline void Device::clear_skip_fcnt_check() {
  skip_fcnt_check_ = false;
}
inline bool Device::_internal_skip_fcnt_check() const {
  return skip_fcnt_check_;
}
inline bool Device::skip_fcnt_check() const {
  // @@protoc_insertion_point(field_get:api.Device.skip_fcnt_check)
  return _internal_skip_fcnt_check();
}
inline void Device::_internal_set_skip_fcnt_check(bool value) {
  
  skip_fcnt_check_ = value;
}
inline void Device::set_skip_fcnt_check(bool value) {
  _internal_set_skip_fcnt_check(value);
  // @@protoc_insertion_point(field_set:api.Device.skip_fcnt_check)
}

// bool is_disabled = 7;
inline void Device::clear_is_disabled() {
  is_disabled_ = false;
}
inline bool Device::_internal_is_disabled() const {
  return is_disabled_;
}
inline bool Device::is_disabled() const {
  // @@protoc_insertion_point(field_get:api.Device.is_disabled)
  return _internal_is_disabled();
}
inline void Device::_internal_set_is_disabled(bool value) {
  
  is_disabled_ = value;
}
inline void Device::set_is_disabled(bool value) {
  _internal_set_is_disabled(value);
  // @@protoc_insertion_point(field_set:api.Device.is_disabled)
}

// map<string, string> variables = 8;
inline int Device::_internal_variables_size() const {
  return variables_.size();
}
inline int Device::variables_size() const {
  return _internal_variables_size();
}
inline void Device::clear_variables() {
  variables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Device::_internal_variables() const {
  return variables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Device::variables() const {
  // @@protoc_insertion_point(field_map:api.Device.variables)
  return _internal_variables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Device::_internal_mutable_variables() {
  return variables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Device::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_map:api.Device.variables)
  return _internal_mutable_variables();
}

// map<string, string> tags = 9;
inline int Device::_internal_tags_size() const {
  return tags_.size();
}
inline int Device::tags_size() const {
  return _internal_tags_size();
}
inline void Device::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Device::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Device::tags() const {
  // @@protoc_insertion_point(field_map:api.Device.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Device::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Device::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:api.Device.tags)
  return _internal_mutable_tags();
}

// string join_eui = 10;
inline void Device::clear_join_eui() {
  join_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Device::join_eui() const {
  // @@protoc_insertion_point(field_get:api.Device.join_eui)
  return _internal_join_eui();
}
inline void Device::set_join_eui(const std::string& value) {
  _internal_set_join_eui(value);
  // @@protoc_insertion_point(field_set:api.Device.join_eui)
}
inline std::string* Device::mutable_join_eui() {
  // @@protoc_insertion_point(field_mutable:api.Device.join_eui)
  return _internal_mutable_join_eui();
}
inline const std::string& Device::_internal_join_eui() const {
  return join_eui_.Get();
}
inline void Device::_internal_set_join_eui(const std::string& value) {
  
  join_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Device::set_join_eui(std::string&& value) {
  
  join_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Device.join_eui)
}
inline void Device::set_join_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  join_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Device.join_eui)
}
inline void Device::set_join_eui(const char* value,
    size_t size) {
  
  join_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Device.join_eui)
}
inline std::string* Device::_internal_mutable_join_eui() {
  
  return join_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Device::release_join_eui() {
  // @@protoc_insertion_point(field_release:api.Device.join_eui)
  return join_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_join_eui(std::string* join_eui) {
  if (join_eui != nullptr) {
    
  } else {
    
  }
  join_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), join_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Device.join_eui)
}
inline std::string* Device::unsafe_arena_release_join_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Device.join_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return join_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Device::unsafe_arena_set_allocated_join_eui(
    std::string* join_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (join_eui != nullptr) {
    
  } else {
    
  }
  join_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      join_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Device.join_eui)
}

// -------------------------------------------------------------------

// DeviceStatus

// int32 margin = 1;
inline void DeviceStatus::clear_margin() {
  margin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceStatus::_internal_margin() const {
  return margin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceStatus::margin() const {
  // @@protoc_insertion_point(field_get:api.DeviceStatus.margin)
  return _internal_margin();
}
inline void DeviceStatus::_internal_set_margin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  margin_ = value;
}
inline void DeviceStatus::set_margin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:api.DeviceStatus.margin)
}

// bool external_power_source = 2;
inline void DeviceStatus::clear_external_power_source() {
  external_power_source_ = false;
}
inline bool DeviceStatus::_internal_external_power_source() const {
  return external_power_source_;
}
inline bool DeviceStatus::external_power_source() const {
  // @@protoc_insertion_point(field_get:api.DeviceStatus.external_power_source)
  return _internal_external_power_source();
}
inline void DeviceStatus::_internal_set_external_power_source(bool value) {
  
  external_power_source_ = value;
}
inline void DeviceStatus::set_external_power_source(bool value) {
  _internal_set_external_power_source(value);
  // @@protoc_insertion_point(field_set:api.DeviceStatus.external_power_source)
}

// float battery_level = 3;
inline void DeviceStatus::clear_battery_level() {
  battery_level_ = 0;
}
inline float DeviceStatus::_internal_battery_level() const {
  return battery_level_;
}
inline float DeviceStatus::battery_level() const {
  // @@protoc_insertion_point(field_get:api.DeviceStatus.battery_level)
  return _internal_battery_level();
}
inline void DeviceStatus::_internal_set_battery_level(float value) {
  
  battery_level_ = value;
}
inline void DeviceStatus::set_battery_level(float value) {
  _internal_set_battery_level(value);
  // @@protoc_insertion_point(field_set:api.DeviceStatus.battery_level)
}

// -------------------------------------------------------------------

// DeviceListItem

// string dev_eui = 1;
inline void DeviceListItem::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceListItem::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.DeviceListItem.dev_eui)
  return _internal_dev_eui();
}
inline void DeviceListItem::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.DeviceListItem.dev_eui)
}
inline std::string* DeviceListItem::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.DeviceListItem.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& DeviceListItem::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void DeviceListItem::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceListItem::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceListItem.dev_eui)
}
inline void DeviceListItem::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceListItem.dev_eui)
}
inline void DeviceListItem::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceListItem.dev_eui)
}
inline std::string* DeviceListItem::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceListItem::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.DeviceListItem.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceListItem::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceListItem.dev_eui)
}
inline std::string* DeviceListItem::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceListItem.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceListItem::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceListItem.dev_eui)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool DeviceListItem::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool DeviceListItem::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceListItem::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceListItem::created_at() const {
  // @@protoc_insertion_point(field_get:api.DeviceListItem.created_at)
  return _internal_created_at();
}
inline void DeviceListItem::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceListItem.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::release_created_at() {
  auto temp = unsafe_arena_release_created_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:api.DeviceListItem.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:api.DeviceListItem.created_at)
  return _internal_mutable_created_at();
}
inline void DeviceListItem::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:api.DeviceListItem.created_at)
}

// .google.protobuf.Timestamp updated_at = 3;
inline bool DeviceListItem::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool DeviceListItem::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceListItem::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceListItem::updated_at() const {
  // @@protoc_insertion_point(field_get:api.DeviceListItem.updated_at)
  return _internal_updated_at();
}
inline void DeviceListItem::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceListItem.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::release_updated_at() {
  auto temp = unsafe_arena_release_updated_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:api.DeviceListItem.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:api.DeviceListItem.updated_at)
  return _internal_mutable_updated_at();
}
inline void DeviceListItem::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:api.DeviceListItem.updated_at)
}

// .google.protobuf.Timestamp last_seen_at = 4;
inline bool DeviceListItem::_internal_has_last_seen_at() const {
  return this != internal_default_instance() && last_seen_at_ != nullptr;
}
inline bool DeviceListItem::has_last_seen_at() const {
  return _internal_has_last_seen_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceListItem::_internal_last_seen_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_seen_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DeviceListItem::last_seen_at() const {
  // @@protoc_insertion_point(field_get:api.DeviceListItem.last_seen_at)
  return _internal_last_seen_at();
}
inline void DeviceListItem::unsafe_arena_set_allocated_last_seen_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_seen_at_);
  }
  last_seen_at_ = last_seen_at;
  if (last_seen_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceListItem.last_seen_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::release_last_seen_at() {
  auto temp = unsafe_arena_release_last_seen_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::unsafe_arena_release_last_seen_at() {
  // @@protoc_insertion_point(field_release:api.DeviceListItem.last_seen_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_seen_at_;
  last_seen_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::_internal_mutable_last_seen_at() {
  
  if (last_seen_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    last_seen_at_ = p;
  }
  return last_seen_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DeviceListItem::mutable_last_seen_at() {
  // @@protoc_insertion_point(field_mutable:api.DeviceListItem.last_seen_at)
  return _internal_mutable_last_seen_at();
}
inline void DeviceListItem::set_allocated_last_seen_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_seen_at_);
  }
  if (last_seen_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_seen_at)->GetArena();
    if (message_arena != submessage_arena) {
      last_seen_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_seen_at, submessage_arena);
    }
    
  } else {
    
  }
  last_seen_at_ = last_seen_at;
  // @@protoc_insertion_point(field_set_allocated:api.DeviceListItem.last_seen_at)
}

// string name = 5;
inline void DeviceListItem::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceListItem::name() const {
  // @@protoc_insertion_point(field_get:api.DeviceListItem.name)
  return _internal_name();
}
inline void DeviceListItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:api.DeviceListItem.name)
}
inline std::string* DeviceListItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:api.DeviceListItem.name)
  return _internal_mutable_name();
}
inline const std::string& DeviceListItem::_internal_name() const {
  return name_.Get();
}
inline void DeviceListItem::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceListItem::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceListItem.name)
}
inline void DeviceListItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceListItem.name)
}
inline void DeviceListItem::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceListItem.name)
}
inline std::string* DeviceListItem::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceListItem::release_name() {
  // @@protoc_insertion_point(field_release:api.DeviceListItem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceListItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceListItem.name)
}
inline std::string* DeviceListItem::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceListItem.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceListItem::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceListItem.name)
}

// string description = 6;
inline void DeviceListItem::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceListItem::description() const {
  // @@protoc_insertion_point(field_get:api.DeviceListItem.description)
  return _internal_description();
}
inline void DeviceListItem::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:api.DeviceListItem.description)
}
inline std::string* DeviceListItem::mutable_description() {
  // @@protoc_insertion_point(field_mutable:api.DeviceListItem.description)
  return _internal_mutable_description();
}
inline const std::string& DeviceListItem::_internal_description() const {
  return description_.Get();
}
inline void DeviceListItem::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceListItem::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceListItem.description)
}
inline void DeviceListItem::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceListItem.description)
}
inline void DeviceListItem::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceListItem.description)
}
inline std::string* DeviceListItem::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceListItem::release_description() {
  // @@protoc_insertion_point(field_release:api.DeviceListItem.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceListItem::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceListItem.description)
}
inline std::string* DeviceListItem::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceListItem.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceListItem::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceListItem.description)
}

// string device_profile_id = 7;
inline void DeviceListItem::clear_device_profile_id() {
  device_profile_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceListItem::device_profile_id() const {
  // @@protoc_insertion_point(field_get:api.DeviceListItem.device_profile_id)
  return _internal_device_profile_id();
}
inline void DeviceListItem::set_device_profile_id(const std::string& value) {
  _internal_set_device_profile_id(value);
  // @@protoc_insertion_point(field_set:api.DeviceListItem.device_profile_id)
}
inline std::string* DeviceListItem::mutable_device_profile_id() {
  // @@protoc_insertion_point(field_mutable:api.DeviceListItem.device_profile_id)
  return _internal_mutable_device_profile_id();
}
inline const std::string& DeviceListItem::_internal_device_profile_id() const {
  return device_profile_id_.Get();
}
inline void DeviceListItem::_internal_set_device_profile_id(const std::string& value) {
  
  device_profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceListItem::set_device_profile_id(std::string&& value) {
  
  device_profile_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceListItem.device_profile_id)
}
inline void DeviceListItem::set_device_profile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceListItem.device_profile_id)
}
inline void DeviceListItem::set_device_profile_id(const char* value,
    size_t size) {
  
  device_profile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceListItem.device_profile_id)
}
inline std::string* DeviceListItem::_internal_mutable_device_profile_id() {
  
  return device_profile_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceListItem::release_device_profile_id() {
  // @@protoc_insertion_point(field_release:api.DeviceListItem.device_profile_id)
  return device_profile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceListItem::set_allocated_device_profile_id(std::string* device_profile_id) {
  if (device_profile_id != nullptr) {
    
  } else {
    
  }
  device_profile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_profile_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceListItem.device_profile_id)
}
inline std::string* DeviceListItem::unsafe_arena_release_device_profile_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceListItem.device_profile_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_profile_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceListItem::unsafe_arena_set_allocated_device_profile_id(
    std::string* device_profile_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_profile_id != nullptr) {
    
  } else {
    
  }
  device_profile_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_profile_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceListItem.device_profile_id)
}

// string device_profile_name = 8;
inline void DeviceListItem::clear_device_profile_name() {
  device_profile_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceListItem::device_profile_name() const {
  // @@protoc_insertion_point(field_get:api.DeviceListItem.device_profile_name)
  return _internal_device_profile_name();
}
inline void DeviceListItem::set_device_profile_name(const std::string& value) {
  _internal_set_device_profile_name(value);
  // @@protoc_insertion_point(field_set:api.DeviceListItem.device_profile_name)
}
inline std::string* DeviceListItem::mutable_device_profile_name() {
  // @@protoc_insertion_point(field_mutable:api.DeviceListItem.device_profile_name)
  return _internal_mutable_device_profile_name();
}
inline const std::string& DeviceListItem::_internal_device_profile_name() const {
  return device_profile_name_.Get();
}
inline void DeviceListItem::_internal_set_device_profile_name(const std::string& value) {
  
  device_profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceListItem::set_device_profile_name(std::string&& value) {
  
  device_profile_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceListItem.device_profile_name)
}
inline void DeviceListItem::set_device_profile_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceListItem.device_profile_name)
}
inline void DeviceListItem::set_device_profile_name(const char* value,
    size_t size) {
  
  device_profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceListItem.device_profile_name)
}
inline std::string* DeviceListItem::_internal_mutable_device_profile_name() {
  
  return device_profile_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceListItem::release_device_profile_name() {
  // @@protoc_insertion_point(field_release:api.DeviceListItem.device_profile_name)
  return device_profile_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceListItem::set_allocated_device_profile_name(std::string* device_profile_name) {
  if (device_profile_name != nullptr) {
    
  } else {
    
  }
  device_profile_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_profile_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceListItem.device_profile_name)
}
inline std::string* DeviceListItem::unsafe_arena_release_device_profile_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceListItem.device_profile_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_profile_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceListItem::unsafe_arena_set_allocated_device_profile_name(
    std::string* device_profile_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_profile_name != nullptr) {
    
  } else {
    
  }
  device_profile_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_profile_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceListItem.device_profile_name)
}

// .api.DeviceStatus device_status = 9;
inline bool DeviceListItem::_internal_has_device_status() const {
  return this != internal_default_instance() && device_status_ != nullptr;
}
inline bool DeviceListItem::has_device_status() const {
  return _internal_has_device_status();
}
inline void DeviceListItem::clear_device_status() {
  if (GetArena() == nullptr && device_status_ != nullptr) {
    delete device_status_;
  }
  device_status_ = nullptr;
}
inline const ::api::DeviceStatus& DeviceListItem::_internal_device_status() const {
  const ::api::DeviceStatus* p = device_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::DeviceStatus*>(
      &::api::_DeviceStatus_default_instance_);
}
inline const ::api::DeviceStatus& DeviceListItem::device_status() const {
  // @@protoc_insertion_point(field_get:api.DeviceListItem.device_status)
  return _internal_device_status();
}
inline void DeviceListItem::unsafe_arena_set_allocated_device_status(
    ::api::DeviceStatus* device_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_status_);
  }
  device_status_ = device_status;
  if (device_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceListItem.device_status)
}
inline ::api::DeviceStatus* DeviceListItem::release_device_status() {
  auto temp = unsafe_arena_release_device_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::DeviceStatus* DeviceListItem::unsafe_arena_release_device_status() {
  // @@protoc_insertion_point(field_release:api.DeviceListItem.device_status)
  
  ::api::DeviceStatus* temp = device_status_;
  device_status_ = nullptr;
  return temp;
}
inline ::api::DeviceStatus* DeviceListItem::_internal_mutable_device_status() {
  
  if (device_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::DeviceStatus>(GetArena());
    device_status_ = p;
  }
  return device_status_;
}
inline ::api::DeviceStatus* DeviceListItem::mutable_device_status() {
  // @@protoc_insertion_point(field_mutable:api.DeviceListItem.device_status)
  return _internal_mutable_device_status();
}
inline void DeviceListItem::set_allocated_device_status(::api::DeviceStatus* device_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_status_;
  }
  if (device_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_status);
    if (message_arena != submessage_arena) {
      device_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_status, submessage_arena);
    }
    
  } else {
    
  }
  device_status_ = device_status;
  // @@protoc_insertion_point(field_set_allocated:api.DeviceListItem.device_status)
}

// -------------------------------------------------------------------

// DeviceKeys

// string dev_eui = 1;
inline void DeviceKeys::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceKeys::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.DeviceKeys.dev_eui)
  return _internal_dev_eui();
}
inline void DeviceKeys::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.DeviceKeys.dev_eui)
}
inline std::string* DeviceKeys::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.DeviceKeys.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& DeviceKeys::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void DeviceKeys::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceKeys::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceKeys.dev_eui)
}
inline void DeviceKeys::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceKeys.dev_eui)
}
inline void DeviceKeys::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceKeys.dev_eui)
}
inline std::string* DeviceKeys::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceKeys::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.DeviceKeys.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceKeys::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceKeys.dev_eui)
}
inline std::string* DeviceKeys::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceKeys.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceKeys::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceKeys.dev_eui)
}

// string nwk_key = 2;
inline void DeviceKeys::clear_nwk_key() {
  nwk_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceKeys::nwk_key() const {
  // @@protoc_insertion_point(field_get:api.DeviceKeys.nwk_key)
  return _internal_nwk_key();
}
inline void DeviceKeys::set_nwk_key(const std::string& value) {
  _internal_set_nwk_key(value);
  // @@protoc_insertion_point(field_set:api.DeviceKeys.nwk_key)
}
inline std::string* DeviceKeys::mutable_nwk_key() {
  // @@protoc_insertion_point(field_mutable:api.DeviceKeys.nwk_key)
  return _internal_mutable_nwk_key();
}
inline const std::string& DeviceKeys::_internal_nwk_key() const {
  return nwk_key_.Get();
}
inline void DeviceKeys::_internal_set_nwk_key(const std::string& value) {
  
  nwk_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceKeys::set_nwk_key(std::string&& value) {
  
  nwk_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceKeys.nwk_key)
}
inline void DeviceKeys::set_nwk_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nwk_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceKeys.nwk_key)
}
inline void DeviceKeys::set_nwk_key(const char* value,
    size_t size) {
  
  nwk_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceKeys.nwk_key)
}
inline std::string* DeviceKeys::_internal_mutable_nwk_key() {
  
  return nwk_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceKeys::release_nwk_key() {
  // @@protoc_insertion_point(field_release:api.DeviceKeys.nwk_key)
  return nwk_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceKeys::set_allocated_nwk_key(std::string* nwk_key) {
  if (nwk_key != nullptr) {
    
  } else {
    
  }
  nwk_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nwk_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceKeys.nwk_key)
}
inline std::string* DeviceKeys::unsafe_arena_release_nwk_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceKeys.nwk_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nwk_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceKeys::unsafe_arena_set_allocated_nwk_key(
    std::string* nwk_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nwk_key != nullptr) {
    
  } else {
    
  }
  nwk_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nwk_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceKeys.nwk_key)
}

// string app_key = 3;
inline void DeviceKeys::clear_app_key() {
  app_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceKeys::app_key() const {
  // @@protoc_insertion_point(field_get:api.DeviceKeys.app_key)
  return _internal_app_key();
}
inline void DeviceKeys::set_app_key(const std::string& value) {
  _internal_set_app_key(value);
  // @@protoc_insertion_point(field_set:api.DeviceKeys.app_key)
}
inline std::string* DeviceKeys::mutable_app_key() {
  // @@protoc_insertion_point(field_mutable:api.DeviceKeys.app_key)
  return _internal_mutable_app_key();
}
inline const std::string& DeviceKeys::_internal_app_key() const {
  return app_key_.Get();
}
inline void DeviceKeys::_internal_set_app_key(const std::string& value) {
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceKeys::set_app_key(std::string&& value) {
  
  app_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceKeys.app_key)
}
inline void DeviceKeys::set_app_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceKeys.app_key)
}
inline void DeviceKeys::set_app_key(const char* value,
    size_t size) {
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceKeys.app_key)
}
inline std::string* DeviceKeys::_internal_mutable_app_key() {
  
  return app_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceKeys::release_app_key() {
  // @@protoc_insertion_point(field_release:api.DeviceKeys.app_key)
  return app_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceKeys::set_allocated_app_key(std::string* app_key) {
  if (app_key != nullptr) {
    
  } else {
    
  }
  app_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceKeys.app_key)
}
inline std::string* DeviceKeys::unsafe_arena_release_app_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceKeys.app_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceKeys::unsafe_arena_set_allocated_app_key(
    std::string* app_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_key != nullptr) {
    
  } else {
    
  }
  app_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceKeys.app_key)
}

// -------------------------------------------------------------------

// CreateDeviceRequest

// .api.Device device = 1;
inline bool CreateDeviceRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool CreateDeviceRequest::has_device() const {
  return _internal_has_device();
}
inline void CreateDeviceRequest::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::api::Device& CreateDeviceRequest::_internal_device() const {
  const ::api::Device* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::Device*>(
      &::api::_Device_default_instance_);
}
inline const ::api::Device& CreateDeviceRequest::device() const {
  // @@protoc_insertion_point(field_get:api.CreateDeviceRequest.device)
  return _internal_device();
}
inline void CreateDeviceRequest::unsafe_arena_set_allocated_device(
    ::api::Device* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.CreateDeviceRequest.device)
}
inline ::api::Device* CreateDeviceRequest::release_device() {
  auto temp = unsafe_arena_release_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::Device* CreateDeviceRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:api.CreateDeviceRequest.device)
  
  ::api::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::api::Device* CreateDeviceRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::Device>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::api::Device* CreateDeviceRequest::mutable_device() {
  // @@protoc_insertion_point(field_mutable:api.CreateDeviceRequest.device)
  return _internal_mutable_device();
}
inline void CreateDeviceRequest::set_allocated_device(::api::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:api.CreateDeviceRequest.device)
}

// -------------------------------------------------------------------

// GetDeviceRequest

// string dev_eui = 1;
inline void GetDeviceRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceRequest.dev_eui)
  return _internal_dev_eui();
}
inline void GetDeviceRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceRequest.dev_eui)
}
inline std::string* GetDeviceRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& GetDeviceRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void GetDeviceRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetDeviceRequest.dev_eui)
}
inline void GetDeviceRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetDeviceRequest.dev_eui)
}
inline void GetDeviceRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetDeviceRequest.dev_eui)
}
inline std::string* GetDeviceRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.GetDeviceRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceRequest.dev_eui)
}
inline std::string* GetDeviceRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.GetDeviceRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceRequest.dev_eui)
}

// -------------------------------------------------------------------

// GetDeviceResponse

// .api.Device device = 1;
inline bool GetDeviceResponse::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool GetDeviceResponse::has_device() const {
  return _internal_has_device();
}
inline void GetDeviceResponse::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::api::Device& GetDeviceResponse::_internal_device() const {
  const ::api::Device* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::Device*>(
      &::api::_Device_default_instance_);
}
inline const ::api::Device& GetDeviceResponse::device() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceResponse.device)
  return _internal_device();
}
inline void GetDeviceResponse::unsafe_arena_set_allocated_device(
    ::api::Device* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceResponse.device)
}
inline ::api::Device* GetDeviceResponse::release_device() {
  auto temp = unsafe_arena_release_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::Device* GetDeviceResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:api.GetDeviceResponse.device)
  
  ::api::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::api::Device* GetDeviceResponse::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::Device>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::api::Device* GetDeviceResponse::mutable_device() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceResponse.device)
  return _internal_mutable_device();
}
inline void GetDeviceResponse::set_allocated_device(::api::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceResponse.device)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool GetDeviceResponse::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetDeviceResponse::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceResponse::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceResponse::created_at() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceResponse.created_at)
  return _internal_created_at();
}
inline void GetDeviceResponse::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceResponse.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::release_created_at() {
  auto temp = unsafe_arena_release_created_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:api.GetDeviceResponse.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceResponse.created_at)
  return _internal_mutable_created_at();
}
inline void GetDeviceResponse::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceResponse.created_at)
}

// .google.protobuf.Timestamp updated_at = 3;
inline bool GetDeviceResponse::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetDeviceResponse::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceResponse::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceResponse::updated_at() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceResponse.updated_at)
  return _internal_updated_at();
}
inline void GetDeviceResponse::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceResponse.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::release_updated_at() {
  auto temp = unsafe_arena_release_updated_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:api.GetDeviceResponse.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceResponse.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetDeviceResponse::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceResponse.updated_at)
}

// .google.protobuf.Timestamp last_seen_at = 4;
inline bool GetDeviceResponse::_internal_has_last_seen_at() const {
  return this != internal_default_instance() && last_seen_at_ != nullptr;
}
inline bool GetDeviceResponse::has_last_seen_at() const {
  return _internal_has_last_seen_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceResponse::_internal_last_seen_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_seen_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceResponse::last_seen_at() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceResponse.last_seen_at)
  return _internal_last_seen_at();
}
inline void GetDeviceResponse::unsafe_arena_set_allocated_last_seen_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_seen_at_);
  }
  last_seen_at_ = last_seen_at;
  if (last_seen_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceResponse.last_seen_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::release_last_seen_at() {
  auto temp = unsafe_arena_release_last_seen_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::unsafe_arena_release_last_seen_at() {
  // @@protoc_insertion_point(field_release:api.GetDeviceResponse.last_seen_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_seen_at_;
  last_seen_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::_internal_mutable_last_seen_at() {
  
  if (last_seen_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    last_seen_at_ = p;
  }
  return last_seen_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceResponse::mutable_last_seen_at() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceResponse.last_seen_at)
  return _internal_mutable_last_seen_at();
}
inline void GetDeviceResponse::set_allocated_last_seen_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_seen_at_);
  }
  if (last_seen_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_seen_at)->GetArena();
    if (message_arena != submessage_arena) {
      last_seen_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_seen_at, submessage_arena);
    }
    
  } else {
    
  }
  last_seen_at_ = last_seen_at;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceResponse.last_seen_at)
}

// .api.DeviceStatus device_status = 5;
inline bool GetDeviceResponse::_internal_has_device_status() const {
  return this != internal_default_instance() && device_status_ != nullptr;
}
inline bool GetDeviceResponse::has_device_status() const {
  return _internal_has_device_status();
}
inline void GetDeviceResponse::clear_device_status() {
  if (GetArena() == nullptr && device_status_ != nullptr) {
    delete device_status_;
  }
  device_status_ = nullptr;
}
inline const ::api::DeviceStatus& GetDeviceResponse::_internal_device_status() const {
  const ::api::DeviceStatus* p = device_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::DeviceStatus*>(
      &::api::_DeviceStatus_default_instance_);
}
inline const ::api::DeviceStatus& GetDeviceResponse::device_status() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceResponse.device_status)
  return _internal_device_status();
}
inline void GetDeviceResponse::unsafe_arena_set_allocated_device_status(
    ::api::DeviceStatus* device_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_status_);
  }
  device_status_ = device_status;
  if (device_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceResponse.device_status)
}
inline ::api::DeviceStatus* GetDeviceResponse::release_device_status() {
  auto temp = unsafe_arena_release_device_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::DeviceStatus* GetDeviceResponse::unsafe_arena_release_device_status() {
  // @@protoc_insertion_point(field_release:api.GetDeviceResponse.device_status)
  
  ::api::DeviceStatus* temp = device_status_;
  device_status_ = nullptr;
  return temp;
}
inline ::api::DeviceStatus* GetDeviceResponse::_internal_mutable_device_status() {
  
  if (device_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::DeviceStatus>(GetArena());
    device_status_ = p;
  }
  return device_status_;
}
inline ::api::DeviceStatus* GetDeviceResponse::mutable_device_status() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceResponse.device_status)
  return _internal_mutable_device_status();
}
inline void GetDeviceResponse::set_allocated_device_status(::api::DeviceStatus* device_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_status_;
  }
  if (device_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_status);
    if (message_arena != submessage_arena) {
      device_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_status, submessage_arena);
    }
    
  } else {
    
  }
  device_status_ = device_status;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceResponse.device_status)
}

// .common.DeviceClass class_enabled = 6;
inline void GetDeviceResponse::clear_class_enabled() {
  class_enabled_ = 0;
}
inline ::common::DeviceClass GetDeviceResponse::_internal_class_enabled() const {
  return static_cast< ::common::DeviceClass >(class_enabled_);
}
inline ::common::DeviceClass GetDeviceResponse::class_enabled() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceResponse.class_enabled)
  return _internal_class_enabled();
}
inline void GetDeviceResponse::_internal_set_class_enabled(::common::DeviceClass value) {
  
  class_enabled_ = value;
}
inline void GetDeviceResponse::set_class_enabled(::common::DeviceClass value) {
  _internal_set_class_enabled(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceResponse.class_enabled)
}

// -------------------------------------------------------------------

// UpdateDeviceRequest

// .api.Device device = 1;
inline bool UpdateDeviceRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool UpdateDeviceRequest::has_device() const {
  return _internal_has_device();
}
inline void UpdateDeviceRequest::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::api::Device& UpdateDeviceRequest::_internal_device() const {
  const ::api::Device* p = device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::Device*>(
      &::api::_Device_default_instance_);
}
inline const ::api::Device& UpdateDeviceRequest::device() const {
  // @@protoc_insertion_point(field_get:api.UpdateDeviceRequest.device)
  return _internal_device();
}
inline void UpdateDeviceRequest::unsafe_arena_set_allocated_device(
    ::api::Device* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.UpdateDeviceRequest.device)
}
inline ::api::Device* UpdateDeviceRequest::release_device() {
  auto temp = unsafe_arena_release_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::Device* UpdateDeviceRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:api.UpdateDeviceRequest.device)
  
  ::api::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::api::Device* UpdateDeviceRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::Device>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::api::Device* UpdateDeviceRequest::mutable_device() {
  // @@protoc_insertion_point(field_mutable:api.UpdateDeviceRequest.device)
  return _internal_mutable_device();
}
inline void UpdateDeviceRequest::set_allocated_device(::api::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:api.UpdateDeviceRequest.device)
}

// -------------------------------------------------------------------

// DeleteDeviceRequest

// string dev_eui = 1;
inline void DeleteDeviceRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteDeviceRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.DeleteDeviceRequest.dev_eui)
  return _internal_dev_eui();
}
inline void DeleteDeviceRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.DeleteDeviceRequest.dev_eui)
}
inline std::string* DeleteDeviceRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.DeleteDeviceRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& DeleteDeviceRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void DeleteDeviceRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteDeviceRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeleteDeviceRequest.dev_eui)
}
inline void DeleteDeviceRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeleteDeviceRequest.dev_eui)
}
inline void DeleteDeviceRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeleteDeviceRequest.dev_eui)
}
inline std::string* DeleteDeviceRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteDeviceRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.DeleteDeviceRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDeviceRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeleteDeviceRequest.dev_eui)
}
inline std::string* DeleteDeviceRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeleteDeviceRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteDeviceRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeleteDeviceRequest.dev_eui)
}

// -------------------------------------------------------------------

// ListDevicesRequest

// uint32 limit = 1;
inline void ListDevicesRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDevicesRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDevicesRequest::limit() const {
  // @@protoc_insertion_point(field_get:api.ListDevicesRequest.limit)
  return _internal_limit();
}
inline void ListDevicesRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void ListDevicesRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:api.ListDevicesRequest.limit)
}

// uint32 offset = 2;
inline void ListDevicesRequest::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDevicesRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDevicesRequest::offset() const {
  // @@protoc_insertion_point(field_get:api.ListDevicesRequest.offset)
  return _internal_offset();
}
inline void ListDevicesRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void ListDevicesRequest::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:api.ListDevicesRequest.offset)
}

// string search = 3;
inline void ListDevicesRequest::clear_search() {
  search_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListDevicesRequest::search() const {
  // @@protoc_insertion_point(field_get:api.ListDevicesRequest.search)
  return _internal_search();
}
inline void ListDevicesRequest::set_search(const std::string& value) {
  _internal_set_search(value);
  // @@protoc_insertion_point(field_set:api.ListDevicesRequest.search)
}
inline std::string* ListDevicesRequest::mutable_search() {
  // @@protoc_insertion_point(field_mutable:api.ListDevicesRequest.search)
  return _internal_mutable_search();
}
inline const std::string& ListDevicesRequest::_internal_search() const {
  return search_.Get();
}
inline void ListDevicesRequest::_internal_set_search(const std::string& value) {
  
  search_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListDevicesRequest::set_search(std::string&& value) {
  
  search_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ListDevicesRequest.search)
}
inline void ListDevicesRequest::set_search(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ListDevicesRequest.search)
}
inline void ListDevicesRequest::set_search(const char* value,
    size_t size) {
  
  search_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ListDevicesRequest.search)
}
inline std::string* ListDevicesRequest::_internal_mutable_search() {
  
  return search_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListDevicesRequest::release_search() {
  // @@protoc_insertion_point(field_release:api.ListDevicesRequest.search)
  return search_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDevicesRequest::set_allocated_search(std::string* search) {
  if (search != nullptr) {
    
  } else {
    
  }
  search_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ListDevicesRequest.search)
}
inline std::string* ListDevicesRequest::unsafe_arena_release_search() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.ListDevicesRequest.search)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return search_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListDevicesRequest::unsafe_arena_set_allocated_search(
    std::string* search) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (search != nullptr) {
    
  } else {
    
  }
  search_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      search, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.ListDevicesRequest.search)
}

// string application_id = 4;
inline void ListDevicesRequest::clear_application_id() {
  application_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListDevicesRequest::application_id() const {
  // @@protoc_insertion_point(field_get:api.ListDevicesRequest.application_id)
  return _internal_application_id();
}
inline void ListDevicesRequest::set_application_id(const std::string& value) {
  _internal_set_application_id(value);
  // @@protoc_insertion_point(field_set:api.ListDevicesRequest.application_id)
}
inline std::string* ListDevicesRequest::mutable_application_id() {
  // @@protoc_insertion_point(field_mutable:api.ListDevicesRequest.application_id)
  return _internal_mutable_application_id();
}
inline const std::string& ListDevicesRequest::_internal_application_id() const {
  return application_id_.Get();
}
inline void ListDevicesRequest::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListDevicesRequest::set_application_id(std::string&& value) {
  
  application_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ListDevicesRequest.application_id)
}
inline void ListDevicesRequest::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ListDevicesRequest.application_id)
}
inline void ListDevicesRequest::set_application_id(const char* value,
    size_t size) {
  
  application_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ListDevicesRequest.application_id)
}
inline std::string* ListDevicesRequest::_internal_mutable_application_id() {
  
  return application_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListDevicesRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:api.ListDevicesRequest.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDevicesRequest::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ListDevicesRequest.application_id)
}
inline std::string* ListDevicesRequest::unsafe_arena_release_application_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.ListDevicesRequest.application_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return application_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListDevicesRequest::unsafe_arena_set_allocated_application_id(
    std::string* application_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      application_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.ListDevicesRequest.application_id)
}

// string multicast_group_id = 5;
inline void ListDevicesRequest::clear_multicast_group_id() {
  multicast_group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListDevicesRequest::multicast_group_id() const {
  // @@protoc_insertion_point(field_get:api.ListDevicesRequest.multicast_group_id)
  return _internal_multicast_group_id();
}
inline void ListDevicesRequest::set_multicast_group_id(const std::string& value) {
  _internal_set_multicast_group_id(value);
  // @@protoc_insertion_point(field_set:api.ListDevicesRequest.multicast_group_id)
}
inline std::string* ListDevicesRequest::mutable_multicast_group_id() {
  // @@protoc_insertion_point(field_mutable:api.ListDevicesRequest.multicast_group_id)
  return _internal_mutable_multicast_group_id();
}
inline const std::string& ListDevicesRequest::_internal_multicast_group_id() const {
  return multicast_group_id_.Get();
}
inline void ListDevicesRequest::_internal_set_multicast_group_id(const std::string& value) {
  
  multicast_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListDevicesRequest::set_multicast_group_id(std::string&& value) {
  
  multicast_group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ListDevicesRequest.multicast_group_id)
}
inline void ListDevicesRequest::set_multicast_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  multicast_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.ListDevicesRequest.multicast_group_id)
}
inline void ListDevicesRequest::set_multicast_group_id(const char* value,
    size_t size) {
  
  multicast_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ListDevicesRequest.multicast_group_id)
}
inline std::string* ListDevicesRequest::_internal_mutable_multicast_group_id() {
  
  return multicast_group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListDevicesRequest::release_multicast_group_id() {
  // @@protoc_insertion_point(field_release:api.ListDevicesRequest.multicast_group_id)
  return multicast_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDevicesRequest::set_allocated_multicast_group_id(std::string* multicast_group_id) {
  if (multicast_group_id != nullptr) {
    
  } else {
    
  }
  multicast_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multicast_group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ListDevicesRequest.multicast_group_id)
}
inline std::string* ListDevicesRequest::unsafe_arena_release_multicast_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.ListDevicesRequest.multicast_group_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return multicast_group_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListDevicesRequest::unsafe_arena_set_allocated_multicast_group_id(
    std::string* multicast_group_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (multicast_group_id != nullptr) {
    
  } else {
    
  }
  multicast_group_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      multicast_group_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.ListDevicesRequest.multicast_group_id)
}

// -------------------------------------------------------------------

// ListDevicesResponse

// uint32 total_count = 1;
inline void ListDevicesResponse::clear_total_count() {
  total_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDevicesResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListDevicesResponse::total_count() const {
  // @@protoc_insertion_point(field_get:api.ListDevicesResponse.total_count)
  return _internal_total_count();
}
inline void ListDevicesResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_count_ = value;
}
inline void ListDevicesResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:api.ListDevicesResponse.total_count)
}

// repeated .api.DeviceListItem result = 2;
inline int ListDevicesResponse::_internal_result_size() const {
  return result_.size();
}
inline int ListDevicesResponse::result_size() const {
  return _internal_result_size();
}
inline void ListDevicesResponse::clear_result() {
  result_.Clear();
}
inline ::api::DeviceListItem* ListDevicesResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:api.ListDevicesResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceListItem >*
ListDevicesResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:api.ListDevicesResponse.result)
  return &result_;
}
inline const ::api::DeviceListItem& ListDevicesResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::api::DeviceListItem& ListDevicesResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:api.ListDevicesResponse.result)
  return _internal_result(index);
}
inline ::api::DeviceListItem* ListDevicesResponse::_internal_add_result() {
  return result_.Add();
}
inline ::api::DeviceListItem* ListDevicesResponse::add_result() {
  // @@protoc_insertion_point(field_add:api.ListDevicesResponse.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceListItem >&
ListDevicesResponse::result() const {
  // @@protoc_insertion_point(field_list:api.ListDevicesResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// CreateDeviceKeysRequest

// .api.DeviceKeys device_keys = 1;
inline bool CreateDeviceKeysRequest::_internal_has_device_keys() const {
  return this != internal_default_instance() && device_keys_ != nullptr;
}
inline bool CreateDeviceKeysRequest::has_device_keys() const {
  return _internal_has_device_keys();
}
inline void CreateDeviceKeysRequest::clear_device_keys() {
  if (GetArena() == nullptr && device_keys_ != nullptr) {
    delete device_keys_;
  }
  device_keys_ = nullptr;
}
inline const ::api::DeviceKeys& CreateDeviceKeysRequest::_internal_device_keys() const {
  const ::api::DeviceKeys* p = device_keys_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::DeviceKeys*>(
      &::api::_DeviceKeys_default_instance_);
}
inline const ::api::DeviceKeys& CreateDeviceKeysRequest::device_keys() const {
  // @@protoc_insertion_point(field_get:api.CreateDeviceKeysRequest.device_keys)
  return _internal_device_keys();
}
inline void CreateDeviceKeysRequest::unsafe_arena_set_allocated_device_keys(
    ::api::DeviceKeys* device_keys) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_keys_);
  }
  device_keys_ = device_keys;
  if (device_keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.CreateDeviceKeysRequest.device_keys)
}
inline ::api::DeviceKeys* CreateDeviceKeysRequest::release_device_keys() {
  auto temp = unsafe_arena_release_device_keys();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::DeviceKeys* CreateDeviceKeysRequest::unsafe_arena_release_device_keys() {
  // @@protoc_insertion_point(field_release:api.CreateDeviceKeysRequest.device_keys)
  
  ::api::DeviceKeys* temp = device_keys_;
  device_keys_ = nullptr;
  return temp;
}
inline ::api::DeviceKeys* CreateDeviceKeysRequest::_internal_mutable_device_keys() {
  
  if (device_keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::DeviceKeys>(GetArena());
    device_keys_ = p;
  }
  return device_keys_;
}
inline ::api::DeviceKeys* CreateDeviceKeysRequest::mutable_device_keys() {
  // @@protoc_insertion_point(field_mutable:api.CreateDeviceKeysRequest.device_keys)
  return _internal_mutable_device_keys();
}
inline void CreateDeviceKeysRequest::set_allocated_device_keys(::api::DeviceKeys* device_keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_keys_;
  }
  if (device_keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_keys);
    if (message_arena != submessage_arena) {
      device_keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_keys, submessage_arena);
    }
    
  } else {
    
  }
  device_keys_ = device_keys;
  // @@protoc_insertion_point(field_set_allocated:api.CreateDeviceKeysRequest.device_keys)
}

// -------------------------------------------------------------------

// GetDeviceKeysRequest

// string dev_eui = 1;
inline void GetDeviceKeysRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceKeysRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceKeysRequest.dev_eui)
  return _internal_dev_eui();
}
inline void GetDeviceKeysRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceKeysRequest.dev_eui)
}
inline std::string* GetDeviceKeysRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceKeysRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& GetDeviceKeysRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void GetDeviceKeysRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceKeysRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetDeviceKeysRequest.dev_eui)
}
inline void GetDeviceKeysRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetDeviceKeysRequest.dev_eui)
}
inline void GetDeviceKeysRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetDeviceKeysRequest.dev_eui)
}
inline std::string* GetDeviceKeysRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceKeysRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.GetDeviceKeysRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceKeysRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceKeysRequest.dev_eui)
}
inline std::string* GetDeviceKeysRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.GetDeviceKeysRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceKeysRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceKeysRequest.dev_eui)
}

// -------------------------------------------------------------------

// GetDeviceKeysResponse

// .api.DeviceKeys device_keys = 1;
inline bool GetDeviceKeysResponse::_internal_has_device_keys() const {
  return this != internal_default_instance() && device_keys_ != nullptr;
}
inline bool GetDeviceKeysResponse::has_device_keys() const {
  return _internal_has_device_keys();
}
inline void GetDeviceKeysResponse::clear_device_keys() {
  if (GetArena() == nullptr && device_keys_ != nullptr) {
    delete device_keys_;
  }
  device_keys_ = nullptr;
}
inline const ::api::DeviceKeys& GetDeviceKeysResponse::_internal_device_keys() const {
  const ::api::DeviceKeys* p = device_keys_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::DeviceKeys*>(
      &::api::_DeviceKeys_default_instance_);
}
inline const ::api::DeviceKeys& GetDeviceKeysResponse::device_keys() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceKeysResponse.device_keys)
  return _internal_device_keys();
}
inline void GetDeviceKeysResponse::unsafe_arena_set_allocated_device_keys(
    ::api::DeviceKeys* device_keys) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_keys_);
  }
  device_keys_ = device_keys;
  if (device_keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceKeysResponse.device_keys)
}
inline ::api::DeviceKeys* GetDeviceKeysResponse::release_device_keys() {
  auto temp = unsafe_arena_release_device_keys();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::DeviceKeys* GetDeviceKeysResponse::unsafe_arena_release_device_keys() {
  // @@protoc_insertion_point(field_release:api.GetDeviceKeysResponse.device_keys)
  
  ::api::DeviceKeys* temp = device_keys_;
  device_keys_ = nullptr;
  return temp;
}
inline ::api::DeviceKeys* GetDeviceKeysResponse::_internal_mutable_device_keys() {
  
  if (device_keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::DeviceKeys>(GetArena());
    device_keys_ = p;
  }
  return device_keys_;
}
inline ::api::DeviceKeys* GetDeviceKeysResponse::mutable_device_keys() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceKeysResponse.device_keys)
  return _internal_mutable_device_keys();
}
inline void GetDeviceKeysResponse::set_allocated_device_keys(::api::DeviceKeys* device_keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_keys_;
  }
  if (device_keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_keys);
    if (message_arena != submessage_arena) {
      device_keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_keys, submessage_arena);
    }
    
  } else {
    
  }
  device_keys_ = device_keys;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceKeysResponse.device_keys)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool GetDeviceKeysResponse::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetDeviceKeysResponse::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceKeysResponse::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceKeysResponse::created_at() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceKeysResponse.created_at)
  return _internal_created_at();
}
inline void GetDeviceKeysResponse::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceKeysResponse.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceKeysResponse::release_created_at() {
  auto temp = unsafe_arena_release_created_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceKeysResponse::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:api.GetDeviceKeysResponse.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceKeysResponse::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceKeysResponse::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceKeysResponse.created_at)
  return _internal_mutable_created_at();
}
inline void GetDeviceKeysResponse::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceKeysResponse.created_at)
}

// .google.protobuf.Timestamp updated_at = 3;
inline bool GetDeviceKeysResponse::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool GetDeviceKeysResponse::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceKeysResponse::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceKeysResponse::updated_at() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceKeysResponse.updated_at)
  return _internal_updated_at();
}
inline void GetDeviceKeysResponse::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceKeysResponse.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceKeysResponse::release_updated_at() {
  auto temp = unsafe_arena_release_updated_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceKeysResponse::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:api.GetDeviceKeysResponse.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceKeysResponse::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceKeysResponse::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceKeysResponse.updated_at)
  return _internal_mutable_updated_at();
}
inline void GetDeviceKeysResponse::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceKeysResponse.updated_at)
}

// -------------------------------------------------------------------

// UpdateDeviceKeysRequest

// .api.DeviceKeys device_keys = 1;
inline bool UpdateDeviceKeysRequest::_internal_has_device_keys() const {
  return this != internal_default_instance() && device_keys_ != nullptr;
}
inline bool UpdateDeviceKeysRequest::has_device_keys() const {
  return _internal_has_device_keys();
}
inline void UpdateDeviceKeysRequest::clear_device_keys() {
  if (GetArena() == nullptr && device_keys_ != nullptr) {
    delete device_keys_;
  }
  device_keys_ = nullptr;
}
inline const ::api::DeviceKeys& UpdateDeviceKeysRequest::_internal_device_keys() const {
  const ::api::DeviceKeys* p = device_keys_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::DeviceKeys*>(
      &::api::_DeviceKeys_default_instance_);
}
inline const ::api::DeviceKeys& UpdateDeviceKeysRequest::device_keys() const {
  // @@protoc_insertion_point(field_get:api.UpdateDeviceKeysRequest.device_keys)
  return _internal_device_keys();
}
inline void UpdateDeviceKeysRequest::unsafe_arena_set_allocated_device_keys(
    ::api::DeviceKeys* device_keys) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_keys_);
  }
  device_keys_ = device_keys;
  if (device_keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.UpdateDeviceKeysRequest.device_keys)
}
inline ::api::DeviceKeys* UpdateDeviceKeysRequest::release_device_keys() {
  auto temp = unsafe_arena_release_device_keys();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::DeviceKeys* UpdateDeviceKeysRequest::unsafe_arena_release_device_keys() {
  // @@protoc_insertion_point(field_release:api.UpdateDeviceKeysRequest.device_keys)
  
  ::api::DeviceKeys* temp = device_keys_;
  device_keys_ = nullptr;
  return temp;
}
inline ::api::DeviceKeys* UpdateDeviceKeysRequest::_internal_mutable_device_keys() {
  
  if (device_keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::DeviceKeys>(GetArena());
    device_keys_ = p;
  }
  return device_keys_;
}
inline ::api::DeviceKeys* UpdateDeviceKeysRequest::mutable_device_keys() {
  // @@protoc_insertion_point(field_mutable:api.UpdateDeviceKeysRequest.device_keys)
  return _internal_mutable_device_keys();
}
inline void UpdateDeviceKeysRequest::set_allocated_device_keys(::api::DeviceKeys* device_keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_keys_;
  }
  if (device_keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_keys);
    if (message_arena != submessage_arena) {
      device_keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_keys, submessage_arena);
    }
    
  } else {
    
  }
  device_keys_ = device_keys;
  // @@protoc_insertion_point(field_set_allocated:api.UpdateDeviceKeysRequest.device_keys)
}

// -------------------------------------------------------------------

// DeleteDeviceKeysRequest

// string dev_eui = 1;
inline void DeleteDeviceKeysRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteDeviceKeysRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.DeleteDeviceKeysRequest.dev_eui)
  return _internal_dev_eui();
}
inline void DeleteDeviceKeysRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.DeleteDeviceKeysRequest.dev_eui)
}
inline std::string* DeleteDeviceKeysRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.DeleteDeviceKeysRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& DeleteDeviceKeysRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void DeleteDeviceKeysRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteDeviceKeysRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeleteDeviceKeysRequest.dev_eui)
}
inline void DeleteDeviceKeysRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeleteDeviceKeysRequest.dev_eui)
}
inline void DeleteDeviceKeysRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeleteDeviceKeysRequest.dev_eui)
}
inline std::string* DeleteDeviceKeysRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteDeviceKeysRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.DeleteDeviceKeysRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDeviceKeysRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeleteDeviceKeysRequest.dev_eui)
}
inline std::string* DeleteDeviceKeysRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeleteDeviceKeysRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteDeviceKeysRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeleteDeviceKeysRequest.dev_eui)
}

// -------------------------------------------------------------------

// DeviceActivation

// string dev_eui = 1;
inline void DeviceActivation::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceActivation::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.DeviceActivation.dev_eui)
  return _internal_dev_eui();
}
inline void DeviceActivation::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.DeviceActivation.dev_eui)
}
inline std::string* DeviceActivation::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.DeviceActivation.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& DeviceActivation::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void DeviceActivation::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceActivation::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceActivation.dev_eui)
}
inline void DeviceActivation::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceActivation.dev_eui)
}
inline void DeviceActivation::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceActivation.dev_eui)
}
inline std::string* DeviceActivation::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceActivation::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.DeviceActivation.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceActivation::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceActivation.dev_eui)
}
inline std::string* DeviceActivation::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceActivation.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceActivation::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceActivation.dev_eui)
}

// string dev_addr = 2;
inline void DeviceActivation::clear_dev_addr() {
  dev_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceActivation::dev_addr() const {
  // @@protoc_insertion_point(field_get:api.DeviceActivation.dev_addr)
  return _internal_dev_addr();
}
inline void DeviceActivation::set_dev_addr(const std::string& value) {
  _internal_set_dev_addr(value);
  // @@protoc_insertion_point(field_set:api.DeviceActivation.dev_addr)
}
inline std::string* DeviceActivation::mutable_dev_addr() {
  // @@protoc_insertion_point(field_mutable:api.DeviceActivation.dev_addr)
  return _internal_mutable_dev_addr();
}
inline const std::string& DeviceActivation::_internal_dev_addr() const {
  return dev_addr_.Get();
}
inline void DeviceActivation::_internal_set_dev_addr(const std::string& value) {
  
  dev_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceActivation::set_dev_addr(std::string&& value) {
  
  dev_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceActivation.dev_addr)
}
inline void DeviceActivation::set_dev_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceActivation.dev_addr)
}
inline void DeviceActivation::set_dev_addr(const char* value,
    size_t size) {
  
  dev_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceActivation.dev_addr)
}
inline std::string* DeviceActivation::_internal_mutable_dev_addr() {
  
  return dev_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceActivation::release_dev_addr() {
  // @@protoc_insertion_point(field_release:api.DeviceActivation.dev_addr)
  return dev_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceActivation::set_allocated_dev_addr(std::string* dev_addr) {
  if (dev_addr != nullptr) {
    
  } else {
    
  }
  dev_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceActivation.dev_addr)
}
inline std::string* DeviceActivation::unsafe_arena_release_dev_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceActivation.dev_addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceActivation::unsafe_arena_set_allocated_dev_addr(
    std::string* dev_addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_addr != nullptr) {
    
  } else {
    
  }
  dev_addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceActivation.dev_addr)
}

// string app_s_key = 3;
inline void DeviceActivation::clear_app_s_key() {
  app_s_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceActivation::app_s_key() const {
  // @@protoc_insertion_point(field_get:api.DeviceActivation.app_s_key)
  return _internal_app_s_key();
}
inline void DeviceActivation::set_app_s_key(const std::string& value) {
  _internal_set_app_s_key(value);
  // @@protoc_insertion_point(field_set:api.DeviceActivation.app_s_key)
}
inline std::string* DeviceActivation::mutable_app_s_key() {
  // @@protoc_insertion_point(field_mutable:api.DeviceActivation.app_s_key)
  return _internal_mutable_app_s_key();
}
inline const std::string& DeviceActivation::_internal_app_s_key() const {
  return app_s_key_.Get();
}
inline void DeviceActivation::_internal_set_app_s_key(const std::string& value) {
  
  app_s_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceActivation::set_app_s_key(std::string&& value) {
  
  app_s_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceActivation.app_s_key)
}
inline void DeviceActivation::set_app_s_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_s_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceActivation.app_s_key)
}
inline void DeviceActivation::set_app_s_key(const char* value,
    size_t size) {
  
  app_s_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceActivation.app_s_key)
}
inline std::string* DeviceActivation::_internal_mutable_app_s_key() {
  
  return app_s_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceActivation::release_app_s_key() {
  // @@protoc_insertion_point(field_release:api.DeviceActivation.app_s_key)
  return app_s_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceActivation::set_allocated_app_s_key(std::string* app_s_key) {
  if (app_s_key != nullptr) {
    
  } else {
    
  }
  app_s_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_s_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceActivation.app_s_key)
}
inline std::string* DeviceActivation::unsafe_arena_release_app_s_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceActivation.app_s_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_s_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceActivation::unsafe_arena_set_allocated_app_s_key(
    std::string* app_s_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_s_key != nullptr) {
    
  } else {
    
  }
  app_s_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_s_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceActivation.app_s_key)
}

// string nwk_s_enc_key = 4;
inline void DeviceActivation::clear_nwk_s_enc_key() {
  nwk_s_enc_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceActivation::nwk_s_enc_key() const {
  // @@protoc_insertion_point(field_get:api.DeviceActivation.nwk_s_enc_key)
  return _internal_nwk_s_enc_key();
}
inline void DeviceActivation::set_nwk_s_enc_key(const std::string& value) {
  _internal_set_nwk_s_enc_key(value);
  // @@protoc_insertion_point(field_set:api.DeviceActivation.nwk_s_enc_key)
}
inline std::string* DeviceActivation::mutable_nwk_s_enc_key() {
  // @@protoc_insertion_point(field_mutable:api.DeviceActivation.nwk_s_enc_key)
  return _internal_mutable_nwk_s_enc_key();
}
inline const std::string& DeviceActivation::_internal_nwk_s_enc_key() const {
  return nwk_s_enc_key_.Get();
}
inline void DeviceActivation::_internal_set_nwk_s_enc_key(const std::string& value) {
  
  nwk_s_enc_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceActivation::set_nwk_s_enc_key(std::string&& value) {
  
  nwk_s_enc_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceActivation.nwk_s_enc_key)
}
inline void DeviceActivation::set_nwk_s_enc_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nwk_s_enc_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceActivation.nwk_s_enc_key)
}
inline void DeviceActivation::set_nwk_s_enc_key(const char* value,
    size_t size) {
  
  nwk_s_enc_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceActivation.nwk_s_enc_key)
}
inline std::string* DeviceActivation::_internal_mutable_nwk_s_enc_key() {
  
  return nwk_s_enc_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceActivation::release_nwk_s_enc_key() {
  // @@protoc_insertion_point(field_release:api.DeviceActivation.nwk_s_enc_key)
  return nwk_s_enc_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceActivation::set_allocated_nwk_s_enc_key(std::string* nwk_s_enc_key) {
  if (nwk_s_enc_key != nullptr) {
    
  } else {
    
  }
  nwk_s_enc_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nwk_s_enc_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceActivation.nwk_s_enc_key)
}
inline std::string* DeviceActivation::unsafe_arena_release_nwk_s_enc_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceActivation.nwk_s_enc_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nwk_s_enc_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceActivation::unsafe_arena_set_allocated_nwk_s_enc_key(
    std::string* nwk_s_enc_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nwk_s_enc_key != nullptr) {
    
  } else {
    
  }
  nwk_s_enc_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nwk_s_enc_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceActivation.nwk_s_enc_key)
}

// string s_nwk_s_int_key = 8;
inline void DeviceActivation::clear_s_nwk_s_int_key() {
  s_nwk_s_int_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceActivation::s_nwk_s_int_key() const {
  // @@protoc_insertion_point(field_get:api.DeviceActivation.s_nwk_s_int_key)
  return _internal_s_nwk_s_int_key();
}
inline void DeviceActivation::set_s_nwk_s_int_key(const std::string& value) {
  _internal_set_s_nwk_s_int_key(value);
  // @@protoc_insertion_point(field_set:api.DeviceActivation.s_nwk_s_int_key)
}
inline std::string* DeviceActivation::mutable_s_nwk_s_int_key() {
  // @@protoc_insertion_point(field_mutable:api.DeviceActivation.s_nwk_s_int_key)
  return _internal_mutable_s_nwk_s_int_key();
}
inline const std::string& DeviceActivation::_internal_s_nwk_s_int_key() const {
  return s_nwk_s_int_key_.Get();
}
inline void DeviceActivation::_internal_set_s_nwk_s_int_key(const std::string& value) {
  
  s_nwk_s_int_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceActivation::set_s_nwk_s_int_key(std::string&& value) {
  
  s_nwk_s_int_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceActivation.s_nwk_s_int_key)
}
inline void DeviceActivation::set_s_nwk_s_int_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s_nwk_s_int_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceActivation.s_nwk_s_int_key)
}
inline void DeviceActivation::set_s_nwk_s_int_key(const char* value,
    size_t size) {
  
  s_nwk_s_int_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceActivation.s_nwk_s_int_key)
}
inline std::string* DeviceActivation::_internal_mutable_s_nwk_s_int_key() {
  
  return s_nwk_s_int_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceActivation::release_s_nwk_s_int_key() {
  // @@protoc_insertion_point(field_release:api.DeviceActivation.s_nwk_s_int_key)
  return s_nwk_s_int_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceActivation::set_allocated_s_nwk_s_int_key(std::string* s_nwk_s_int_key) {
  if (s_nwk_s_int_key != nullptr) {
    
  } else {
    
  }
  s_nwk_s_int_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s_nwk_s_int_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceActivation.s_nwk_s_int_key)
}
inline std::string* DeviceActivation::unsafe_arena_release_s_nwk_s_int_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceActivation.s_nwk_s_int_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return s_nwk_s_int_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceActivation::unsafe_arena_set_allocated_s_nwk_s_int_key(
    std::string* s_nwk_s_int_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (s_nwk_s_int_key != nullptr) {
    
  } else {
    
  }
  s_nwk_s_int_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      s_nwk_s_int_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceActivation.s_nwk_s_int_key)
}

// string f_nwk_s_int_key = 9;
inline void DeviceActivation::clear_f_nwk_s_int_key() {
  f_nwk_s_int_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceActivation::f_nwk_s_int_key() const {
  // @@protoc_insertion_point(field_get:api.DeviceActivation.f_nwk_s_int_key)
  return _internal_f_nwk_s_int_key();
}
inline void DeviceActivation::set_f_nwk_s_int_key(const std::string& value) {
  _internal_set_f_nwk_s_int_key(value);
  // @@protoc_insertion_point(field_set:api.DeviceActivation.f_nwk_s_int_key)
}
inline std::string* DeviceActivation::mutable_f_nwk_s_int_key() {
  // @@protoc_insertion_point(field_mutable:api.DeviceActivation.f_nwk_s_int_key)
  return _internal_mutable_f_nwk_s_int_key();
}
inline const std::string& DeviceActivation::_internal_f_nwk_s_int_key() const {
  return f_nwk_s_int_key_.Get();
}
inline void DeviceActivation::_internal_set_f_nwk_s_int_key(const std::string& value) {
  
  f_nwk_s_int_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceActivation::set_f_nwk_s_int_key(std::string&& value) {
  
  f_nwk_s_int_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceActivation.f_nwk_s_int_key)
}
inline void DeviceActivation::set_f_nwk_s_int_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  f_nwk_s_int_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceActivation.f_nwk_s_int_key)
}
inline void DeviceActivation::set_f_nwk_s_int_key(const char* value,
    size_t size) {
  
  f_nwk_s_int_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceActivation.f_nwk_s_int_key)
}
inline std::string* DeviceActivation::_internal_mutable_f_nwk_s_int_key() {
  
  return f_nwk_s_int_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceActivation::release_f_nwk_s_int_key() {
  // @@protoc_insertion_point(field_release:api.DeviceActivation.f_nwk_s_int_key)
  return f_nwk_s_int_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceActivation::set_allocated_f_nwk_s_int_key(std::string* f_nwk_s_int_key) {
  if (f_nwk_s_int_key != nullptr) {
    
  } else {
    
  }
  f_nwk_s_int_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f_nwk_s_int_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceActivation.f_nwk_s_int_key)
}
inline std::string* DeviceActivation::unsafe_arena_release_f_nwk_s_int_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceActivation.f_nwk_s_int_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return f_nwk_s_int_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceActivation::unsafe_arena_set_allocated_f_nwk_s_int_key(
    std::string* f_nwk_s_int_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (f_nwk_s_int_key != nullptr) {
    
  } else {
    
  }
  f_nwk_s_int_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f_nwk_s_int_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceActivation.f_nwk_s_int_key)
}

// uint32 f_cnt_up = 5;
inline void DeviceActivation::clear_f_cnt_up() {
  f_cnt_up_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceActivation::_internal_f_cnt_up() const {
  return f_cnt_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceActivation::f_cnt_up() const {
  // @@protoc_insertion_point(field_get:api.DeviceActivation.f_cnt_up)
  return _internal_f_cnt_up();
}
inline void DeviceActivation::_internal_set_f_cnt_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  f_cnt_up_ = value;
}
inline void DeviceActivation::set_f_cnt_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f_cnt_up(value);
  // @@protoc_insertion_point(field_set:api.DeviceActivation.f_cnt_up)
}

// uint32 n_f_cnt_down = 6;
inline void DeviceActivation::clear_n_f_cnt_down() {
  n_f_cnt_down_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceActivation::_internal_n_f_cnt_down() const {
  return n_f_cnt_down_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceActivation::n_f_cnt_down() const {
  // @@protoc_insertion_point(field_get:api.DeviceActivation.n_f_cnt_down)
  return _internal_n_f_cnt_down();
}
inline void DeviceActivation::_internal_set_n_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_f_cnt_down_ = value;
}
inline void DeviceActivation::set_n_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_f_cnt_down(value);
  // @@protoc_insertion_point(field_set:api.DeviceActivation.n_f_cnt_down)
}

// uint32 a_f_cnt_down = 10;
inline void DeviceActivation::clear_a_f_cnt_down() {
  a_f_cnt_down_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceActivation::_internal_a_f_cnt_down() const {
  return a_f_cnt_down_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceActivation::a_f_cnt_down() const {
  // @@protoc_insertion_point(field_get:api.DeviceActivation.a_f_cnt_down)
  return _internal_a_f_cnt_down();
}
inline void DeviceActivation::_internal_set_a_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  a_f_cnt_down_ = value;
}
inline void DeviceActivation::set_a_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_a_f_cnt_down(value);
  // @@protoc_insertion_point(field_set:api.DeviceActivation.a_f_cnt_down)
}

// -------------------------------------------------------------------

// ActivateDeviceRequest

// .api.DeviceActivation device_activation = 1;
inline bool ActivateDeviceRequest::_internal_has_device_activation() const {
  return this != internal_default_instance() && device_activation_ != nullptr;
}
inline bool ActivateDeviceRequest::has_device_activation() const {
  return _internal_has_device_activation();
}
inline void ActivateDeviceRequest::clear_device_activation() {
  if (GetArena() == nullptr && device_activation_ != nullptr) {
    delete device_activation_;
  }
  device_activation_ = nullptr;
}
inline const ::api::DeviceActivation& ActivateDeviceRequest::_internal_device_activation() const {
  const ::api::DeviceActivation* p = device_activation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::DeviceActivation*>(
      &::api::_DeviceActivation_default_instance_);
}
inline const ::api::DeviceActivation& ActivateDeviceRequest::device_activation() const {
  // @@protoc_insertion_point(field_get:api.ActivateDeviceRequest.device_activation)
  return _internal_device_activation();
}
inline void ActivateDeviceRequest::unsafe_arena_set_allocated_device_activation(
    ::api::DeviceActivation* device_activation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_activation_);
  }
  device_activation_ = device_activation;
  if (device_activation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.ActivateDeviceRequest.device_activation)
}
inline ::api::DeviceActivation* ActivateDeviceRequest::release_device_activation() {
  auto temp = unsafe_arena_release_device_activation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::DeviceActivation* ActivateDeviceRequest::unsafe_arena_release_device_activation() {
  // @@protoc_insertion_point(field_release:api.ActivateDeviceRequest.device_activation)
  
  ::api::DeviceActivation* temp = device_activation_;
  device_activation_ = nullptr;
  return temp;
}
inline ::api::DeviceActivation* ActivateDeviceRequest::_internal_mutable_device_activation() {
  
  if (device_activation_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::DeviceActivation>(GetArena());
    device_activation_ = p;
  }
  return device_activation_;
}
inline ::api::DeviceActivation* ActivateDeviceRequest::mutable_device_activation() {
  // @@protoc_insertion_point(field_mutable:api.ActivateDeviceRequest.device_activation)
  return _internal_mutable_device_activation();
}
inline void ActivateDeviceRequest::set_allocated_device_activation(::api::DeviceActivation* device_activation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_activation_;
  }
  if (device_activation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_activation);
    if (message_arena != submessage_arena) {
      device_activation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_activation, submessage_arena);
    }
    
  } else {
    
  }
  device_activation_ = device_activation;
  // @@protoc_insertion_point(field_set_allocated:api.ActivateDeviceRequest.device_activation)
}

// -------------------------------------------------------------------

// DeactivateDeviceRequest

// string dev_eui = 1;
inline void DeactivateDeviceRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeactivateDeviceRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.DeactivateDeviceRequest.dev_eui)
  return _internal_dev_eui();
}
inline void DeactivateDeviceRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.DeactivateDeviceRequest.dev_eui)
}
inline std::string* DeactivateDeviceRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.DeactivateDeviceRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& DeactivateDeviceRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void DeactivateDeviceRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeactivateDeviceRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeactivateDeviceRequest.dev_eui)
}
inline void DeactivateDeviceRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeactivateDeviceRequest.dev_eui)
}
inline void DeactivateDeviceRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeactivateDeviceRequest.dev_eui)
}
inline std::string* DeactivateDeviceRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeactivateDeviceRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.DeactivateDeviceRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeactivateDeviceRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeactivateDeviceRequest.dev_eui)
}
inline std::string* DeactivateDeviceRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeactivateDeviceRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeactivateDeviceRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeactivateDeviceRequest.dev_eui)
}

// -------------------------------------------------------------------

// GetDeviceActivationRequest

// string dev_eui = 1;
inline void GetDeviceActivationRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceActivationRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceActivationRequest.dev_eui)
  return _internal_dev_eui();
}
inline void GetDeviceActivationRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceActivationRequest.dev_eui)
}
inline std::string* GetDeviceActivationRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceActivationRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& GetDeviceActivationRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void GetDeviceActivationRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceActivationRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetDeviceActivationRequest.dev_eui)
}
inline void GetDeviceActivationRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetDeviceActivationRequest.dev_eui)
}
inline void GetDeviceActivationRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetDeviceActivationRequest.dev_eui)
}
inline std::string* GetDeviceActivationRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceActivationRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.GetDeviceActivationRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceActivationRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceActivationRequest.dev_eui)
}
inline std::string* GetDeviceActivationRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.GetDeviceActivationRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceActivationRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceActivationRequest.dev_eui)
}

// -------------------------------------------------------------------

// GetDeviceActivationResponse

// .api.DeviceActivation device_activation = 1;
inline bool GetDeviceActivationResponse::_internal_has_device_activation() const {
  return this != internal_default_instance() && device_activation_ != nullptr;
}
inline bool GetDeviceActivationResponse::has_device_activation() const {
  return _internal_has_device_activation();
}
inline void GetDeviceActivationResponse::clear_device_activation() {
  if (GetArena() == nullptr && device_activation_ != nullptr) {
    delete device_activation_;
  }
  device_activation_ = nullptr;
}
inline const ::api::DeviceActivation& GetDeviceActivationResponse::_internal_device_activation() const {
  const ::api::DeviceActivation* p = device_activation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::DeviceActivation*>(
      &::api::_DeviceActivation_default_instance_);
}
inline const ::api::DeviceActivation& GetDeviceActivationResponse::device_activation() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceActivationResponse.device_activation)
  return _internal_device_activation();
}
inline void GetDeviceActivationResponse::unsafe_arena_set_allocated_device_activation(
    ::api::DeviceActivation* device_activation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_activation_);
  }
  device_activation_ = device_activation;
  if (device_activation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceActivationResponse.device_activation)
}
inline ::api::DeviceActivation* GetDeviceActivationResponse::release_device_activation() {
  auto temp = unsafe_arena_release_device_activation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::DeviceActivation* GetDeviceActivationResponse::unsafe_arena_release_device_activation() {
  // @@protoc_insertion_point(field_release:api.GetDeviceActivationResponse.device_activation)
  
  ::api::DeviceActivation* temp = device_activation_;
  device_activation_ = nullptr;
  return temp;
}
inline ::api::DeviceActivation* GetDeviceActivationResponse::_internal_mutable_device_activation() {
  
  if (device_activation_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::DeviceActivation>(GetArena());
    device_activation_ = p;
  }
  return device_activation_;
}
inline ::api::DeviceActivation* GetDeviceActivationResponse::mutable_device_activation() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceActivationResponse.device_activation)
  return _internal_mutable_device_activation();
}
inline void GetDeviceActivationResponse::set_allocated_device_activation(::api::DeviceActivation* device_activation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_activation_;
  }
  if (device_activation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_activation);
    if (message_arena != submessage_arena) {
      device_activation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_activation, submessage_arena);
    }
    
  } else {
    
  }
  device_activation_ = device_activation;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceActivationResponse.device_activation)
}

// .common.JoinServerContext join_server_context = 2;
inline bool GetDeviceActivationResponse::_internal_has_join_server_context() const {
  return this != internal_default_instance() && join_server_context_ != nullptr;
}
inline bool GetDeviceActivationResponse::has_join_server_context() const {
  return _internal_has_join_server_context();
}
inline const ::common::JoinServerContext& GetDeviceActivationResponse::_internal_join_server_context() const {
  const ::common::JoinServerContext* p = join_server_context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::JoinServerContext*>(
      &::common::_JoinServerContext_default_instance_);
}
inline const ::common::JoinServerContext& GetDeviceActivationResponse::join_server_context() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceActivationResponse.join_server_context)
  return _internal_join_server_context();
}
inline void GetDeviceActivationResponse::unsafe_arena_set_allocated_join_server_context(
    ::common::JoinServerContext* join_server_context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(join_server_context_);
  }
  join_server_context_ = join_server_context;
  if (join_server_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceActivationResponse.join_server_context)
}
inline ::common::JoinServerContext* GetDeviceActivationResponse::release_join_server_context() {
  auto temp = unsafe_arena_release_join_server_context();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::JoinServerContext* GetDeviceActivationResponse::unsafe_arena_release_join_server_context() {
  // @@protoc_insertion_point(field_release:api.GetDeviceActivationResponse.join_server_context)
  
  ::common::JoinServerContext* temp = join_server_context_;
  join_server_context_ = nullptr;
  return temp;
}
inline ::common::JoinServerContext* GetDeviceActivationResponse::_internal_mutable_join_server_context() {
  
  if (join_server_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::JoinServerContext>(GetArena());
    join_server_context_ = p;
  }
  return join_server_context_;
}
inline ::common::JoinServerContext* GetDeviceActivationResponse::mutable_join_server_context() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceActivationResponse.join_server_context)
  return _internal_mutable_join_server_context();
}
inline void GetDeviceActivationResponse::set_allocated_join_server_context(::common::JoinServerContext* join_server_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(join_server_context_);
  }
  if (join_server_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(join_server_context)->GetArena();
    if (message_arena != submessage_arena) {
      join_server_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_server_context, submessage_arena);
    }
    
  } else {
    
  }
  join_server_context_ = join_server_context;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceActivationResponse.join_server_context)
}

// -------------------------------------------------------------------

// GetRandomDevAddrRequest

// string dev_eui = 1;
inline void GetRandomDevAddrRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRandomDevAddrRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.GetRandomDevAddrRequest.dev_eui)
  return _internal_dev_eui();
}
inline void GetRandomDevAddrRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.GetRandomDevAddrRequest.dev_eui)
}
inline std::string* GetRandomDevAddrRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.GetRandomDevAddrRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& GetRandomDevAddrRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void GetRandomDevAddrRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRandomDevAddrRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetRandomDevAddrRequest.dev_eui)
}
inline void GetRandomDevAddrRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetRandomDevAddrRequest.dev_eui)
}
inline void GetRandomDevAddrRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetRandomDevAddrRequest.dev_eui)
}
inline std::string* GetRandomDevAddrRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRandomDevAddrRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.GetRandomDevAddrRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRandomDevAddrRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetRandomDevAddrRequest.dev_eui)
}
inline std::string* GetRandomDevAddrRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.GetRandomDevAddrRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRandomDevAddrRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetRandomDevAddrRequest.dev_eui)
}

// -------------------------------------------------------------------

// GetRandomDevAddrResponse

// string dev_addr = 1;
inline void GetRandomDevAddrResponse::clear_dev_addr() {
  dev_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRandomDevAddrResponse::dev_addr() const {
  // @@protoc_insertion_point(field_get:api.GetRandomDevAddrResponse.dev_addr)
  return _internal_dev_addr();
}
inline void GetRandomDevAddrResponse::set_dev_addr(const std::string& value) {
  _internal_set_dev_addr(value);
  // @@protoc_insertion_point(field_set:api.GetRandomDevAddrResponse.dev_addr)
}
inline std::string* GetRandomDevAddrResponse::mutable_dev_addr() {
  // @@protoc_insertion_point(field_mutable:api.GetRandomDevAddrResponse.dev_addr)
  return _internal_mutable_dev_addr();
}
inline const std::string& GetRandomDevAddrResponse::_internal_dev_addr() const {
  return dev_addr_.Get();
}
inline void GetRandomDevAddrResponse::_internal_set_dev_addr(const std::string& value) {
  
  dev_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRandomDevAddrResponse::set_dev_addr(std::string&& value) {
  
  dev_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetRandomDevAddrResponse.dev_addr)
}
inline void GetRandomDevAddrResponse::set_dev_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetRandomDevAddrResponse.dev_addr)
}
inline void GetRandomDevAddrResponse::set_dev_addr(const char* value,
    size_t size) {
  
  dev_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetRandomDevAddrResponse.dev_addr)
}
inline std::string* GetRandomDevAddrResponse::_internal_mutable_dev_addr() {
  
  return dev_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRandomDevAddrResponse::release_dev_addr() {
  // @@protoc_insertion_point(field_release:api.GetRandomDevAddrResponse.dev_addr)
  return dev_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRandomDevAddrResponse::set_allocated_dev_addr(std::string* dev_addr) {
  if (dev_addr != nullptr) {
    
  } else {
    
  }
  dev_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetRandomDevAddrResponse.dev_addr)
}
inline std::string* GetRandomDevAddrResponse::unsafe_arena_release_dev_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.GetRandomDevAddrResponse.dev_addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRandomDevAddrResponse::unsafe_arena_set_allocated_dev_addr(
    std::string* dev_addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_addr != nullptr) {
    
  } else {
    
  }
  dev_addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetRandomDevAddrResponse.dev_addr)
}

// -------------------------------------------------------------------

// GetDeviceMetricsRequest

// string dev_eui = 1;
inline void GetDeviceMetricsRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceMetricsRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceMetricsRequest.dev_eui)
  return _internal_dev_eui();
}
inline void GetDeviceMetricsRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceMetricsRequest.dev_eui)
}
inline std::string* GetDeviceMetricsRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceMetricsRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& GetDeviceMetricsRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void GetDeviceMetricsRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceMetricsRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetDeviceMetricsRequest.dev_eui)
}
inline void GetDeviceMetricsRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetDeviceMetricsRequest.dev_eui)
}
inline void GetDeviceMetricsRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetDeviceMetricsRequest.dev_eui)
}
inline std::string* GetDeviceMetricsRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceMetricsRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.GetDeviceMetricsRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceMetricsRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceMetricsRequest.dev_eui)
}
inline std::string* GetDeviceMetricsRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.GetDeviceMetricsRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceMetricsRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceMetricsRequest.dev_eui)
}

// .google.protobuf.Timestamp start = 2;
inline bool GetDeviceMetricsRequest::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool GetDeviceMetricsRequest::has_start() const {
  return _internal_has_start();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceMetricsRequest::_internal_start() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceMetricsRequest::start() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceMetricsRequest.start)
  return _internal_start();
}
inline void GetDeviceMetricsRequest::unsafe_arena_set_allocated_start(
    PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceMetricsRequest.start)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceMetricsRequest::release_start() {
  auto temp = unsafe_arena_release_start();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceMetricsRequest::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:api.GetDeviceMetricsRequest.start)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceMetricsRequest::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_ = p;
  }
  return start_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceMetricsRequest::mutable_start() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceMetricsRequest.start)
  return _internal_mutable_start();
}
inline void GetDeviceMetricsRequest::set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceMetricsRequest.start)
}

// .google.protobuf.Timestamp end = 3;
inline bool GetDeviceMetricsRequest::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool GetDeviceMetricsRequest::has_end() const {
  return _internal_has_end();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceMetricsRequest::_internal_end() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceMetricsRequest::end() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceMetricsRequest.end)
  return _internal_end();
}
inline void GetDeviceMetricsRequest::unsafe_arena_set_allocated_end(
    PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceMetricsRequest.end)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceMetricsRequest::release_end() {
  auto temp = unsafe_arena_release_end();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceMetricsRequest::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:api.GetDeviceMetricsRequest.end)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceMetricsRequest::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_ = p;
  }
  return end_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceMetricsRequest::mutable_end() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceMetricsRequest.end)
  return _internal_mutable_end();
}
inline void GetDeviceMetricsRequest::set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceMetricsRequest.end)
}

// .common.Aggregation aggregation = 4;
inline void GetDeviceMetricsRequest::clear_aggregation() {
  aggregation_ = 0;
}
inline ::common::Aggregation GetDeviceMetricsRequest::_internal_aggregation() const {
  return static_cast< ::common::Aggregation >(aggregation_);
}
inline ::common::Aggregation GetDeviceMetricsRequest::aggregation() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceMetricsRequest.aggregation)
  return _internal_aggregation();
}
inline void GetDeviceMetricsRequest::_internal_set_aggregation(::common::Aggregation value) {
  
  aggregation_ = value;
}
inline void GetDeviceMetricsRequest::set_aggregation(::common::Aggregation value) {
  _internal_set_aggregation(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceMetricsRequest.aggregation)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetDeviceMetricsResponse

// map<string, .common.Metric> metrics = 1;
inline int GetDeviceMetricsResponse::_internal_metrics_size() const {
  return metrics_.size();
}
inline int GetDeviceMetricsResponse::metrics_size() const {
  return _internal_metrics_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >&
GetDeviceMetricsResponse::_internal_metrics() const {
  return metrics_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >&
GetDeviceMetricsResponse::metrics() const {
  // @@protoc_insertion_point(field_map:api.GetDeviceMetricsResponse.metrics)
  return _internal_metrics();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >*
GetDeviceMetricsResponse::_internal_mutable_metrics() {
  return metrics_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >*
GetDeviceMetricsResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:api.GetDeviceMetricsResponse.metrics)
  return _internal_mutable_metrics();
}

// map<string, .api.DeviceState> states = 2;
inline int GetDeviceMetricsResponse::_internal_states_size() const {
  return states_.size();
}
inline int GetDeviceMetricsResponse::states_size() const {
  return _internal_states_size();
}
inline void GetDeviceMetricsResponse::clear_states() {
  states_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >&
GetDeviceMetricsResponse::_internal_states() const {
  return states_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >&
GetDeviceMetricsResponse::states() const {
  // @@protoc_insertion_point(field_map:api.GetDeviceMetricsResponse.states)
  return _internal_states();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >*
GetDeviceMetricsResponse::_internal_mutable_states() {
  return states_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >*
GetDeviceMetricsResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_map:api.GetDeviceMetricsResponse.states)
  return _internal_mutable_states();
}

// -------------------------------------------------------------------

// DeviceState

// string name = 2;
inline void DeviceState::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceState::name() const {
  // @@protoc_insertion_point(field_get:api.DeviceState.name)
  return _internal_name();
}
inline void DeviceState::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:api.DeviceState.name)
}
inline std::string* DeviceState::mutable_name() {
  // @@protoc_insertion_point(field_mutable:api.DeviceState.name)
  return _internal_mutable_name();
}
inline const std::string& DeviceState::_internal_name() const {
  return name_.Get();
}
inline void DeviceState::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceState::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceState.name)
}
inline void DeviceState::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceState.name)
}
inline void DeviceState::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceState.name)
}
inline std::string* DeviceState::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceState::release_name() {
  // @@protoc_insertion_point(field_release:api.DeviceState.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceState.name)
}
inline std::string* DeviceState::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceState.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceState::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceState.name)
}

// string value = 3;
inline void DeviceState::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceState::value() const {
  // @@protoc_insertion_point(field_get:api.DeviceState.value)
  return _internal_value();
}
inline void DeviceState::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:api.DeviceState.value)
}
inline std::string* DeviceState::mutable_value() {
  // @@protoc_insertion_point(field_mutable:api.DeviceState.value)
  return _internal_mutable_value();
}
inline const std::string& DeviceState::_internal_value() const {
  return value_.Get();
}
inline void DeviceState::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceState::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceState.value)
}
inline void DeviceState::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceState.value)
}
inline void DeviceState::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceState.value)
}
inline std::string* DeviceState::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceState::release_value() {
  // @@protoc_insertion_point(field_release:api.DeviceState.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceState::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceState.value)
}
inline std::string* DeviceState::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceState.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceState::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceState.value)
}

// -------------------------------------------------------------------

// GetDeviceLinkMetricsRequest

// string dev_eui = 1;
inline void GetDeviceLinkMetricsRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceLinkMetricsRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsRequest.dev_eui)
  return _internal_dev_eui();
}
inline void GetDeviceLinkMetricsRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceLinkMetricsRequest.dev_eui)
}
inline std::string* GetDeviceLinkMetricsRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceLinkMetricsRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& GetDeviceLinkMetricsRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void GetDeviceLinkMetricsRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceLinkMetricsRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetDeviceLinkMetricsRequest.dev_eui)
}
inline void GetDeviceLinkMetricsRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetDeviceLinkMetricsRequest.dev_eui)
}
inline void GetDeviceLinkMetricsRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetDeviceLinkMetricsRequest.dev_eui)
}
inline std::string* GetDeviceLinkMetricsRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceLinkMetricsRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.GetDeviceLinkMetricsRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceLinkMetricsRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceLinkMetricsRequest.dev_eui)
}
inline std::string* GetDeviceLinkMetricsRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.GetDeviceLinkMetricsRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceLinkMetricsRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceLinkMetricsRequest.dev_eui)
}

// .google.protobuf.Timestamp start = 2;
inline bool GetDeviceLinkMetricsRequest::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool GetDeviceLinkMetricsRequest::has_start() const {
  return _internal_has_start();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceLinkMetricsRequest::_internal_start() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceLinkMetricsRequest::start() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsRequest.start)
  return _internal_start();
}
inline void GetDeviceLinkMetricsRequest::unsafe_arena_set_allocated_start(
    PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceLinkMetricsRequest.start)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceLinkMetricsRequest::release_start() {
  auto temp = unsafe_arena_release_start();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceLinkMetricsRequest::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:api.GetDeviceLinkMetricsRequest.start)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceLinkMetricsRequest::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_ = p;
  }
  return start_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceLinkMetricsRequest::mutable_start() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceLinkMetricsRequest.start)
  return _internal_mutable_start();
}
inline void GetDeviceLinkMetricsRequest::set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceLinkMetricsRequest.start)
}

// .google.protobuf.Timestamp end = 3;
inline bool GetDeviceLinkMetricsRequest::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool GetDeviceLinkMetricsRequest::has_end() const {
  return _internal_has_end();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceLinkMetricsRequest::_internal_end() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetDeviceLinkMetricsRequest::end() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsRequest.end)
  return _internal_end();
}
inline void GetDeviceLinkMetricsRequest::unsafe_arena_set_allocated_end(
    PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceLinkMetricsRequest.end)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceLinkMetricsRequest::release_end() {
  auto temp = unsafe_arena_release_end();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceLinkMetricsRequest::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:api.GetDeviceLinkMetricsRequest.end)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceLinkMetricsRequest::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_ = p;
  }
  return end_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetDeviceLinkMetricsRequest::mutable_end() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceLinkMetricsRequest.end)
  return _internal_mutable_end();
}
inline void GetDeviceLinkMetricsRequest::set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceLinkMetricsRequest.end)
}

// .common.Aggregation aggregation = 4;
inline void GetDeviceLinkMetricsRequest::clear_aggregation() {
  aggregation_ = 0;
}
inline ::common::Aggregation GetDeviceLinkMetricsRequest::_internal_aggregation() const {
  return static_cast< ::common::Aggregation >(aggregation_);
}
inline ::common::Aggregation GetDeviceLinkMetricsRequest::aggregation() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsRequest.aggregation)
  return _internal_aggregation();
}
inline void GetDeviceLinkMetricsRequest::_internal_set_aggregation(::common::Aggregation value) {
  
  aggregation_ = value;
}
inline void GetDeviceLinkMetricsRequest::set_aggregation(::common::Aggregation value) {
  _internal_set_aggregation(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceLinkMetricsRequest.aggregation)
}

// -------------------------------------------------------------------

// GetDeviceLinkMetricsResponse

// .common.Metric rx_packets = 1;
inline bool GetDeviceLinkMetricsResponse::_internal_has_rx_packets() const {
  return this != internal_default_instance() && rx_packets_ != nullptr;
}
inline bool GetDeviceLinkMetricsResponse::has_rx_packets() const {
  return _internal_has_rx_packets();
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::_internal_rx_packets() const {
  const ::common::Metric* p = rx_packets_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Metric*>(
      &::common::_Metric_default_instance_);
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::rx_packets() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsResponse.rx_packets)
  return _internal_rx_packets();
}
inline void GetDeviceLinkMetricsResponse::unsafe_arena_set_allocated_rx_packets(
    ::common::Metric* rx_packets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_packets_);
  }
  rx_packets_ = rx_packets;
  if (rx_packets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceLinkMetricsResponse.rx_packets)
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::release_rx_packets() {
  auto temp = unsafe_arena_release_rx_packets();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::unsafe_arena_release_rx_packets() {
  // @@protoc_insertion_point(field_release:api.GetDeviceLinkMetricsResponse.rx_packets)
  
  ::common::Metric* temp = rx_packets_;
  rx_packets_ = nullptr;
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::_internal_mutable_rx_packets() {
  
  if (rx_packets_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Metric>(GetArena());
    rx_packets_ = p;
  }
  return rx_packets_;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::mutable_rx_packets() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceLinkMetricsResponse.rx_packets)
  return _internal_mutable_rx_packets();
}
inline void GetDeviceLinkMetricsResponse::set_allocated_rx_packets(::common::Metric* rx_packets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_packets_);
  }
  if (rx_packets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_packets)->GetArena();
    if (message_arena != submessage_arena) {
      rx_packets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rx_packets, submessage_arena);
    }
    
  } else {
    
  }
  rx_packets_ = rx_packets;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceLinkMetricsResponse.rx_packets)
}

// .common.Metric gw_rssi = 2;
inline bool GetDeviceLinkMetricsResponse::_internal_has_gw_rssi() const {
  return this != internal_default_instance() && gw_rssi_ != nullptr;
}
inline bool GetDeviceLinkMetricsResponse::has_gw_rssi() const {
  return _internal_has_gw_rssi();
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::_internal_gw_rssi() const {
  const ::common::Metric* p = gw_rssi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Metric*>(
      &::common::_Metric_default_instance_);
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::gw_rssi() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsResponse.gw_rssi)
  return _internal_gw_rssi();
}
inline void GetDeviceLinkMetricsResponse::unsafe_arena_set_allocated_gw_rssi(
    ::common::Metric* gw_rssi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gw_rssi_);
  }
  gw_rssi_ = gw_rssi;
  if (gw_rssi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceLinkMetricsResponse.gw_rssi)
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::release_gw_rssi() {
  auto temp = unsafe_arena_release_gw_rssi();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::unsafe_arena_release_gw_rssi() {
  // @@protoc_insertion_point(field_release:api.GetDeviceLinkMetricsResponse.gw_rssi)
  
  ::common::Metric* temp = gw_rssi_;
  gw_rssi_ = nullptr;
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::_internal_mutable_gw_rssi() {
  
  if (gw_rssi_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Metric>(GetArena());
    gw_rssi_ = p;
  }
  return gw_rssi_;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::mutable_gw_rssi() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceLinkMetricsResponse.gw_rssi)
  return _internal_mutable_gw_rssi();
}
inline void GetDeviceLinkMetricsResponse::set_allocated_gw_rssi(::common::Metric* gw_rssi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gw_rssi_);
  }
  if (gw_rssi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gw_rssi)->GetArena();
    if (message_arena != submessage_arena) {
      gw_rssi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gw_rssi, submessage_arena);
    }
    
  } else {
    
  }
  gw_rssi_ = gw_rssi;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceLinkMetricsResponse.gw_rssi)
}

// .common.Metric gw_snr = 3;
inline bool GetDeviceLinkMetricsResponse::_internal_has_gw_snr() const {
  return this != internal_default_instance() && gw_snr_ != nullptr;
}
inline bool GetDeviceLinkMetricsResponse::has_gw_snr() const {
  return _internal_has_gw_snr();
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::_internal_gw_snr() const {
  const ::common::Metric* p = gw_snr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Metric*>(
      &::common::_Metric_default_instance_);
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::gw_snr() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsResponse.gw_snr)
  return _internal_gw_snr();
}
inline void GetDeviceLinkMetricsResponse::unsafe_arena_set_allocated_gw_snr(
    ::common::Metric* gw_snr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gw_snr_);
  }
  gw_snr_ = gw_snr;
  if (gw_snr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceLinkMetricsResponse.gw_snr)
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::release_gw_snr() {
  auto temp = unsafe_arena_release_gw_snr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::unsafe_arena_release_gw_snr() {
  // @@protoc_insertion_point(field_release:api.GetDeviceLinkMetricsResponse.gw_snr)
  
  ::common::Metric* temp = gw_snr_;
  gw_snr_ = nullptr;
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::_internal_mutable_gw_snr() {
  
  if (gw_snr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Metric>(GetArena());
    gw_snr_ = p;
  }
  return gw_snr_;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::mutable_gw_snr() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceLinkMetricsResponse.gw_snr)
  return _internal_mutable_gw_snr();
}
inline void GetDeviceLinkMetricsResponse::set_allocated_gw_snr(::common::Metric* gw_snr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gw_snr_);
  }
  if (gw_snr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gw_snr)->GetArena();
    if (message_arena != submessage_arena) {
      gw_snr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gw_snr, submessage_arena);
    }
    
  } else {
    
  }
  gw_snr_ = gw_snr;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceLinkMetricsResponse.gw_snr)
}

// .common.Metric rx_packets_per_freq = 4;
inline bool GetDeviceLinkMetricsResponse::_internal_has_rx_packets_per_freq() const {
  return this != internal_default_instance() && rx_packets_per_freq_ != nullptr;
}
inline bool GetDeviceLinkMetricsResponse::has_rx_packets_per_freq() const {
  return _internal_has_rx_packets_per_freq();
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::_internal_rx_packets_per_freq() const {
  const ::common::Metric* p = rx_packets_per_freq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Metric*>(
      &::common::_Metric_default_instance_);
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::rx_packets_per_freq() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsResponse.rx_packets_per_freq)
  return _internal_rx_packets_per_freq();
}
inline void GetDeviceLinkMetricsResponse::unsafe_arena_set_allocated_rx_packets_per_freq(
    ::common::Metric* rx_packets_per_freq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_packets_per_freq_);
  }
  rx_packets_per_freq_ = rx_packets_per_freq;
  if (rx_packets_per_freq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceLinkMetricsResponse.rx_packets_per_freq)
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::release_rx_packets_per_freq() {
  auto temp = unsafe_arena_release_rx_packets_per_freq();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::unsafe_arena_release_rx_packets_per_freq() {
  // @@protoc_insertion_point(field_release:api.GetDeviceLinkMetricsResponse.rx_packets_per_freq)
  
  ::common::Metric* temp = rx_packets_per_freq_;
  rx_packets_per_freq_ = nullptr;
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::_internal_mutable_rx_packets_per_freq() {
  
  if (rx_packets_per_freq_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Metric>(GetArena());
    rx_packets_per_freq_ = p;
  }
  return rx_packets_per_freq_;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::mutable_rx_packets_per_freq() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceLinkMetricsResponse.rx_packets_per_freq)
  return _internal_mutable_rx_packets_per_freq();
}
inline void GetDeviceLinkMetricsResponse::set_allocated_rx_packets_per_freq(::common::Metric* rx_packets_per_freq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_packets_per_freq_);
  }
  if (rx_packets_per_freq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_packets_per_freq)->GetArena();
    if (message_arena != submessage_arena) {
      rx_packets_per_freq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rx_packets_per_freq, submessage_arena);
    }
    
  } else {
    
  }
  rx_packets_per_freq_ = rx_packets_per_freq;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceLinkMetricsResponse.rx_packets_per_freq)
}

// .common.Metric rx_packets_per_dr = 5;
inline bool GetDeviceLinkMetricsResponse::_internal_has_rx_packets_per_dr() const {
  return this != internal_default_instance() && rx_packets_per_dr_ != nullptr;
}
inline bool GetDeviceLinkMetricsResponse::has_rx_packets_per_dr() const {
  return _internal_has_rx_packets_per_dr();
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::_internal_rx_packets_per_dr() const {
  const ::common::Metric* p = rx_packets_per_dr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Metric*>(
      &::common::_Metric_default_instance_);
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::rx_packets_per_dr() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsResponse.rx_packets_per_dr)
  return _internal_rx_packets_per_dr();
}
inline void GetDeviceLinkMetricsResponse::unsafe_arena_set_allocated_rx_packets_per_dr(
    ::common::Metric* rx_packets_per_dr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_packets_per_dr_);
  }
  rx_packets_per_dr_ = rx_packets_per_dr;
  if (rx_packets_per_dr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceLinkMetricsResponse.rx_packets_per_dr)
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::release_rx_packets_per_dr() {
  auto temp = unsafe_arena_release_rx_packets_per_dr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::unsafe_arena_release_rx_packets_per_dr() {
  // @@protoc_insertion_point(field_release:api.GetDeviceLinkMetricsResponse.rx_packets_per_dr)
  
  ::common::Metric* temp = rx_packets_per_dr_;
  rx_packets_per_dr_ = nullptr;
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::_internal_mutable_rx_packets_per_dr() {
  
  if (rx_packets_per_dr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Metric>(GetArena());
    rx_packets_per_dr_ = p;
  }
  return rx_packets_per_dr_;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::mutable_rx_packets_per_dr() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceLinkMetricsResponse.rx_packets_per_dr)
  return _internal_mutable_rx_packets_per_dr();
}
inline void GetDeviceLinkMetricsResponse::set_allocated_rx_packets_per_dr(::common::Metric* rx_packets_per_dr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_packets_per_dr_);
  }
  if (rx_packets_per_dr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_packets_per_dr)->GetArena();
    if (message_arena != submessage_arena) {
      rx_packets_per_dr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rx_packets_per_dr, submessage_arena);
    }
    
  } else {
    
  }
  rx_packets_per_dr_ = rx_packets_per_dr;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceLinkMetricsResponse.rx_packets_per_dr)
}

// .common.Metric errors = 6;
inline bool GetDeviceLinkMetricsResponse::_internal_has_errors() const {
  return this != internal_default_instance() && errors_ != nullptr;
}
inline bool GetDeviceLinkMetricsResponse::has_errors() const {
  return _internal_has_errors();
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::_internal_errors() const {
  const ::common::Metric* p = errors_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Metric*>(
      &::common::_Metric_default_instance_);
}
inline const ::common::Metric& GetDeviceLinkMetricsResponse::errors() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceLinkMetricsResponse.errors)
  return _internal_errors();
}
inline void GetDeviceLinkMetricsResponse::unsafe_arena_set_allocated_errors(
    ::common::Metric* errors) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errors_);
  }
  errors_ = errors;
  if (errors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceLinkMetricsResponse.errors)
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::release_errors() {
  auto temp = unsafe_arena_release_errors();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::unsafe_arena_release_errors() {
  // @@protoc_insertion_point(field_release:api.GetDeviceLinkMetricsResponse.errors)
  
  ::common::Metric* temp = errors_;
  errors_ = nullptr;
  return temp;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::_internal_mutable_errors() {
  
  if (errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Metric>(GetArena());
    errors_ = p;
  }
  return errors_;
}
inline ::common::Metric* GetDeviceLinkMetricsResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceLinkMetricsResponse.errors)
  return _internal_mutable_errors();
}
inline void GetDeviceLinkMetricsResponse::set_allocated_errors(::common::Metric* errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(errors_);
  }
  if (errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errors)->GetArena();
    if (message_arena != submessage_arena) {
      errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errors, submessage_arena);
    }
    
  } else {
    
  }
  errors_ = errors;
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceLinkMetricsResponse.errors)
}

// -------------------------------------------------------------------

// DeviceQueueItem

// string id = 1;
inline void DeviceQueueItem::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceQueueItem::id() const {
  // @@protoc_insertion_point(field_get:api.DeviceQueueItem.id)
  return _internal_id();
}
inline void DeviceQueueItem::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.DeviceQueueItem.id)
}
inline std::string* DeviceQueueItem::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.DeviceQueueItem.id)
  return _internal_mutable_id();
}
inline const std::string& DeviceQueueItem::_internal_id() const {
  return id_.Get();
}
inline void DeviceQueueItem::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceQueueItem::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceQueueItem.id)
}
inline void DeviceQueueItem::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceQueueItem.id)
}
inline void DeviceQueueItem::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceQueueItem.id)
}
inline std::string* DeviceQueueItem::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceQueueItem::release_id() {
  // @@protoc_insertion_point(field_release:api.DeviceQueueItem.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceQueueItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceQueueItem.id)
}
inline std::string* DeviceQueueItem::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceQueueItem.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceQueueItem::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceQueueItem.id)
}

// string dev_eui = 2;
inline void DeviceQueueItem::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceQueueItem::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.DeviceQueueItem.dev_eui)
  return _internal_dev_eui();
}
inline void DeviceQueueItem::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.DeviceQueueItem.dev_eui)
}
inline std::string* DeviceQueueItem::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.DeviceQueueItem.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& DeviceQueueItem::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void DeviceQueueItem::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceQueueItem::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceQueueItem.dev_eui)
}
inline void DeviceQueueItem::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceQueueItem.dev_eui)
}
inline void DeviceQueueItem::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceQueueItem.dev_eui)
}
inline std::string* DeviceQueueItem::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceQueueItem::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.DeviceQueueItem.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceQueueItem::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceQueueItem.dev_eui)
}
inline std::string* DeviceQueueItem::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceQueueItem.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceQueueItem::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceQueueItem.dev_eui)
}

// bool confirmed = 3;
inline void DeviceQueueItem::clear_confirmed() {
  confirmed_ = false;
}
inline bool DeviceQueueItem::_internal_confirmed() const {
  return confirmed_;
}
inline bool DeviceQueueItem::confirmed() const {
  // @@protoc_insertion_point(field_get:api.DeviceQueueItem.confirmed)
  return _internal_confirmed();
}
inline void DeviceQueueItem::_internal_set_confirmed(bool value) {
  
  confirmed_ = value;
}
inline void DeviceQueueItem::set_confirmed(bool value) {
  _internal_set_confirmed(value);
  // @@protoc_insertion_point(field_set:api.DeviceQueueItem.confirmed)
}

// uint32 f_port = 4;
inline void DeviceQueueItem::clear_f_port() {
  f_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceQueueItem::_internal_f_port() const {
  return f_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceQueueItem::f_port() const {
  // @@protoc_insertion_point(field_get:api.DeviceQueueItem.f_port)
  return _internal_f_port();
}
inline void DeviceQueueItem::_internal_set_f_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  f_port_ = value;
}
inline void DeviceQueueItem::set_f_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f_port(value);
  // @@protoc_insertion_point(field_set:api.DeviceQueueItem.f_port)
}

// bytes data = 5;
inline void DeviceQueueItem::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceQueueItem::data() const {
  // @@protoc_insertion_point(field_get:api.DeviceQueueItem.data)
  return _internal_data();
}
inline void DeviceQueueItem::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:api.DeviceQueueItem.data)
}
inline std::string* DeviceQueueItem::mutable_data() {
  // @@protoc_insertion_point(field_mutable:api.DeviceQueueItem.data)
  return _internal_mutable_data();
}
inline const std::string& DeviceQueueItem::_internal_data() const {
  return data_.Get();
}
inline void DeviceQueueItem::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceQueueItem::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DeviceQueueItem.data)
}
inline void DeviceQueueItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.DeviceQueueItem.data)
}
inline void DeviceQueueItem::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DeviceQueueItem.data)
}
inline std::string* DeviceQueueItem::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceQueueItem::release_data() {
  // @@protoc_insertion_point(field_release:api.DeviceQueueItem.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceQueueItem::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DeviceQueueItem.data)
}
inline std::string* DeviceQueueItem::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.DeviceQueueItem.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceQueueItem::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceQueueItem.data)
}

// .google.protobuf.Struct object = 6;
inline bool DeviceQueueItem::_internal_has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline bool DeviceQueueItem::has_object() const {
  return _internal_has_object();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DeviceQueueItem::_internal_object() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = object_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DeviceQueueItem::object() const {
  // @@protoc_insertion_point(field_get:api.DeviceQueueItem.object)
  return _internal_object();
}
inline void DeviceQueueItem::unsafe_arena_set_allocated_object(
    PROTOBUF_NAMESPACE_ID::Struct* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DeviceQueueItem.object)
}
inline PROTOBUF_NAMESPACE_ID::Struct* DeviceQueueItem::release_object() {
  auto temp = unsafe_arena_release_object();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DeviceQueueItem::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:api.DeviceQueueItem.object)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = object_;
  object_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DeviceQueueItem::_internal_mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    object_ = p;
  }
  return object_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DeviceQueueItem::mutable_object() {
  // @@protoc_insertion_point(field_mutable:api.DeviceQueueItem.object)
  return _internal_mutable_object();
}
inline void DeviceQueueItem::set_allocated_object(PROTOBUF_NAMESPACE_ID::Struct* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:api.DeviceQueueItem.object)
}

// bool is_pending = 7;
inline void DeviceQueueItem::clear_is_pending() {
  is_pending_ = false;
}
inline bool DeviceQueueItem::_internal_is_pending() const {
  return is_pending_;
}
inline bool DeviceQueueItem::is_pending() const {
  // @@protoc_insertion_point(field_get:api.DeviceQueueItem.is_pending)
  return _internal_is_pending();
}
inline void DeviceQueueItem::_internal_set_is_pending(bool value) {
  
  is_pending_ = value;
}
inline void DeviceQueueItem::set_is_pending(bool value) {
  _internal_set_is_pending(value);
  // @@protoc_insertion_point(field_set:api.DeviceQueueItem.is_pending)
}

// uint32 f_cnt_down = 8;
inline void DeviceQueueItem::clear_f_cnt_down() {
  f_cnt_down_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceQueueItem::_internal_f_cnt_down() const {
  return f_cnt_down_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceQueueItem::f_cnt_down() const {
  // @@protoc_insertion_point(field_get:api.DeviceQueueItem.f_cnt_down)
  return _internal_f_cnt_down();
}
inline void DeviceQueueItem::_internal_set_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  f_cnt_down_ = value;
}
inline void DeviceQueueItem::set_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f_cnt_down(value);
  // @@protoc_insertion_point(field_set:api.DeviceQueueItem.f_cnt_down)
}

// bool is_encrypted = 9;
inline void DeviceQueueItem::clear_is_encrypted() {
  is_encrypted_ = false;
}
inline bool DeviceQueueItem::_internal_is_encrypted() const {
  return is_encrypted_;
}
inline bool DeviceQueueItem::is_encrypted() const {
  // @@protoc_insertion_point(field_get:api.DeviceQueueItem.is_encrypted)
  return _internal_is_encrypted();
}
inline void DeviceQueueItem::_internal_set_is_encrypted(bool value) {
  
  is_encrypted_ = value;
}
inline void DeviceQueueItem::set_is_encrypted(bool value) {
  _internal_set_is_encrypted(value);
  // @@protoc_insertion_point(field_set:api.DeviceQueueItem.is_encrypted)
}

// -------------------------------------------------------------------

// EnqueueDeviceQueueItemRequest

// .api.DeviceQueueItem queue_item = 1;
inline bool EnqueueDeviceQueueItemRequest::_internal_has_queue_item() const {
  return this != internal_default_instance() && queue_item_ != nullptr;
}
inline bool EnqueueDeviceQueueItemRequest::has_queue_item() const {
  return _internal_has_queue_item();
}
inline void EnqueueDeviceQueueItemRequest::clear_queue_item() {
  if (GetArena() == nullptr && queue_item_ != nullptr) {
    delete queue_item_;
  }
  queue_item_ = nullptr;
}
inline const ::api::DeviceQueueItem& EnqueueDeviceQueueItemRequest::_internal_queue_item() const {
  const ::api::DeviceQueueItem* p = queue_item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::DeviceQueueItem*>(
      &::api::_DeviceQueueItem_default_instance_);
}
inline const ::api::DeviceQueueItem& EnqueueDeviceQueueItemRequest::queue_item() const {
  // @@protoc_insertion_point(field_get:api.EnqueueDeviceQueueItemRequest.queue_item)
  return _internal_queue_item();
}
inline void EnqueueDeviceQueueItemRequest::unsafe_arena_set_allocated_queue_item(
    ::api::DeviceQueueItem* queue_item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queue_item_);
  }
  queue_item_ = queue_item;
  if (queue_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.EnqueueDeviceQueueItemRequest.queue_item)
}
inline ::api::DeviceQueueItem* EnqueueDeviceQueueItemRequest::release_queue_item() {
  auto temp = unsafe_arena_release_queue_item();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::DeviceQueueItem* EnqueueDeviceQueueItemRequest::unsafe_arena_release_queue_item() {
  // @@protoc_insertion_point(field_release:api.EnqueueDeviceQueueItemRequest.queue_item)
  
  ::api::DeviceQueueItem* temp = queue_item_;
  queue_item_ = nullptr;
  return temp;
}
inline ::api::DeviceQueueItem* EnqueueDeviceQueueItemRequest::_internal_mutable_queue_item() {
  
  if (queue_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::DeviceQueueItem>(GetArena());
    queue_item_ = p;
  }
  return queue_item_;
}
inline ::api::DeviceQueueItem* EnqueueDeviceQueueItemRequest::mutable_queue_item() {
  // @@protoc_insertion_point(field_mutable:api.EnqueueDeviceQueueItemRequest.queue_item)
  return _internal_mutable_queue_item();
}
inline void EnqueueDeviceQueueItemRequest::set_allocated_queue_item(::api::DeviceQueueItem* queue_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete queue_item_;
  }
  if (queue_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(queue_item);
    if (message_arena != submessage_arena) {
      queue_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_item, submessage_arena);
    }
    
  } else {
    
  }
  queue_item_ = queue_item;
  // @@protoc_insertion_point(field_set_allocated:api.EnqueueDeviceQueueItemRequest.queue_item)
}

// -------------------------------------------------------------------

// EnqueueDeviceQueueItemResponse

// string id = 1;
inline void EnqueueDeviceQueueItemResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnqueueDeviceQueueItemResponse::id() const {
  // @@protoc_insertion_point(field_get:api.EnqueueDeviceQueueItemResponse.id)
  return _internal_id();
}
inline void EnqueueDeviceQueueItemResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.EnqueueDeviceQueueItemResponse.id)
}
inline std::string* EnqueueDeviceQueueItemResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.EnqueueDeviceQueueItemResponse.id)
  return _internal_mutable_id();
}
inline const std::string& EnqueueDeviceQueueItemResponse::_internal_id() const {
  return id_.Get();
}
inline void EnqueueDeviceQueueItemResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnqueueDeviceQueueItemResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.EnqueueDeviceQueueItemResponse.id)
}
inline void EnqueueDeviceQueueItemResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.EnqueueDeviceQueueItemResponse.id)
}
inline void EnqueueDeviceQueueItemResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.EnqueueDeviceQueueItemResponse.id)
}
inline std::string* EnqueueDeviceQueueItemResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnqueueDeviceQueueItemResponse::release_id() {
  // @@protoc_insertion_point(field_release:api.EnqueueDeviceQueueItemResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnqueueDeviceQueueItemResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.EnqueueDeviceQueueItemResponse.id)
}
inline std::string* EnqueueDeviceQueueItemResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.EnqueueDeviceQueueItemResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EnqueueDeviceQueueItemResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.EnqueueDeviceQueueItemResponse.id)
}

// -------------------------------------------------------------------

// FlushDeviceQueueRequest

// string dev_eui = 1;
inline void FlushDeviceQueueRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlushDeviceQueueRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.FlushDeviceQueueRequest.dev_eui)
  return _internal_dev_eui();
}
inline void FlushDeviceQueueRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.FlushDeviceQueueRequest.dev_eui)
}
inline std::string* FlushDeviceQueueRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.FlushDeviceQueueRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& FlushDeviceQueueRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void FlushDeviceQueueRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlushDeviceQueueRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.FlushDeviceQueueRequest.dev_eui)
}
inline void FlushDeviceQueueRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.FlushDeviceQueueRequest.dev_eui)
}
inline void FlushDeviceQueueRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.FlushDeviceQueueRequest.dev_eui)
}
inline std::string* FlushDeviceQueueRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlushDeviceQueueRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.FlushDeviceQueueRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlushDeviceQueueRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.FlushDeviceQueueRequest.dev_eui)
}
inline std::string* FlushDeviceQueueRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.FlushDeviceQueueRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlushDeviceQueueRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.FlushDeviceQueueRequest.dev_eui)
}

// -------------------------------------------------------------------

// GetDeviceQueueItemsRequest

// string dev_eui = 1;
inline void GetDeviceQueueItemsRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceQueueItemsRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceQueueItemsRequest.dev_eui)
  return _internal_dev_eui();
}
inline void GetDeviceQueueItemsRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceQueueItemsRequest.dev_eui)
}
inline std::string* GetDeviceQueueItemsRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceQueueItemsRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& GetDeviceQueueItemsRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void GetDeviceQueueItemsRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceQueueItemsRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetDeviceQueueItemsRequest.dev_eui)
}
inline void GetDeviceQueueItemsRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetDeviceQueueItemsRequest.dev_eui)
}
inline void GetDeviceQueueItemsRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetDeviceQueueItemsRequest.dev_eui)
}
inline std::string* GetDeviceQueueItemsRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceQueueItemsRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.GetDeviceQueueItemsRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceQueueItemsRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceQueueItemsRequest.dev_eui)
}
inline std::string* GetDeviceQueueItemsRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.GetDeviceQueueItemsRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceQueueItemsRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceQueueItemsRequest.dev_eui)
}

// bool count_only = 2;
inline void GetDeviceQueueItemsRequest::clear_count_only() {
  count_only_ = false;
}
inline bool GetDeviceQueueItemsRequest::_internal_count_only() const {
  return count_only_;
}
inline bool GetDeviceQueueItemsRequest::count_only() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceQueueItemsRequest.count_only)
  return _internal_count_only();
}
inline void GetDeviceQueueItemsRequest::_internal_set_count_only(bool value) {
  
  count_only_ = value;
}
inline void GetDeviceQueueItemsRequest::set_count_only(bool value) {
  _internal_set_count_only(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceQueueItemsRequest.count_only)
}

// -------------------------------------------------------------------

// GetDeviceQueueItemsResponse

// uint32 total_count = 1;
inline void GetDeviceQueueItemsResponse::clear_total_count() {
  total_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceQueueItemsResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceQueueItemsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceQueueItemsResponse.total_count)
  return _internal_total_count();
}
inline void GetDeviceQueueItemsResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_count_ = value;
}
inline void GetDeviceQueueItemsResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceQueueItemsResponse.total_count)
}

// repeated .api.DeviceQueueItem result = 2;
inline int GetDeviceQueueItemsResponse::_internal_result_size() const {
  return result_.size();
}
inline int GetDeviceQueueItemsResponse::result_size() const {
  return _internal_result_size();
}
inline void GetDeviceQueueItemsResponse::clear_result() {
  result_.Clear();
}
inline ::api::DeviceQueueItem* GetDeviceQueueItemsResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceQueueItemsResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceQueueItem >*
GetDeviceQueueItemsResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:api.GetDeviceQueueItemsResponse.result)
  return &result_;
}
inline const ::api::DeviceQueueItem& GetDeviceQueueItemsResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::api::DeviceQueueItem& GetDeviceQueueItemsResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:api.GetDeviceQueueItemsResponse.result)
  return _internal_result(index);
}
inline ::api::DeviceQueueItem* GetDeviceQueueItemsResponse::_internal_add_result() {
  return result_.Add();
}
inline ::api::DeviceQueueItem* GetDeviceQueueItemsResponse::add_result() {
  // @@protoc_insertion_point(field_add:api.GetDeviceQueueItemsResponse.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::DeviceQueueItem >&
GetDeviceQueueItemsResponse::result() const {
  // @@protoc_insertion_point(field_list:api.GetDeviceQueueItemsResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// FlushDevNoncesRequest

// string dev_eui = 1;
inline void FlushDevNoncesRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlushDevNoncesRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.FlushDevNoncesRequest.dev_eui)
  return _internal_dev_eui();
}
inline void FlushDevNoncesRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.FlushDevNoncesRequest.dev_eui)
}
inline std::string* FlushDevNoncesRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.FlushDevNoncesRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& FlushDevNoncesRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void FlushDevNoncesRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlushDevNoncesRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.FlushDevNoncesRequest.dev_eui)
}
inline void FlushDevNoncesRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.FlushDevNoncesRequest.dev_eui)
}
inline void FlushDevNoncesRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.FlushDevNoncesRequest.dev_eui)
}
inline std::string* FlushDevNoncesRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlushDevNoncesRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.FlushDevNoncesRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlushDevNoncesRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.FlushDevNoncesRequest.dev_eui)
}
inline std::string* FlushDevNoncesRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.FlushDevNoncesRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlushDevNoncesRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.FlushDevNoncesRequest.dev_eui)
}

// -------------------------------------------------------------------

// GetDeviceNextFCntDownRequest

// string dev_eui = 1;
inline void GetDeviceNextFCntDownRequest::clear_dev_eui() {
  dev_eui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceNextFCntDownRequest::dev_eui() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceNextFCntDownRequest.dev_eui)
  return _internal_dev_eui();
}
inline void GetDeviceNextFCntDownRequest::set_dev_eui(const std::string& value) {
  _internal_set_dev_eui(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceNextFCntDownRequest.dev_eui)
}
inline std::string* GetDeviceNextFCntDownRequest::mutable_dev_eui() {
  // @@protoc_insertion_point(field_mutable:api.GetDeviceNextFCntDownRequest.dev_eui)
  return _internal_mutable_dev_eui();
}
inline const std::string& GetDeviceNextFCntDownRequest::_internal_dev_eui() const {
  return dev_eui_.Get();
}
inline void GetDeviceNextFCntDownRequest::_internal_set_dev_eui(const std::string& value) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceNextFCntDownRequest::set_dev_eui(std::string&& value) {
  
  dev_eui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetDeviceNextFCntDownRequest.dev_eui)
}
inline void GetDeviceNextFCntDownRequest::set_dev_eui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetDeviceNextFCntDownRequest.dev_eui)
}
inline void GetDeviceNextFCntDownRequest::set_dev_eui(const char* value,
    size_t size) {
  
  dev_eui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetDeviceNextFCntDownRequest.dev_eui)
}
inline std::string* GetDeviceNextFCntDownRequest::_internal_mutable_dev_eui() {
  
  return dev_eui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceNextFCntDownRequest::release_dev_eui() {
  // @@protoc_insertion_point(field_release:api.GetDeviceNextFCntDownRequest.dev_eui)
  return dev_eui_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceNextFCntDownRequest::set_allocated_dev_eui(std::string* dev_eui) {
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_eui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetDeviceNextFCntDownRequest.dev_eui)
}
inline std::string* GetDeviceNextFCntDownRequest::unsafe_arena_release_dev_eui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.GetDeviceNextFCntDownRequest.dev_eui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dev_eui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceNextFCntDownRequest::unsafe_arena_set_allocated_dev_eui(
    std::string* dev_eui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dev_eui != nullptr) {
    
  } else {
    
  }
  dev_eui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dev_eui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetDeviceNextFCntDownRequest.dev_eui)
}

// -------------------------------------------------------------------

// GetDeviceNextFCntDownResponse

// uint32 f_cnt_down = 1;
inline void GetDeviceNextFCntDownResponse::clear_f_cnt_down() {
  f_cnt_down_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceNextFCntDownResponse::_internal_f_cnt_down() const {
  return f_cnt_down_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceNextFCntDownResponse::f_cnt_down() const {
  // @@protoc_insertion_point(field_get:api.GetDeviceNextFCntDownResponse.f_cnt_down)
  return _internal_f_cnt_down();
}
inline void GetDeviceNextFCntDownResponse::_internal_set_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  f_cnt_down_ = value;
}
inline void GetDeviceNextFCntDownResponse::set_f_cnt_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f_cnt_down(value);
  // @@protoc_insertion_point(field_set:api.GetDeviceNextFCntDownResponse.f_cnt_down)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2fdevice_2eproto
