// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/device.proto

#include "device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace api {
PROTOBUF_CONSTEXPR Device_VariablesEntry_DoNotUse::Device_VariablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Device_VariablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Device_VariablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Device_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Device_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Device_VariablesEntry_DoNotUseDefaultTypeInternal _Device_VariablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Device_TagsEntry_DoNotUse::Device_TagsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Device_TagsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Device_TagsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Device_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Device_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Device_TagsEntry_DoNotUseDefaultTypeInternal _Device_TagsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Device::Device(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.tags_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.application_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_profile_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.join_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skip_fcnt_check_)*/false
  , /*decltype(_impl_.is_disabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDefaultTypeInternal _Device_default_instance_;
PROTOBUF_CONSTEXPR DeviceStatus::DeviceStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.margin_)*/0
  , /*decltype(_impl_.external_power_source_)*/false
  , /*decltype(_impl_.battery_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceStatusDefaultTypeInternal() {}
  union {
    DeviceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
PROTOBUF_CONSTEXPR DeviceListItem::DeviceListItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_profile_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_profile_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.last_seen_at_)*/nullptr
  , /*decltype(_impl_.device_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceListItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceListItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceListItemDefaultTypeInternal() {}
  union {
    DeviceListItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceListItemDefaultTypeInternal _DeviceListItem_default_instance_;
PROTOBUF_CONSTEXPR DeviceKeys::DeviceKeys(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nwk_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceKeysDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceKeysDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceKeysDefaultTypeInternal() {}
  union {
    DeviceKeys _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceKeysDefaultTypeInternal _DeviceKeys_default_instance_;
PROTOBUF_CONSTEXPR CreateDeviceRequest::CreateDeviceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateDeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateDeviceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateDeviceRequestDefaultTypeInternal() {}
  union {
    CreateDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateDeviceRequestDefaultTypeInternal _CreateDeviceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceRequest::GetDeviceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceRequestDefaultTypeInternal() {}
  union {
    GetDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceRequestDefaultTypeInternal _GetDeviceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceResponse::GetDeviceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.last_seen_at_)*/nullptr
  , /*decltype(_impl_.device_status_)*/nullptr
  , /*decltype(_impl_.class_enabled_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceResponseDefaultTypeInternal() {}
  union {
    GetDeviceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceResponseDefaultTypeInternal _GetDeviceResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateDeviceRequest::UpdateDeviceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateDeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDeviceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDeviceRequestDefaultTypeInternal() {}
  union {
    UpdateDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDeviceRequestDefaultTypeInternal _UpdateDeviceRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteDeviceRequest::DeleteDeviceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteDeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteDeviceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteDeviceRequestDefaultTypeInternal() {}
  union {
    DeleteDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteDeviceRequestDefaultTypeInternal _DeleteDeviceRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDevicesRequest::ListDevicesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.search_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.application_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.multicast_group_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0u
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDevicesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDevicesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDevicesRequestDefaultTypeInternal() {}
  union {
    ListDevicesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDevicesRequestDefaultTypeInternal _ListDevicesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDevicesResponse::ListDevicesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_.total_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDevicesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDevicesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDevicesResponseDefaultTypeInternal() {}
  union {
    ListDevicesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDevicesResponseDefaultTypeInternal _ListDevicesResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateDeviceKeysRequest::CreateDeviceKeysRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_keys_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateDeviceKeysRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateDeviceKeysRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateDeviceKeysRequestDefaultTypeInternal() {}
  union {
    CreateDeviceKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateDeviceKeysRequestDefaultTypeInternal _CreateDeviceKeysRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceKeysRequest::GetDeviceKeysRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceKeysRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceKeysRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceKeysRequestDefaultTypeInternal() {}
  union {
    GetDeviceKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceKeysRequestDefaultTypeInternal _GetDeviceKeysRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceKeysResponse::GetDeviceKeysResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_keys_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceKeysResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceKeysResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceKeysResponseDefaultTypeInternal() {}
  union {
    GetDeviceKeysResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceKeysResponseDefaultTypeInternal _GetDeviceKeysResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateDeviceKeysRequest::UpdateDeviceKeysRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_keys_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateDeviceKeysRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDeviceKeysRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDeviceKeysRequestDefaultTypeInternal() {}
  union {
    UpdateDeviceKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDeviceKeysRequestDefaultTypeInternal _UpdateDeviceKeysRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteDeviceKeysRequest::DeleteDeviceKeysRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteDeviceKeysRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteDeviceKeysRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteDeviceKeysRequestDefaultTypeInternal() {}
  union {
    DeleteDeviceKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteDeviceKeysRequestDefaultTypeInternal _DeleteDeviceKeysRequest_default_instance_;
PROTOBUF_CONSTEXPR DeviceActivation::DeviceActivation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_s_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nwk_s_enc_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s_nwk_s_int_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f_nwk_s_int_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.f_cnt_up_)*/0u
  , /*decltype(_impl_.n_f_cnt_down_)*/0u
  , /*decltype(_impl_.a_f_cnt_down_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceActivationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceActivationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceActivationDefaultTypeInternal() {}
  union {
    DeviceActivation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceActivationDefaultTypeInternal _DeviceActivation_default_instance_;
PROTOBUF_CONSTEXPR ActivateDeviceRequest::ActivateDeviceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_activation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivateDeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivateDeviceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivateDeviceRequestDefaultTypeInternal() {}
  union {
    ActivateDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivateDeviceRequestDefaultTypeInternal _ActivateDeviceRequest_default_instance_;
PROTOBUF_CONSTEXPR DeactivateDeviceRequest::DeactivateDeviceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeactivateDeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeactivateDeviceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeactivateDeviceRequestDefaultTypeInternal() {}
  union {
    DeactivateDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeactivateDeviceRequestDefaultTypeInternal _DeactivateDeviceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceActivationRequest::GetDeviceActivationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceActivationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceActivationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceActivationRequestDefaultTypeInternal() {}
  union {
    GetDeviceActivationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceActivationRequestDefaultTypeInternal _GetDeviceActivationRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceActivationResponse::GetDeviceActivationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_activation_)*/nullptr
  , /*decltype(_impl_.join_server_context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceActivationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceActivationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceActivationResponseDefaultTypeInternal() {}
  union {
    GetDeviceActivationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceActivationResponseDefaultTypeInternal _GetDeviceActivationResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRandomDevAddrRequest::GetRandomDevAddrRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRandomDevAddrRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRandomDevAddrRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRandomDevAddrRequestDefaultTypeInternal() {}
  union {
    GetRandomDevAddrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRandomDevAddrRequestDefaultTypeInternal _GetRandomDevAddrRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRandomDevAddrResponse::GetRandomDevAddrResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRandomDevAddrResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRandomDevAddrResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRandomDevAddrResponseDefaultTypeInternal() {}
  union {
    GetRandomDevAddrResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRandomDevAddrResponseDefaultTypeInternal _GetRandomDevAddrResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceMetricsRequest::GetDeviceMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr
  , /*decltype(_impl_.aggregation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceMetricsRequestDefaultTypeInternal() {}
  union {
    GetDeviceMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceMetricsRequestDefaultTypeInternal _GetDeviceMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceMetricsResponse_MetricsEntry_DoNotUse::GetDeviceMetricsResponse_MetricsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetDeviceMetricsResponse_MetricsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceMetricsResponse_MetricsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceMetricsResponse_MetricsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetDeviceMetricsResponse_MetricsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceMetricsResponse_MetricsEntry_DoNotUseDefaultTypeInternal _GetDeviceMetricsResponse_MetricsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceMetricsResponse_StatesEntry_DoNotUse::GetDeviceMetricsResponse_StatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetDeviceMetricsResponse_StatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceMetricsResponse_StatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceMetricsResponse_StatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetDeviceMetricsResponse_StatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceMetricsResponse_StatesEntry_DoNotUseDefaultTypeInternal _GetDeviceMetricsResponse_StatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceMetricsResponse::GetDeviceMetricsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metrics_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.states_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceMetricsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceMetricsResponseDefaultTypeInternal() {}
  union {
    GetDeviceMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceMetricsResponseDefaultTypeInternal _GetDeviceMetricsResponse_default_instance_;
PROTOBUF_CONSTEXPR DeviceState::DeviceState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceStateDefaultTypeInternal() {}
  union {
    DeviceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceStateDefaultTypeInternal _DeviceState_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceLinkMetricsRequest::GetDeviceLinkMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr
  , /*decltype(_impl_.aggregation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceLinkMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceLinkMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceLinkMetricsRequestDefaultTypeInternal() {}
  union {
    GetDeviceLinkMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceLinkMetricsRequestDefaultTypeInternal _GetDeviceLinkMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceLinkMetricsResponse::GetDeviceLinkMetricsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rx_packets_)*/nullptr
  , /*decltype(_impl_.gw_rssi_)*/nullptr
  , /*decltype(_impl_.gw_snr_)*/nullptr
  , /*decltype(_impl_.rx_packets_per_freq_)*/nullptr
  , /*decltype(_impl_.rx_packets_per_dr_)*/nullptr
  , /*decltype(_impl_.errors_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceLinkMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceLinkMetricsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceLinkMetricsResponseDefaultTypeInternal() {}
  union {
    GetDeviceLinkMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceLinkMetricsResponseDefaultTypeInternal _GetDeviceLinkMetricsResponse_default_instance_;
PROTOBUF_CONSTEXPR DeviceQueueItem::DeviceQueueItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.f_port_)*/0u
  , /*decltype(_impl_.confirmed_)*/false
  , /*decltype(_impl_.is_pending_)*/false
  , /*decltype(_impl_.is_encrypted_)*/false
  , /*decltype(_impl_.f_cnt_down_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceQueueItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceQueueItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceQueueItemDefaultTypeInternal() {}
  union {
    DeviceQueueItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceQueueItemDefaultTypeInternal _DeviceQueueItem_default_instance_;
PROTOBUF_CONSTEXPR EnqueueDeviceQueueItemRequest::EnqueueDeviceQueueItemRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queue_item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnqueueDeviceQueueItemRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnqueueDeviceQueueItemRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnqueueDeviceQueueItemRequestDefaultTypeInternal() {}
  union {
    EnqueueDeviceQueueItemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnqueueDeviceQueueItemRequestDefaultTypeInternal _EnqueueDeviceQueueItemRequest_default_instance_;
PROTOBUF_CONSTEXPR EnqueueDeviceQueueItemResponse::EnqueueDeviceQueueItemResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnqueueDeviceQueueItemResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnqueueDeviceQueueItemResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnqueueDeviceQueueItemResponseDefaultTypeInternal() {}
  union {
    EnqueueDeviceQueueItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnqueueDeviceQueueItemResponseDefaultTypeInternal _EnqueueDeviceQueueItemResponse_default_instance_;
PROTOBUF_CONSTEXPR FlushDeviceQueueRequest::FlushDeviceQueueRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushDeviceQueueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushDeviceQueueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushDeviceQueueRequestDefaultTypeInternal() {}
  union {
    FlushDeviceQueueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushDeviceQueueRequestDefaultTypeInternal _FlushDeviceQueueRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceQueueItemsRequest::GetDeviceQueueItemsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_only_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceQueueItemsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceQueueItemsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceQueueItemsRequestDefaultTypeInternal() {}
  union {
    GetDeviceQueueItemsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceQueueItemsRequestDefaultTypeInternal _GetDeviceQueueItemsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceQueueItemsResponse::GetDeviceQueueItemsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_.total_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceQueueItemsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceQueueItemsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceQueueItemsResponseDefaultTypeInternal() {}
  union {
    GetDeviceQueueItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceQueueItemsResponseDefaultTypeInternal _GetDeviceQueueItemsResponse_default_instance_;
PROTOBUF_CONSTEXPR FlushDevNoncesRequest::FlushDevNoncesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushDevNoncesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushDevNoncesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushDevNoncesRequestDefaultTypeInternal() {}
  union {
    FlushDevNoncesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushDevNoncesRequestDefaultTypeInternal _FlushDevNoncesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceNextFCntDownRequest::GetDeviceNextFCntDownRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dev_eui_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceNextFCntDownRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceNextFCntDownRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceNextFCntDownRequestDefaultTypeInternal() {}
  union {
    GetDeviceNextFCntDownRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceNextFCntDownRequestDefaultTypeInternal _GetDeviceNextFCntDownRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeviceNextFCntDownResponse::GetDeviceNextFCntDownResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.f_cnt_down_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeviceNextFCntDownResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeviceNextFCntDownResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeviceNextFCntDownResponseDefaultTypeInternal() {}
  union {
    GetDeviceNextFCntDownResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeviceNextFCntDownResponseDefaultTypeInternal _GetDeviceNextFCntDownResponse_default_instance_;
}  // namespace api
static ::_pb::Metadata file_level_metadata_api_2fdevice_2eproto[41];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_api_2fdevice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_api_2fdevice_2eproto = nullptr;

const uint32_t TableStruct_api_2fdevice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::api::Device_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::Device_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::Device_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::Device_VariablesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::api::Device_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::Device_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::Device_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::Device_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.application_id_),
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.device_profile_id_),
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.skip_fcnt_check_),
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.is_disabled_),
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.variables_),
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::api::Device, _impl_.join_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::DeviceStatus, _impl_.margin_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceStatus, _impl_.external_power_source_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceStatus, _impl_.battery_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _impl_.dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _impl_.last_seen_at_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _impl_.device_profile_id_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _impl_.device_profile_name_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceListItem, _impl_.device_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceKeys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::DeviceKeys, _impl_.dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceKeys, _impl_.nwk_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceKeys, _impl_.app_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CreateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::CreateDeviceRequest, _impl_.device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, _impl_.last_seen_at_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, _impl_.device_status_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceResponse, _impl_.class_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::UpdateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::UpdateDeviceRequest, _impl_.device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeleteDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::DeleteDeviceRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, _impl_.search_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, _impl_.application_id_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesRequest, _impl_.multicast_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesResponse, _impl_.total_count_),
  PROTOBUF_FIELD_OFFSET(::api::ListDevicesResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CreateDeviceKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::CreateDeviceKeysRequest, _impl_.device_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysResponse, _impl_.device_keys_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysResponse, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceKeysResponse, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::UpdateDeviceKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::UpdateDeviceKeysRequest, _impl_.device_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeleteDeviceKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::DeleteDeviceKeysRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _impl_.dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _impl_.dev_addr_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _impl_.app_s_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _impl_.nwk_s_enc_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _impl_.s_nwk_s_int_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _impl_.f_nwk_s_int_key_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _impl_.f_cnt_up_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _impl_.n_f_cnt_down_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceActivation, _impl_.a_f_cnt_down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ActivateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::ActivateDeviceRequest, _impl_.device_activation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeactivateDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::DeactivateDeviceRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationResponse, _impl_.device_activation_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceActivationResponse, _impl_.join_server_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetRandomDevAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetRandomDevAddrRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetRandomDevAddrResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetRandomDevAddrResponse, _impl_.dev_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, _impl_.dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, _impl_.end_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsRequest, _impl_.aggregation_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceMetricsResponse, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::DeviceState, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceState, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, _impl_.dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, _impl_.end_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsRequest, _impl_.aggregation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, _impl_.rx_packets_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, _impl_.gw_rssi_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, _impl_.gw_snr_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, _impl_.rx_packets_per_freq_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, _impl_.rx_packets_per_dr_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceLinkMetricsResponse, _impl_.errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _impl_.dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _impl_.confirmed_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _impl_.f_port_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _impl_.is_pending_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _impl_.f_cnt_down_),
  PROTOBUF_FIELD_OFFSET(::api::DeviceQueueItem, _impl_.is_encrypted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::EnqueueDeviceQueueItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::EnqueueDeviceQueueItemRequest, _impl_.queue_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::EnqueueDeviceQueueItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::EnqueueDeviceQueueItemResponse, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::FlushDeviceQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::FlushDeviceQueueRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsRequest, _impl_.dev_eui_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsRequest, _impl_.count_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsResponse, _impl_.total_count_),
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceQueueItemsResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::FlushDevNoncesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::FlushDevNoncesRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceNextFCntDownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceNextFCntDownRequest, _impl_.dev_eui_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceNextFCntDownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::api::GetDeviceNextFCntDownResponse, _impl_.f_cnt_down_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::api::Device_VariablesEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::api::Device_TagsEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::api::Device)},
  { 36, -1, -1, sizeof(::api::DeviceStatus)},
  { 45, -1, -1, sizeof(::api::DeviceListItem)},
  { 60, -1, -1, sizeof(::api::DeviceKeys)},
  { 69, -1, -1, sizeof(::api::CreateDeviceRequest)},
  { 76, -1, -1, sizeof(::api::GetDeviceRequest)},
  { 83, -1, -1, sizeof(::api::GetDeviceResponse)},
  { 95, -1, -1, sizeof(::api::UpdateDeviceRequest)},
  { 102, -1, -1, sizeof(::api::DeleteDeviceRequest)},
  { 109, -1, -1, sizeof(::api::ListDevicesRequest)},
  { 120, -1, -1, sizeof(::api::ListDevicesResponse)},
  { 128, -1, -1, sizeof(::api::CreateDeviceKeysRequest)},
  { 135, -1, -1, sizeof(::api::GetDeviceKeysRequest)},
  { 142, -1, -1, sizeof(::api::GetDeviceKeysResponse)},
  { 151, -1, -1, sizeof(::api::UpdateDeviceKeysRequest)},
  { 158, -1, -1, sizeof(::api::DeleteDeviceKeysRequest)},
  { 165, -1, -1, sizeof(::api::DeviceActivation)},
  { 180, -1, -1, sizeof(::api::ActivateDeviceRequest)},
  { 187, -1, -1, sizeof(::api::DeactivateDeviceRequest)},
  { 194, -1, -1, sizeof(::api::GetDeviceActivationRequest)},
  { 201, -1, -1, sizeof(::api::GetDeviceActivationResponse)},
  { 209, -1, -1, sizeof(::api::GetRandomDevAddrRequest)},
  { 216, -1, -1, sizeof(::api::GetRandomDevAddrResponse)},
  { 223, -1, -1, sizeof(::api::GetDeviceMetricsRequest)},
  { 233, 241, -1, sizeof(::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse)},
  { 243, 251, -1, sizeof(::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse)},
  { 253, -1, -1, sizeof(::api::GetDeviceMetricsResponse)},
  { 261, -1, -1, sizeof(::api::DeviceState)},
  { 269, -1, -1, sizeof(::api::GetDeviceLinkMetricsRequest)},
  { 279, -1, -1, sizeof(::api::GetDeviceLinkMetricsResponse)},
  { 291, -1, -1, sizeof(::api::DeviceQueueItem)},
  { 306, -1, -1, sizeof(::api::EnqueueDeviceQueueItemRequest)},
  { 313, -1, -1, sizeof(::api::EnqueueDeviceQueueItemResponse)},
  { 320, -1, -1, sizeof(::api::FlushDeviceQueueRequest)},
  { 327, -1, -1, sizeof(::api::GetDeviceQueueItemsRequest)},
  { 335, -1, -1, sizeof(::api::GetDeviceQueueItemsResponse)},
  { 343, -1, -1, sizeof(::api::FlushDevNoncesRequest)},
  { 350, -1, -1, sizeof(::api::GetDeviceNextFCntDownRequest)},
  { 357, -1, -1, sizeof(::api::GetDeviceNextFCntDownResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::api::_Device_VariablesEntry_DoNotUse_default_instance_._instance,
  &::api::_Device_TagsEntry_DoNotUse_default_instance_._instance,
  &::api::_Device_default_instance_._instance,
  &::api::_DeviceStatus_default_instance_._instance,
  &::api::_DeviceListItem_default_instance_._instance,
  &::api::_DeviceKeys_default_instance_._instance,
  &::api::_CreateDeviceRequest_default_instance_._instance,
  &::api::_GetDeviceRequest_default_instance_._instance,
  &::api::_GetDeviceResponse_default_instance_._instance,
  &::api::_UpdateDeviceRequest_default_instance_._instance,
  &::api::_DeleteDeviceRequest_default_instance_._instance,
  &::api::_ListDevicesRequest_default_instance_._instance,
  &::api::_ListDevicesResponse_default_instance_._instance,
  &::api::_CreateDeviceKeysRequest_default_instance_._instance,
  &::api::_GetDeviceKeysRequest_default_instance_._instance,
  &::api::_GetDeviceKeysResponse_default_instance_._instance,
  &::api::_UpdateDeviceKeysRequest_default_instance_._instance,
  &::api::_DeleteDeviceKeysRequest_default_instance_._instance,
  &::api::_DeviceActivation_default_instance_._instance,
  &::api::_ActivateDeviceRequest_default_instance_._instance,
  &::api::_DeactivateDeviceRequest_default_instance_._instance,
  &::api::_GetDeviceActivationRequest_default_instance_._instance,
  &::api::_GetDeviceActivationResponse_default_instance_._instance,
  &::api::_GetRandomDevAddrRequest_default_instance_._instance,
  &::api::_GetRandomDevAddrResponse_default_instance_._instance,
  &::api::_GetDeviceMetricsRequest_default_instance_._instance,
  &::api::_GetDeviceMetricsResponse_MetricsEntry_DoNotUse_default_instance_._instance,
  &::api::_GetDeviceMetricsResponse_StatesEntry_DoNotUse_default_instance_._instance,
  &::api::_GetDeviceMetricsResponse_default_instance_._instance,
  &::api::_DeviceState_default_instance_._instance,
  &::api::_GetDeviceLinkMetricsRequest_default_instance_._instance,
  &::api::_GetDeviceLinkMetricsResponse_default_instance_._instance,
  &::api::_DeviceQueueItem_default_instance_._instance,
  &::api::_EnqueueDeviceQueueItemRequest_default_instance_._instance,
  &::api::_EnqueueDeviceQueueItemResponse_default_instance_._instance,
  &::api::_FlushDeviceQueueRequest_default_instance_._instance,
  &::api::_GetDeviceQueueItemsRequest_default_instance_._instance,
  &::api::_GetDeviceQueueItemsResponse_default_instance_._instance,
  &::api::_FlushDevNoncesRequest_default_instance_._instance,
  &::api::_GetDeviceNextFCntDownRequest_default_instance_._instance,
  &::api::_GetDeviceNextFCntDownResponse_default_instance_._instance,
};

const char descriptor_table_protodef_api_2fdevice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020api/device.proto\022\003api\032\023common/common.p"
  "roto\032\034google/api/annotations.proto\032\037goog"
  "le/protobuf/timestamp.proto\032\034google/prot"
  "obuf/struct.proto\032\033google/protobuf/empty"
  ".proto\"\342\002\n\006Device\022\017\n\007dev_eui\030\001 \001(\t\022\014\n\004na"
  "me\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\026\n\016applica"
  "tion_id\030\004 \001(\t\022\031\n\021device_profile_id\030\005 \001(\t"
  "\022\027\n\017skip_fcnt_check\030\006 \001(\010\022\023\n\013is_disabled"
  "\030\007 \001(\010\022-\n\tvariables\030\010 \003(\0132\032.api.Device.V"
  "ariablesEntry\022#\n\004tags\030\t \003(\0132\025.api.Device"
  ".TagsEntry\022\020\n\010join_eui\030\n \001(\t\0320\n\016Variable"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032+"
  "\n\tTagsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
  "\0028\001\"T\n\014DeviceStatus\022\016\n\006margin\030\001 \001(\005\022\035\n\025e"
  "xternal_power_source\030\002 \001(\010\022\025\n\rbattery_le"
  "vel\030\003 \001(\002\"\270\002\n\016DeviceListItem\022\017\n\007dev_eui\030"
  "\001 \001(\t\022.\n\ncreated_at\030\002 \001(\0132\032.google.proto"
  "buf.Timestamp\022.\n\nupdated_at\030\003 \001(\0132\032.goog"
  "le.protobuf.Timestamp\0220\n\014last_seen_at\030\004 "
  "\001(\0132\032.google.protobuf.Timestamp\022\014\n\004name\030"
  "\005 \001(\t\022\023\n\013description\030\006 \001(\t\022\031\n\021device_pro"
  "file_id\030\007 \001(\t\022\033\n\023device_profile_name\030\010 \001"
  "(\t\022(\n\rdevice_status\030\t \001(\0132\021.api.DeviceSt"
  "atus\"\?\n\nDeviceKeys\022\017\n\007dev_eui\030\001 \001(\t\022\017\n\007n"
  "wk_key\030\002 \001(\t\022\017\n\007app_key\030\003 \001(\t\"2\n\023CreateD"
  "eviceRequest\022\033\n\006device\030\001 \001(\0132\013.api.Devic"
  "e\"#\n\020GetDeviceRequest\022\017\n\007dev_eui\030\001 \001(\t\"\230"
  "\002\n\021GetDeviceResponse\022\033\n\006device\030\001 \001(\0132\013.a"
  "pi.Device\022.\n\ncreated_at\030\002 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022.\n\nupdated_at\030\003 \001(\0132\032."
  "google.protobuf.Timestamp\0220\n\014last_seen_a"
  "t\030\004 \001(\0132\032.google.protobuf.Timestamp\022(\n\rd"
  "evice_status\030\005 \001(\0132\021.api.DeviceStatus\022*\n"
  "\rclass_enabled\030\006 \001(\0162\023.common.DeviceClas"
  "s\"2\n\023UpdateDeviceRequest\022\033\n\006device\030\001 \001(\013"
  "2\013.api.Device\"&\n\023DeleteDeviceRequest\022\017\n\007"
  "dev_eui\030\001 \001(\t\"w\n\022ListDevicesRequest\022\r\n\005l"
  "imit\030\001 \001(\r\022\016\n\006offset\030\002 \001(\r\022\016\n\006search\030\003 \001"
  "(\t\022\026\n\016application_id\030\004 \001(\t\022\032\n\022multicast_"
  "group_id\030\005 \001(\t\"O\n\023ListDevicesResponse\022\023\n"
  "\013total_count\030\001 \001(\r\022#\n\006result\030\002 \003(\0132\023.api"
  ".DeviceListItem\"\?\n\027CreateDeviceKeysReque"
  "st\022$\n\013device_keys\030\001 \001(\0132\017.api.DeviceKeys"
  "\"\'\n\024GetDeviceKeysRequest\022\017\n\007dev_eui\030\001 \001("
  "\t\"\235\001\n\025GetDeviceKeysResponse\022$\n\013device_ke"
  "ys\030\001 \001(\0132\017.api.DeviceKeys\022.\n\ncreated_at\030"
  "\002 \001(\0132\032.google.protobuf.Timestamp\022.\n\nupd"
  "ated_at\030\003 \001(\0132\032.google.protobuf.Timestam"
  "p\"\?\n\027UpdateDeviceKeysRequest\022$\n\013device_k"
  "eys\030\001 \001(\0132\017.api.DeviceKeys\"*\n\027DeleteDevi"
  "ceKeysRequest\022\017\n\007dev_eui\030\001 \001(\t\"\317\001\n\020Devic"
  "eActivation\022\017\n\007dev_eui\030\001 \001(\t\022\020\n\010dev_addr"
  "\030\002 \001(\t\022\021\n\tapp_s_key\030\003 \001(\t\022\025\n\rnwk_s_enc_k"
  "ey\030\004 \001(\t\022\027\n\017s_nwk_s_int_key\030\010 \001(\t\022\027\n\017f_n"
  "wk_s_int_key\030\t \001(\t\022\020\n\010f_cnt_up\030\005 \001(\r\022\024\n\014"
  "n_f_cnt_down\030\006 \001(\r\022\024\n\014a_f_cnt_down\030\n \001(\r"
  "\"I\n\025ActivateDeviceRequest\0220\n\021device_acti"
  "vation\030\001 \001(\0132\025.api.DeviceActivation\"*\n\027D"
  "eactivateDeviceRequest\022\017\n\007dev_eui\030\001 \001(\t\""
  "-\n\032GetDeviceActivationRequest\022\017\n\007dev_eui"
  "\030\001 \001(\t\"\207\001\n\033GetDeviceActivationResponse\0220"
  "\n\021device_activation\030\001 \001(\0132\025.api.DeviceAc"
  "tivation\0226\n\023join_server_context\030\002 \001(\0132\031."
  "common.JoinServerContext\"*\n\027GetRandomDev"
  "AddrRequest\022\017\n\007dev_eui\030\001 \001(\t\",\n\030GetRando"
  "mDevAddrResponse\022\020\n\010dev_addr\030\001 \001(\t\"\250\001\n\027G"
  "etDeviceMetricsRequest\022\017\n\007dev_eui\030\001 \001(\t\022"
  ")\n\005start\030\002 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\'\n\003end\030\003 \001(\0132\032.google.protobuf.Timest"
  "amp\022(\n\013aggregation\030\004 \001(\0162\023.common.Aggreg"
  "ation\"\223\002\n\030GetDeviceMetricsResponse\022;\n\007me"
  "trics\030\001 \003(\0132*.api.GetDeviceMetricsRespon"
  "se.MetricsEntry\0229\n\006states\030\002 \003(\0132).api.Ge"
  "tDeviceMetricsResponse.StatesEntry\032>\n\014Me"
  "tricsEntry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016"
  ".common.Metric:\0028\001\032\?\n\013StatesEntry\022\013\n\003key"
  "\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020.api.DeviceState:"
  "\0028\001\"*\n\013DeviceState\022\014\n\004name\030\002 \001(\t\022\r\n\005valu"
  "e\030\003 \001(\t\"\254\001\n\033GetDeviceLinkMetricsRequest\022"
  "\017\n\007dev_eui\030\001 \001(\t\022)\n\005start\030\002 \001(\0132\032.google"
  ".protobuf.Timestamp\022\'\n\003end\030\003 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022(\n\013aggregation\030\004 \001("
  "\0162\023.common.Aggregation\"\373\001\n\034GetDeviceLink"
  "MetricsResponse\022\"\n\nrx_packets\030\001 \001(\0132\016.co"
  "mmon.Metric\022\037\n\007gw_rssi\030\002 \001(\0132\016.common.Me"
  "tric\022\036\n\006gw_snr\030\003 \001(\0132\016.common.Metric\022+\n\023"
  "rx_packets_per_freq\030\004 \001(\0132\016.common.Metri"
  "c\022)\n\021rx_packets_per_dr\030\005 \001(\0132\016.common.Me"
  "tric\022\036\n\006errors\030\006 \001(\0132\016.common.Metric\"\306\001\n"
  "\017DeviceQueueItem\022\n\n\002id\030\001 \001(\t\022\017\n\007dev_eui\030"
  "\002 \001(\t\022\021\n\tconfirmed\030\003 \001(\010\022\016\n\006f_port\030\004 \001(\r"
  "\022\014\n\004data\030\005 \001(\014\022\'\n\006object\030\006 \001(\0132\027.google."
  "protobuf.Struct\022\022\n\nis_pending\030\007 \001(\010\022\022\n\nf"
  "_cnt_down\030\010 \001(\r\022\024\n\014is_encrypted\030\t \001(\010\"I\n"
  "\035EnqueueDeviceQueueItemRequest\022(\n\nqueue_"
  "item\030\001 \001(\0132\024.api.DeviceQueueItem\",\n\036Enqu"
  "eueDeviceQueueItemResponse\022\n\n\002id\030\001 \001(\t\"*"
  "\n\027FlushDeviceQueueRequest\022\017\n\007dev_eui\030\001 \001"
  "(\t\"A\n\032GetDeviceQueueItemsRequest\022\017\n\007dev_"
  "eui\030\001 \001(\t\022\022\n\ncount_only\030\002 \001(\010\"X\n\033GetDevi"
  "ceQueueItemsResponse\022\023\n\013total_count\030\001 \001("
  "\r\022$\n\006result\030\002 \003(\0132\024.api.DeviceQueueItem\""
  "(\n\025FlushDevNoncesRequest\022\017\n\007dev_eui\030\001 \001("
  "\t\"/\n\034GetDeviceNextFCntDownRequest\022\017\n\007dev"
  "_eui\030\001 \001(\t\"3\n\035GetDeviceNextFCntDownRespo"
  "nse\022\022\n\nf_cnt_down\030\001 \001(\r2\342\021\n\rDeviceServic"
  "e\022S\n\006Create\022\030.api.CreateDeviceRequest\032\026."
  "google.protobuf.Empty\"\027\202\323\344\223\002\021\"\014/api/devi"
  "ces:\001*\022T\n\003Get\022\025.api.GetDeviceRequest\032\026.a"
  "pi.GetDeviceResponse\"\036\202\323\344\223\002\030\022\026/api/devic"
  "es/{dev_eui}\022d\n\006Update\022\030.api.UpdateDevic"
  "eRequest\032\026.google.protobuf.Empty\"(\202\323\344\223\002\""
  "\032\035/api/devices/{device.dev_eui}:\001*\022Z\n\006De"
  "lete\022\030.api.DeleteDeviceRequest\032\026.google."
  "protobuf.Empty\"\036\202\323\344\223\002\030*\026/api/devices/{de"
  "v_eui}\022O\n\004List\022\027.api.ListDevicesRequest\032"
  "\030.api.ListDevicesResponse\"\024\202\323\344\223\002\016\022\014/api/"
  "devices\022v\n\nCreateKeys\022\034.api.CreateDevice"
  "KeysRequest\032\026.google.protobuf.Empty\"2\202\323\344"
  "\223\002,\"\'/api/devices/{device_keys.dev_eui}/"
  "keys:\001*\022e\n\007GetKeys\022\031.api.GetDeviceKeysRe"
  "quest\032\032.api.GetDeviceKeysResponse\"#\202\323\344\223\002"
  "\035\022\033/api/devices/{dev_eui}/keys\022v\n\nUpdate"
  "Keys\022\034.api.UpdateDeviceKeysRequest\032\026.goo"
  "gle.protobuf.Empty\"2\202\323\344\223\002,\032\'/api/devices"
  "/{device_keys.dev_eui}/keys:\001*\022g\n\nDelete"
  "Keys\022\034.api.DeleteDeviceKeysRequest\032\026.goo"
  "gle.protobuf.Empty\"#\202\323\344\223\002\035*\033/api/devices"
  "/{dev_eui}/keys\022o\n\016FlushDevNonces\022\032.api."
  "FlushDevNoncesRequest\032\026.google.protobuf."
  "Empty\")\202\323\344\223\002#*!/api/devices/{dev_eui}/de"
  "v-nonces\022|\n\010Activate\022\032.api.ActivateDevic"
  "eRequest\032\026.google.protobuf.Empty\"<\202\323\344\223\0026"
  "\"1/api/devices/{device_activation.dev_eu"
  "i}/activate:\001*\022m\n\nDeactivate\022\034.api.Deact"
  "ivateDeviceRequest\032\026.google.protobuf.Emp"
  "ty\")\202\323\344\223\002#*!/api/devices/{dev_eui}/activ"
  "ation\022}\n\rGetActivation\022\037.api.GetDeviceAc"
  "tivationRequest\032 .api.GetDeviceActivatio"
  "nResponse\")\202\323\344\223\002#\022!/api/devices/{dev_eui"
  "}/activation\022\203\001\n\020GetRandomDevAddr\022\034.api."
  "GetRandomDevAddrRequest\032\035.api.GetRandomD"
  "evAddrResponse\"2\202\323\344\223\002,\"*/api/devices/{de"
  "v_eui}/get-random-dev-addr\022q\n\nGetMetrics"
  "\022\034.api.GetDeviceMetricsRequest\032\035.api.Get"
  "DeviceMetricsResponse\"&\202\323\344\223\002 \022\036/api/devi"
  "ces/{dev_eui}/metrics\022\202\001\n\016GetLinkMetrics"
  "\022 .api.GetDeviceLinkMetricsRequest\032!.api"
  ".GetDeviceLinkMetricsResponse\"+\202\323\344\223\002%\022#/"
  "api/devices/{dev_eui}/link-metrics\022\206\001\n\007E"
  "nqueue\022\".api.EnqueueDeviceQueueItemReque"
  "st\032#.api.EnqueueDeviceQueueItemResponse\""
  "2\202\323\344\223\002,\"\'/api/devices/{queue_item.dev_eu"
  "i}/queue:\001*\022h\n\nFlushQueue\022\034.api.FlushDev"
  "iceQueueRequest\032\026.google.protobuf.Empty\""
  "$\202\323\344\223\002\036*\034/api/devices/{dev_eui}/queue\022s\n"
  "\010GetQueue\022\037.api.GetDeviceQueueItemsReque"
  "st\032 .api.GetDeviceQueueItemsResponse\"$\202\323"
  "\344\223\002\036\022\034/api/devices/{dev_eui}/queue\022\217\001\n\017G"
  "etNextFCntDown\022!.api.GetDeviceNextFCntDo"
  "wnRequest\032\".api.GetDeviceNextFCntDownRes"
  "ponse\"5\202\323\344\223\002/\"*/api/devices/{dev_eui}/ge"
  "t-next-f-cnt-down:\001*Bc\n\021io.chirpstack.ap"
  "iB\013DeviceProtoP\001Z.github.com/chirpstack/"
  "chirpstack/api/go/v4/api\252\002\016Chirpstack.Ap"
  "ib\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_api_2fdevice_2eproto_deps[5] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_api_2fdevice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_api_2fdevice_2eproto = {
    false, false, 6609, descriptor_table_protodef_api_2fdevice_2eproto,
    "api/device.proto",
    &descriptor_table_api_2fdevice_2eproto_once, descriptor_table_api_2fdevice_2eproto_deps, 5, 41,
    schemas, file_default_instances, TableStruct_api_2fdevice_2eproto::offsets,
    file_level_metadata_api_2fdevice_2eproto, file_level_enum_descriptors_api_2fdevice_2eproto,
    file_level_service_descriptors_api_2fdevice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_api_2fdevice_2eproto_getter() {
  return &descriptor_table_api_2fdevice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_api_2fdevice_2eproto(&descriptor_table_api_2fdevice_2eproto);
namespace api {

// ===================================================================

Device_VariablesEntry_DoNotUse::Device_VariablesEntry_DoNotUse() {}
Device_VariablesEntry_DoNotUse::Device_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Device_VariablesEntry_DoNotUse::MergeFrom(const Device_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Device_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[0]);
}

// ===================================================================

Device_TagsEntry_DoNotUse::Device_TagsEntry_DoNotUse() {}
Device_TagsEntry_DoNotUse::Device_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Device_TagsEntry_DoNotUse::MergeFrom(const Device_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Device_TagsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[1]);
}

// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Device::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:api.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Device* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{}
    , /*decltype(_impl_.tags_)*/{}
    , decltype(_impl_.dev_eui_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.application_id_){}
    , decltype(_impl_.device_profile_id_){}
    , decltype(_impl_.join_eui_){}
    , decltype(_impl_.skip_fcnt_check_){}
    , decltype(_impl_.is_disabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.application_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.application_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_application_id().empty()) {
    _this->_impl_.application_id_.Set(from._internal_application_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_profile_id().empty()) {
    _this->_impl_.device_profile_id_.Set(from._internal_device_profile_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.join_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.join_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_join_eui().empty()) {
    _this->_impl_.join_eui_.Set(from._internal_join_eui(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_fcnt_check_, &from._impl_.skip_fcnt_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_disabled_) -
    reinterpret_cast<char*>(&_impl_.skip_fcnt_check_)) + sizeof(_impl_.is_disabled_));
  // @@protoc_insertion_point(copy_constructor:api.Device)
}

inline void Device::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.tags_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.dev_eui_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.application_id_){}
    , decltype(_impl_.device_profile_id_){}
    , decltype(_impl_.join_eui_){}
    , decltype(_impl_.skip_fcnt_check_){false}
    , decltype(_impl_.is_disabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.application_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.application_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.join_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.join_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:api.Device)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.Destruct();
  _impl_.variables_.~MapField();
  _impl_.tags_.Destruct();
  _impl_.tags_.~MapField();
  _impl_.dev_eui_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.application_id_.Destroy();
  _impl_.device_profile_id_.Destroy();
  _impl_.join_eui_.Destroy();
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  _this->_impl_.variables_.Destruct();
  _this->_impl_.tags_.Destruct();
}
void Device::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.tags_.Clear();
  _impl_.dev_eui_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.application_id_.ClearToEmpty();
  _impl_.device_profile_id_.ClearToEmpty();
  _impl_.join_eui_.ClearToEmpty();
  ::memset(&_impl_.skip_fcnt_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_disabled_) -
      reinterpret_cast<char*>(&_impl_.skip_fcnt_check_)) + sizeof(_impl_.is_disabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.Device.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.Device.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.Device.description"));
        } else
          goto handle_unusual;
        continue;
      // string application_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_application_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.Device.application_id"));
        } else
          goto handle_unusual;
        continue;
      // string device_profile_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_device_profile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.Device.device_profile_id"));
        } else
          goto handle_unusual;
        continue;
      // bool skip_fcnt_check = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.skip_fcnt_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_disabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> variables = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> tags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string join_eui = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_join_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.Device.join_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string application_id = 4;
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.application_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_application_id(), target);
  }

  // string device_profile_id = 5;
  if (!this->_internal_device_profile_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_profile_id().data(), static_cast<int>(this->_internal_device_profile_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.device_profile_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_profile_id(), target);
  }

  // bool skip_fcnt_check = 6;
  if (this->_internal_skip_fcnt_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_skip_fcnt_check(), target);
  }

  // bool is_disabled = 7;
  if (this->_internal_is_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_disabled(), target);
  }

  // map<string, string> variables = 8;
  if (!this->_internal_variables().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Device_VariablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "api.Device.VariablesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "api.Device.VariablesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> tags = 9;
  if (!this->_internal_tags().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Device_TagsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tags();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "api.Device.TagsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "api.Device.TagsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string join_eui = 10;
  if (!this->_internal_join_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_join_eui().data(), static_cast<int>(this->_internal_join_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Device.join_eui");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_join_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += Device_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> tags = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += Device_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string application_id = 4;
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string device_profile_id = 5;
  if (!this->_internal_device_profile_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_profile_id());
  }

  // string join_eui = 10;
  if (!this->_internal_join_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_join_eui());
  }

  // bool skip_fcnt_check = 6;
  if (this->_internal_skip_fcnt_check() != 0) {
    total_size += 1 + 1;
  }

  // bool is_disabled = 7;
  if (this->_internal_is_disabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }


void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Device*>(&to_msg);
  auto& from = static_cast<const Device&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.Device)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_application_id().empty()) {
    _this->_internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_device_profile_id().empty()) {
    _this->_internal_set_device_profile_id(from._internal_device_profile_id());
  }
  if (!from._internal_join_eui().empty()) {
    _this->_internal_set_join_eui(from._internal_join_eui());
  }
  if (from._internal_skip_fcnt_check() != 0) {
    _this->_internal_set_skip_fcnt_check(from._internal_skip_fcnt_check());
  }
  if (from._internal_is_disabled() != 0) {
    _this->_internal_set_is_disabled(from._internal_is_disabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.application_id_, lhs_arena,
      &other->_impl_.application_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_profile_id_, lhs_arena,
      &other->_impl_.device_profile_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.join_eui_, lhs_arena,
      &other->_impl_.join_eui_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, _impl_.is_disabled_)
      + sizeof(Device::_impl_.is_disabled_)
      - PROTOBUF_FIELD_OFFSET(Device, _impl_.skip_fcnt_check_)>(
          reinterpret_cast<char*>(&_impl_.skip_fcnt_check_),
          reinterpret_cast<char*>(&other->_impl_.skip_fcnt_check_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[2]);
}

// ===================================================================

class DeviceStatus::_Internal {
 public:
};

DeviceStatus::DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.margin_){}
    , decltype(_impl_.external_power_source_){}
    , decltype(_impl_.battery_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.margin_, &from._impl_.margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.battery_level_) -
    reinterpret_cast<char*>(&_impl_.margin_)) + sizeof(_impl_.battery_level_));
  // @@protoc_insertion_point(copy_constructor:api.DeviceStatus)
}

inline void DeviceStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.margin_){0}
    , decltype(_impl_.external_power_source_){false}
    , decltype(_impl_.battery_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:api.DeviceStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.battery_level_) -
      reinterpret_cast<char*>(&_impl_.margin_)) + sizeof(_impl_.battery_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 margin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool external_power_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.external_power_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float battery_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.battery_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 margin = 1;
  if (this->_internal_margin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_margin(), target);
  }

  // bool external_power_source = 2;
  if (this->_internal_external_power_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_external_power_source(), target);
  }

  // float battery_level = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_battery_level = this->_internal_battery_level();
  uint32_t raw_battery_level;
  memcpy(&raw_battery_level, &tmp_battery_level, sizeof(tmp_battery_level));
  if (raw_battery_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_battery_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceStatus)
  return target;
}

size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 margin = 1;
  if (this->_internal_margin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_margin());
  }

  // bool external_power_source = 2;
  if (this->_internal_external_power_source() != 0) {
    total_size += 1 + 1;
  }

  // float battery_level = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_battery_level = this->_internal_battery_level();
  uint32_t raw_battery_level;
  memcpy(&raw_battery_level, &tmp_battery_level, sizeof(tmp_battery_level));
  if (raw_battery_level != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceStatus::GetClassData() const { return &_class_data_; }


void DeviceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceStatus*>(&to_msg);
  auto& from = static_cast<const DeviceStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_margin() != 0) {
    _this->_internal_set_margin(from._internal_margin());
  }
  if (from._internal_external_power_source() != 0) {
    _this->_internal_set_external_power_source(from._internal_external_power_source());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_battery_level = from._internal_battery_level();
  uint32_t raw_battery_level;
  memcpy(&raw_battery_level, &tmp_battery_level, sizeof(tmp_battery_level));
  if (raw_battery_level != 0) {
    _this->_internal_set_battery_level(from._internal_battery_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceStatus, _impl_.battery_level_)
      + sizeof(DeviceStatus::_impl_.battery_level_)
      - PROTOBUF_FIELD_OFFSET(DeviceStatus, _impl_.margin_)>(
          reinterpret_cast<char*>(&_impl_.margin_),
          reinterpret_cast<char*>(&other->_impl_.margin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[3]);
}

// ===================================================================

class DeviceListItem::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DeviceListItem* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const DeviceListItem* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_seen_at(const DeviceListItem* msg);
  static const ::api::DeviceStatus& device_status(const DeviceListItem* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DeviceListItem::_Internal::created_at(const DeviceListItem* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DeviceListItem::_Internal::updated_at(const DeviceListItem* msg) {
  return *msg->_impl_.updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DeviceListItem::_Internal::last_seen_at(const DeviceListItem* msg) {
  return *msg->_impl_.last_seen_at_;
}
const ::api::DeviceStatus&
DeviceListItem::_Internal::device_status(const DeviceListItem* msg) {
  return *msg->_impl_.device_status_;
}
void DeviceListItem::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void DeviceListItem::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void DeviceListItem::clear_last_seen_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_seen_at_ != nullptr) {
    delete _impl_.last_seen_at_;
  }
  _impl_.last_seen_at_ = nullptr;
}
DeviceListItem::DeviceListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.DeviceListItem)
}
DeviceListItem::DeviceListItem(const DeviceListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceListItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.device_profile_id_){}
    , decltype(_impl_.device_profile_name_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.last_seen_at_){nullptr}
    , decltype(_impl_.device_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_profile_id().empty()) {
    _this->_impl_.device_profile_id_.Set(from._internal_device_profile_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_profile_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_profile_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_profile_name().empty()) {
    _this->_impl_.device_profile_name_.Set(from._internal_device_profile_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_last_seen_at()) {
    _this->_impl_.last_seen_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_seen_at_);
  }
  if (from._internal_has_device_status()) {
    _this->_impl_.device_status_ = new ::api::DeviceStatus(*from._impl_.device_status_);
  }
  // @@protoc_insertion_point(copy_constructor:api.DeviceListItem)
}

inline void DeviceListItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.device_profile_id_){}
    , decltype(_impl_.device_profile_name_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.last_seen_at_){nullptr}
    , decltype(_impl_.device_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_profile_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_profile_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceListItem::~DeviceListItem() {
  // @@protoc_insertion_point(destructor:api.DeviceListItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceListItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.device_profile_id_.Destroy();
  _impl_.device_profile_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.last_seen_at_;
  if (this != internal_default_instance()) delete _impl_.device_status_;
}

void DeviceListItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceListItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.device_profile_id_.ClearToEmpty();
  _impl_.device_profile_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_seen_at_ != nullptr) {
    delete _impl_.last_seen_at_;
  }
  _impl_.last_seen_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.device_status_ != nullptr) {
    delete _impl_.device_status_;
  }
  _impl_.device_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceListItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceListItem.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_seen_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_seen_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceListItem.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceListItem.description"));
        } else
          goto handle_unusual;
        continue;
      // string device_profile_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_device_profile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceListItem.device_profile_id"));
        } else
          goto handle_unusual;
        continue;
      // string device_profile_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_device_profile_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceListItem.device_profile_name"));
        } else
          goto handle_unusual;
        continue;
      // .api.DeviceStatus device_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceListItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceListItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_seen_at = 4;
  if (this->_internal_has_last_seen_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_seen_at(this),
        _Internal::last_seen_at(this).GetCachedSize(), target, stream);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // string device_profile_id = 7;
  if (!this->_internal_device_profile_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_profile_id().data(), static_cast<int>(this->_internal_device_profile_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.device_profile_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device_profile_id(), target);
  }

  // string device_profile_name = 8;
  if (!this->_internal_device_profile_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_profile_name().data(), static_cast<int>(this->_internal_device_profile_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceListItem.device_profile_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_device_profile_name(), target);
  }

  // .api.DeviceStatus device_status = 9;
  if (this->_internal_has_device_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::device_status(this),
        _Internal::device_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceListItem)
  return target;
}

size_t DeviceListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceListItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string device_profile_id = 7;
  if (!this->_internal_device_profile_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_profile_id());
  }

  // string device_profile_name = 8;
  if (!this->_internal_device_profile_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_profile_name());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .google.protobuf.Timestamp last_seen_at = 4;
  if (this->_internal_has_last_seen_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_seen_at_);
  }

  // .api.DeviceStatus device_status = 9;
  if (this->_internal_has_device_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceListItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceListItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceListItem::GetClassData() const { return &_class_data_; }


void DeviceListItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceListItem*>(&to_msg);
  auto& from = static_cast<const DeviceListItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceListItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_device_profile_id().empty()) {
    _this->_internal_set_device_profile_id(from._internal_device_profile_id());
  }
  if (!from._internal_device_profile_name().empty()) {
    _this->_internal_set_device_profile_name(from._internal_device_profile_name());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_last_seen_at()) {
    _this->_internal_mutable_last_seen_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_seen_at());
  }
  if (from._internal_has_device_status()) {
    _this->_internal_mutable_device_status()->::api::DeviceStatus::MergeFrom(
        from._internal_device_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceListItem::CopyFrom(const DeviceListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceListItem::IsInitialized() const {
  return true;
}

void DeviceListItem::InternalSwap(DeviceListItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_profile_id_, lhs_arena,
      &other->_impl_.device_profile_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_profile_name_, lhs_arena,
      &other->_impl_.device_profile_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceListItem, _impl_.device_status_)
      + sizeof(DeviceListItem::_impl_.device_status_)
      - PROTOBUF_FIELD_OFFSET(DeviceListItem, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceListItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[4]);
}

// ===================================================================

class DeviceKeys::_Internal {
 public:
};

DeviceKeys::DeviceKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.DeviceKeys)
}
DeviceKeys::DeviceKeys(const DeviceKeys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceKeys* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.nwk_key_){}
    , decltype(_impl_.app_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nwk_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nwk_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nwk_key().empty()) {
    _this->_impl_.nwk_key_.Set(from._internal_nwk_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_key().empty()) {
    _this->_impl_.app_key_.Set(from._internal_app_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeviceKeys)
}

inline void DeviceKeys::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.nwk_key_){}
    , decltype(_impl_.app_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nwk_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nwk_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceKeys::~DeviceKeys() {
  // @@protoc_insertion_point(destructor:api.DeviceKeys)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceKeys::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
  _impl_.nwk_key_.Destroy();
  _impl_.app_key_.Destroy();
}

void DeviceKeys::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceKeys)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _impl_.nwk_key_.ClearToEmpty();
  _impl_.app_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceKeys::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceKeys.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      // string nwk_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nwk_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceKeys.nwk_key"));
        } else
          goto handle_unusual;
        continue;
      // string app_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceKeys.app_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceKeys::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceKeys)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceKeys.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // string nwk_key = 2;
  if (!this->_internal_nwk_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nwk_key().data(), static_cast<int>(this->_internal_nwk_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceKeys.nwk_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nwk_key(), target);
  }

  // string app_key = 3;
  if (!this->_internal_app_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_key().data(), static_cast<int>(this->_internal_app_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceKeys.app_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceKeys)
  return target;
}

size_t DeviceKeys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceKeys)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // string nwk_key = 2;
  if (!this->_internal_nwk_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nwk_key());
  }

  // string app_key = 3;
  if (!this->_internal_app_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceKeys::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceKeys::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceKeys::GetClassData() const { return &_class_data_; }


void DeviceKeys::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceKeys*>(&to_msg);
  auto& from = static_cast<const DeviceKeys&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceKeys)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  if (!from._internal_nwk_key().empty()) {
    _this->_internal_set_nwk_key(from._internal_nwk_key());
  }
  if (!from._internal_app_key().empty()) {
    _this->_internal_set_app_key(from._internal_app_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceKeys::CopyFrom(const DeviceKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceKeys::IsInitialized() const {
  return true;
}

void DeviceKeys::InternalSwap(DeviceKeys* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nwk_key_, lhs_arena,
      &other->_impl_.nwk_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_key_, lhs_arena,
      &other->_impl_.app_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceKeys::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[5]);
}

// ===================================================================

class CreateDeviceRequest::_Internal {
 public:
  static const ::api::Device& device(const CreateDeviceRequest* msg);
};

const ::api::Device&
CreateDeviceRequest::_Internal::device(const CreateDeviceRequest* msg) {
  return *msg->_impl_.device_;
}
CreateDeviceRequest::CreateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.CreateDeviceRequest)
}
CreateDeviceRequest::CreateDeviceRequest(const CreateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateDeviceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    _this->_impl_.device_ = new ::api::Device(*from._impl_.device_);
  }
  // @@protoc_insertion_point(copy_constructor:api.CreateDeviceRequest)
}

inline void CreateDeviceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateDeviceRequest::~CreateDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.CreateDeviceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_;
}

void CreateDeviceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CreateDeviceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDeviceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateDeviceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CreateDeviceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->_internal_has_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CreateDeviceRequest)
  return target;
}

size_t CreateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CreateDeviceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDeviceRequest::GetClassData() const { return &_class_data_; }


void CreateDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateDeviceRequest*>(&to_msg);
  auto& from = static_cast<const CreateDeviceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.CreateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _this->_internal_mutable_device()->::api::Device::MergeFrom(
        from._internal_device());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDeviceRequest::CopyFrom(const CreateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CreateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDeviceRequest::IsInitialized() const {
  return true;
}

void CreateDeviceRequest::InternalSwap(CreateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.device_, other->_impl_.device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDeviceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[6]);
}

// ===================================================================

class GetDeviceRequest::_Internal {
 public:
};

GetDeviceRequest::GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceRequest)
}
GetDeviceRequest::GetDeviceRequest(const GetDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceRequest)
}

inline void GetDeviceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeviceRequest::~GetDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void GetDeviceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.GetDeviceRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceRequest)
  return target;
}

size_t GetDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceRequest::GetClassData() const { return &_class_data_; }


void GetDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceRequest*>(&to_msg);
  auto& from = static_cast<const GetDeviceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceRequest::CopyFrom(const GetDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceRequest::IsInitialized() const {
  return true;
}

void GetDeviceRequest::InternalSwap(GetDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[7]);
}

// ===================================================================

class GetDeviceResponse::_Internal {
 public:
  static const ::api::Device& device(const GetDeviceResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const GetDeviceResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const GetDeviceResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_seen_at(const GetDeviceResponse* msg);
  static const ::api::DeviceStatus& device_status(const GetDeviceResponse* msg);
};

const ::api::Device&
GetDeviceResponse::_Internal::device(const GetDeviceResponse* msg) {
  return *msg->_impl_.device_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceResponse::_Internal::created_at(const GetDeviceResponse* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceResponse::_Internal::updated_at(const GetDeviceResponse* msg) {
  return *msg->_impl_.updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceResponse::_Internal::last_seen_at(const GetDeviceResponse* msg) {
  return *msg->_impl_.last_seen_at_;
}
const ::api::DeviceStatus&
GetDeviceResponse::_Internal::device_status(const GetDeviceResponse* msg) {
  return *msg->_impl_.device_status_;
}
void GetDeviceResponse::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void GetDeviceResponse::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void GetDeviceResponse::clear_last_seen_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_seen_at_ != nullptr) {
    delete _impl_.last_seen_at_;
  }
  _impl_.last_seen_at_ = nullptr;
}
GetDeviceResponse::GetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceResponse)
}
GetDeviceResponse::GetDeviceResponse(const GetDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.last_seen_at_){nullptr}
    , decltype(_impl_.device_status_){nullptr}
    , decltype(_impl_.class_enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    _this->_impl_.device_ = new ::api::Device(*from._impl_.device_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_last_seen_at()) {
    _this->_impl_.last_seen_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_seen_at_);
  }
  if (from._internal_has_device_status()) {
    _this->_impl_.device_status_ = new ::api::DeviceStatus(*from._impl_.device_status_);
  }
  _this->_impl_.class_enabled_ = from._impl_.class_enabled_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceResponse)
}

inline void GetDeviceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.last_seen_at_){nullptr}
    , decltype(_impl_.device_status_){nullptr}
    , decltype(_impl_.class_enabled_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDeviceResponse::~GetDeviceResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.last_seen_at_;
  if (this != internal_default_instance()) delete _impl_.device_status_;
}

void GetDeviceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_seen_at_ != nullptr) {
    delete _impl_.last_seen_at_;
  }
  _impl_.last_seen_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.device_status_ != nullptr) {
    delete _impl_.device_status_;
  }
  _impl_.device_status_ = nullptr;
  _impl_.class_enabled_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_seen_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_seen_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .api.DeviceStatus device_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.DeviceClass class_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_class_enabled(static_cast<::common::DeviceClass>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->_internal_has_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_seen_at = 4;
  if (this->_internal_has_last_seen_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_seen_at(this),
        _Internal::last_seen_at(this).GetCachedSize(), target, stream);
  }

  // .api.DeviceStatus device_status = 5;
  if (this->_internal_has_device_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::device_status(this),
        _Internal::device_status(this).GetCachedSize(), target, stream);
  }

  // .common.DeviceClass class_enabled = 6;
  if (this->_internal_class_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_class_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceResponse)
  return target;
}

size_t GetDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .google.protobuf.Timestamp last_seen_at = 4;
  if (this->_internal_has_last_seen_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_seen_at_);
  }

  // .api.DeviceStatus device_status = 5;
  if (this->_internal_has_device_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_status_);
  }

  // .common.DeviceClass class_enabled = 6;
  if (this->_internal_class_enabled() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_class_enabled());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceResponse::GetClassData() const { return &_class_data_; }


void GetDeviceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceResponse*>(&to_msg);
  auto& from = static_cast<const GetDeviceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _this->_internal_mutable_device()->::api::Device::MergeFrom(
        from._internal_device());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_last_seen_at()) {
    _this->_internal_mutable_last_seen_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_seen_at());
  }
  if (from._internal_has_device_status()) {
    _this->_internal_mutable_device_status()->::api::DeviceStatus::MergeFrom(
        from._internal_device_status());
  }
  if (from._internal_class_enabled() != 0) {
    _this->_internal_set_class_enabled(from._internal_class_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceResponse::CopyFrom(const GetDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceResponse::IsInitialized() const {
  return true;
}

void GetDeviceResponse::InternalSwap(GetDeviceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceResponse, _impl_.class_enabled_)
      + sizeof(GetDeviceResponse::_impl_.class_enabled_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceResponse, _impl_.device_)>(
          reinterpret_cast<char*>(&_impl_.device_),
          reinterpret_cast<char*>(&other->_impl_.device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[8]);
}

// ===================================================================

class UpdateDeviceRequest::_Internal {
 public:
  static const ::api::Device& device(const UpdateDeviceRequest* msg);
};

const ::api::Device&
UpdateDeviceRequest::_Internal::device(const UpdateDeviceRequest* msg) {
  return *msg->_impl_.device_;
}
UpdateDeviceRequest::UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.UpdateDeviceRequest)
}
UpdateDeviceRequest::UpdateDeviceRequest(const UpdateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateDeviceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    _this->_impl_.device_ = new ::api::Device(*from._impl_.device_);
  }
  // @@protoc_insertion_point(copy_constructor:api.UpdateDeviceRequest)
}

inline void UpdateDeviceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateDeviceRequest::~UpdateDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.UpdateDeviceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_;
}

void UpdateDeviceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.UpdateDeviceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeviceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateDeviceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.UpdateDeviceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->_internal_has_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.UpdateDeviceRequest)
  return target;
}

size_t UpdateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.UpdateDeviceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDeviceRequest::GetClassData() const { return &_class_data_; }


void UpdateDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateDeviceRequest*>(&to_msg);
  auto& from = static_cast<const UpdateDeviceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.UpdateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _this->_internal_mutable_device()->::api::Device::MergeFrom(
        from._internal_device());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateDeviceRequest::CopyFrom(const UpdateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.UpdateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceRequest::IsInitialized() const {
  return true;
}

void UpdateDeviceRequest::InternalSwap(UpdateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.device_, other->_impl_.device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeviceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[9]);
}

// ===================================================================

class DeleteDeviceRequest::_Internal {
 public:
};

DeleteDeviceRequest::DeleteDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.DeleteDeviceRequest)
}
DeleteDeviceRequest::DeleteDeviceRequest(const DeleteDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteDeviceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeleteDeviceRequest)
}

inline void DeleteDeviceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteDeviceRequest::~DeleteDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.DeleteDeviceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void DeleteDeviceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeleteDeviceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDeviceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeleteDeviceRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDeviceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeleteDeviceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeleteDeviceRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeleteDeviceRequest)
  return target;
}

size_t DeleteDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeleteDeviceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDeviceRequest::GetClassData() const { return &_class_data_; }


void DeleteDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteDeviceRequest*>(&to_msg);
  auto& from = static_cast<const DeleteDeviceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.DeleteDeviceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDeviceRequest::CopyFrom(const DeleteDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeleteDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDeviceRequest::IsInitialized() const {
  return true;
}

void DeleteDeviceRequest::InternalSwap(DeleteDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDeviceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[10]);
}

// ===================================================================

class ListDevicesRequest::_Internal {
 public:
};

ListDevicesRequest::ListDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.ListDevicesRequest)
}
ListDevicesRequest::ListDevicesRequest(const ListDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDevicesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.search_){}
    , decltype(_impl_.application_id_){}
    , decltype(_impl_.multicast_group_id_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search().empty()) {
    _this->_impl_.search_.Set(from._internal_search(), 
      _this->GetArenaForAllocation());
  }
  _impl_.application_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.application_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_application_id().empty()) {
    _this->_impl_.application_id_.Set(from._internal_application_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.multicast_group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.multicast_group_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_multicast_group_id().empty()) {
    _this->_impl_.multicast_group_id_.Set(from._internal_multicast_group_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:api.ListDevicesRequest)
}

inline void ListDevicesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.search_){}
    , decltype(_impl_.application_id_){}
    , decltype(_impl_.multicast_group_id_){}
    , decltype(_impl_.limit_){0u}
    , decltype(_impl_.offset_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.search_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.application_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.application_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.multicast_group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.multicast_group_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDevicesRequest::~ListDevicesRequest() {
  // @@protoc_insertion_point(destructor:api.ListDevicesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDevicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_.Destroy();
  _impl_.application_id_.Destroy();
  _impl_.multicast_group_id_.Destroy();
}

void ListDevicesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ListDevicesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.search_.ClearToEmpty();
  _impl_.application_id_.ClearToEmpty();
  _impl_.multicast_group_id_.ClearToEmpty();
  ::memset(&_impl_.limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDevicesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string search = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_search();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.ListDevicesRequest.search"));
        } else
          goto handle_unusual;
        continue;
      // string application_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_application_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.ListDevicesRequest.application_id"));
        } else
          goto handle_unusual;
        continue;
      // string multicast_group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_multicast_group_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.ListDevicesRequest.multicast_group_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDevicesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ListDevicesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // string search = 3;
  if (!this->_internal_search().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search().data(), static_cast<int>(this->_internal_search().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ListDevicesRequest.search");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_search(), target);
  }

  // string application_id = 4;
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ListDevicesRequest.application_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_application_id(), target);
  }

  // string multicast_group_id = 5;
  if (!this->_internal_multicast_group_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multicast_group_id().data(), static_cast<int>(this->_internal_multicast_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ListDevicesRequest.multicast_group_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_multicast_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ListDevicesRequest)
  return target;
}

size_t ListDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ListDevicesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search = 3;
  if (!this->_internal_search().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search());
  }

  // string application_id = 4;
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string multicast_group_id = 5;
  if (!this->_internal_multicast_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multicast_group_id());
  }

  // uint32 limit = 1;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDevicesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDevicesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDevicesRequest::GetClassData() const { return &_class_data_; }


void ListDevicesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDevicesRequest*>(&to_msg);
  auto& from = static_cast<const ListDevicesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.ListDevicesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_search().empty()) {
    _this->_internal_set_search(from._internal_search());
  }
  if (!from._internal_application_id().empty()) {
    _this->_internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_multicast_group_id().empty()) {
    _this->_internal_set_multicast_group_id(from._internal_multicast_group_id());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDevicesRequest::CopyFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesRequest::IsInitialized() const {
  return true;
}

void ListDevicesRequest::InternalSwap(ListDevicesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_, lhs_arena,
      &other->_impl_.search_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.application_id_, lhs_arena,
      &other->_impl_.application_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.multicast_group_id_, lhs_arena,
      &other->_impl_.multicast_group_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDevicesRequest, _impl_.offset_)
      + sizeof(ListDevicesRequest::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(ListDevicesRequest, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDevicesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[11]);
}

// ===================================================================

class ListDevicesResponse::_Internal {
 public:
};

ListDevicesResponse::ListDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.ListDevicesResponse)
}
ListDevicesResponse::ListDevicesResponse(const ListDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDevicesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){from._impl_.result_}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_count_ = from._impl_.total_count_;
  // @@protoc_insertion_point(copy_constructor:api.ListDevicesResponse)
}

inline void ListDevicesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){arena}
    , decltype(_impl_.total_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListDevicesResponse::~ListDevicesResponse() {
  // @@protoc_insertion_point(destructor:api.ListDevicesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedPtrField();
}

void ListDevicesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ListDevicesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.Clear();
  _impl_.total_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDevicesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .api.DeviceListItem result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDevicesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ListDevicesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_count = 1;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_count(), target);
  }

  // repeated .api.DeviceListItem result = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ListDevicesResponse)
  return target;
}

size_t ListDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ListDevicesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.DeviceListItem result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->_impl_.result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_count = 1;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDevicesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDevicesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDevicesResponse::GetClassData() const { return &_class_data_; }


void ListDevicesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDevicesResponse*>(&to_msg);
  auto& from = static_cast<const ListDevicesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.ListDevicesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_.MergeFrom(from._impl_.result_);
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDevicesResponse::CopyFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesResponse::IsInitialized() const {
  return true;
}

void ListDevicesResponse::InternalSwap(ListDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
  swap(_impl_.total_count_, other->_impl_.total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDevicesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[12]);
}

// ===================================================================

class CreateDeviceKeysRequest::_Internal {
 public:
  static const ::api::DeviceKeys& device_keys(const CreateDeviceKeysRequest* msg);
};

const ::api::DeviceKeys&
CreateDeviceKeysRequest::_Internal::device_keys(const CreateDeviceKeysRequest* msg) {
  return *msg->_impl_.device_keys_;
}
CreateDeviceKeysRequest::CreateDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.CreateDeviceKeysRequest)
}
CreateDeviceKeysRequest::CreateDeviceKeysRequest(const CreateDeviceKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateDeviceKeysRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_keys_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_keys()) {
    _this->_impl_.device_keys_ = new ::api::DeviceKeys(*from._impl_.device_keys_);
  }
  // @@protoc_insertion_point(copy_constructor:api.CreateDeviceKeysRequest)
}

inline void CreateDeviceKeysRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_keys_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateDeviceKeysRequest::~CreateDeviceKeysRequest() {
  // @@protoc_insertion_point(destructor:api.CreateDeviceKeysRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateDeviceKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_keys_;
}

void CreateDeviceKeysRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateDeviceKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CreateDeviceKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_keys_ != nullptr) {
    delete _impl_.device_keys_;
  }
  _impl_.device_keys_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDeviceKeysRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api.DeviceKeys device_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_keys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateDeviceKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CreateDeviceKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->_internal_has_device_keys()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device_keys(this),
        _Internal::device_keys(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CreateDeviceKeysRequest)
  return target;
}

size_t CreateDeviceKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CreateDeviceKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->_internal_has_device_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_keys_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDeviceKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateDeviceKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDeviceKeysRequest::GetClassData() const { return &_class_data_; }


void CreateDeviceKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateDeviceKeysRequest*>(&to_msg);
  auto& from = static_cast<const CreateDeviceKeysRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.CreateDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_keys()) {
    _this->_internal_mutable_device_keys()->::api::DeviceKeys::MergeFrom(
        from._internal_device_keys());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDeviceKeysRequest::CopyFrom(const CreateDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CreateDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDeviceKeysRequest::IsInitialized() const {
  return true;
}

void CreateDeviceKeysRequest::InternalSwap(CreateDeviceKeysRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.device_keys_, other->_impl_.device_keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDeviceKeysRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[13]);
}

// ===================================================================

class GetDeviceKeysRequest::_Internal {
 public:
};

GetDeviceKeysRequest::GetDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceKeysRequest)
}
GetDeviceKeysRequest::GetDeviceKeysRequest(const GetDeviceKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceKeysRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceKeysRequest)
}

inline void GetDeviceKeysRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeviceKeysRequest::~GetDeviceKeysRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceKeysRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void GetDeviceKeysRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceKeysRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.GetDeviceKeysRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceKeysRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceKeysRequest)
  return target;
}

size_t GetDeviceKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceKeysRequest::GetClassData() const { return &_class_data_; }


void GetDeviceKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceKeysRequest*>(&to_msg);
  auto& from = static_cast<const GetDeviceKeysRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceKeysRequest::CopyFrom(const GetDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceKeysRequest::IsInitialized() const {
  return true;
}

void GetDeviceKeysRequest::InternalSwap(GetDeviceKeysRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceKeysRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[14]);
}

// ===================================================================

class GetDeviceKeysResponse::_Internal {
 public:
  static const ::api::DeviceKeys& device_keys(const GetDeviceKeysResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const GetDeviceKeysResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const GetDeviceKeysResponse* msg);
};

const ::api::DeviceKeys&
GetDeviceKeysResponse::_Internal::device_keys(const GetDeviceKeysResponse* msg) {
  return *msg->_impl_.device_keys_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceKeysResponse::_Internal::created_at(const GetDeviceKeysResponse* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceKeysResponse::_Internal::updated_at(const GetDeviceKeysResponse* msg) {
  return *msg->_impl_.updated_at_;
}
void GetDeviceKeysResponse::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void GetDeviceKeysResponse::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
GetDeviceKeysResponse::GetDeviceKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceKeysResponse)
}
GetDeviceKeysResponse::GetDeviceKeysResponse(const GetDeviceKeysResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceKeysResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_keys_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_keys()) {
    _this->_impl_.device_keys_ = new ::api::DeviceKeys(*from._impl_.device_keys_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceKeysResponse)
}

inline void GetDeviceKeysResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_keys_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDeviceKeysResponse::~GetDeviceKeysResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceKeysResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceKeysResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_keys_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void GetDeviceKeysResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceKeysResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_keys_ != nullptr) {
    delete _impl_.device_keys_;
  }
  _impl_.device_keys_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceKeysResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api.DeviceKeys device_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_keys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceKeysResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceKeysResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->_internal_has_device_keys()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device_keys(this),
        _Internal::device_keys(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceKeysResponse)
  return target;
}

size_t GetDeviceKeysResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceKeysResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->_internal_has_device_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_keys_);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceKeysResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceKeysResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceKeysResponse::GetClassData() const { return &_class_data_; }


void GetDeviceKeysResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceKeysResponse*>(&to_msg);
  auto& from = static_cast<const GetDeviceKeysResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceKeysResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_keys()) {
    _this->_internal_mutable_device_keys()->::api::DeviceKeys::MergeFrom(
        from._internal_device_keys());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceKeysResponse::CopyFrom(const GetDeviceKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceKeysResponse::IsInitialized() const {
  return true;
}

void GetDeviceKeysResponse::InternalSwap(GetDeviceKeysResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceKeysResponse, _impl_.updated_at_)
      + sizeof(GetDeviceKeysResponse::_impl_.updated_at_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceKeysResponse, _impl_.device_keys_)>(
          reinterpret_cast<char*>(&_impl_.device_keys_),
          reinterpret_cast<char*>(&other->_impl_.device_keys_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceKeysResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[15]);
}

// ===================================================================

class UpdateDeviceKeysRequest::_Internal {
 public:
  static const ::api::DeviceKeys& device_keys(const UpdateDeviceKeysRequest* msg);
};

const ::api::DeviceKeys&
UpdateDeviceKeysRequest::_Internal::device_keys(const UpdateDeviceKeysRequest* msg) {
  return *msg->_impl_.device_keys_;
}
UpdateDeviceKeysRequest::UpdateDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.UpdateDeviceKeysRequest)
}
UpdateDeviceKeysRequest::UpdateDeviceKeysRequest(const UpdateDeviceKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateDeviceKeysRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_keys_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_keys()) {
    _this->_impl_.device_keys_ = new ::api::DeviceKeys(*from._impl_.device_keys_);
  }
  // @@protoc_insertion_point(copy_constructor:api.UpdateDeviceKeysRequest)
}

inline void UpdateDeviceKeysRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_keys_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateDeviceKeysRequest::~UpdateDeviceKeysRequest() {
  // @@protoc_insertion_point(destructor:api.UpdateDeviceKeysRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateDeviceKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_keys_;
}

void UpdateDeviceKeysRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateDeviceKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.UpdateDeviceKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_keys_ != nullptr) {
    delete _impl_.device_keys_;
  }
  _impl_.device_keys_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDeviceKeysRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api.DeviceKeys device_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_keys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateDeviceKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.UpdateDeviceKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->_internal_has_device_keys()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device_keys(this),
        _Internal::device_keys(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.UpdateDeviceKeysRequest)
  return target;
}

size_t UpdateDeviceKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.UpdateDeviceKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceKeys device_keys = 1;
  if (this->_internal_has_device_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_keys_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDeviceKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateDeviceKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDeviceKeysRequest::GetClassData() const { return &_class_data_; }


void UpdateDeviceKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateDeviceKeysRequest*>(&to_msg);
  auto& from = static_cast<const UpdateDeviceKeysRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.UpdateDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_keys()) {
    _this->_internal_mutable_device_keys()->::api::DeviceKeys::MergeFrom(
        from._internal_device_keys());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateDeviceKeysRequest::CopyFrom(const UpdateDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.UpdateDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceKeysRequest::IsInitialized() const {
  return true;
}

void UpdateDeviceKeysRequest::InternalSwap(UpdateDeviceKeysRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.device_keys_, other->_impl_.device_keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDeviceKeysRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[16]);
}

// ===================================================================

class DeleteDeviceKeysRequest::_Internal {
 public:
};

DeleteDeviceKeysRequest::DeleteDeviceKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.DeleteDeviceKeysRequest)
}
DeleteDeviceKeysRequest::DeleteDeviceKeysRequest(const DeleteDeviceKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteDeviceKeysRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeleteDeviceKeysRequest)
}

inline void DeleteDeviceKeysRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteDeviceKeysRequest::~DeleteDeviceKeysRequest() {
  // @@protoc_insertion_point(destructor:api.DeleteDeviceKeysRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteDeviceKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void DeleteDeviceKeysRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteDeviceKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeleteDeviceKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDeviceKeysRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeleteDeviceKeysRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDeviceKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeleteDeviceKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeleteDeviceKeysRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeleteDeviceKeysRequest)
  return target;
}

size_t DeleteDeviceKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeleteDeviceKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDeviceKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteDeviceKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDeviceKeysRequest::GetClassData() const { return &_class_data_; }


void DeleteDeviceKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteDeviceKeysRequest*>(&to_msg);
  auto& from = static_cast<const DeleteDeviceKeysRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.DeleteDeviceKeysRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDeviceKeysRequest::CopyFrom(const DeleteDeviceKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeleteDeviceKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDeviceKeysRequest::IsInitialized() const {
  return true;
}

void DeleteDeviceKeysRequest::InternalSwap(DeleteDeviceKeysRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDeviceKeysRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[17]);
}

// ===================================================================

class DeviceActivation::_Internal {
 public:
};

DeviceActivation::DeviceActivation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.DeviceActivation)
}
DeviceActivation::DeviceActivation(const DeviceActivation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceActivation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.dev_addr_){}
    , decltype(_impl_.app_s_key_){}
    , decltype(_impl_.nwk_s_enc_key_){}
    , decltype(_impl_.s_nwk_s_int_key_){}
    , decltype(_impl_.f_nwk_s_int_key_){}
    , decltype(_impl_.f_cnt_up_){}
    , decltype(_impl_.n_f_cnt_down_){}
    , decltype(_impl_.a_f_cnt_down_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dev_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_addr().empty()) {
    _this->_impl_.dev_addr_.Set(from._internal_dev_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_s_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_s_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_s_key().empty()) {
    _this->_impl_.app_s_key_.Set(from._internal_app_s_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nwk_s_enc_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nwk_s_enc_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nwk_s_enc_key().empty()) {
    _this->_impl_.nwk_s_enc_key_.Set(from._internal_nwk_s_enc_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s_nwk_s_int_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_nwk_s_int_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_nwk_s_int_key().empty()) {
    _this->_impl_.s_nwk_s_int_key_.Set(from._internal_s_nwk_s_int_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.f_nwk_s_int_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f_nwk_s_int_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f_nwk_s_int_key().empty()) {
    _this->_impl_.f_nwk_s_int_key_.Set(from._internal_f_nwk_s_int_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.f_cnt_up_, &from._impl_.f_cnt_up_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a_f_cnt_down_) -
    reinterpret_cast<char*>(&_impl_.f_cnt_up_)) + sizeof(_impl_.a_f_cnt_down_));
  // @@protoc_insertion_point(copy_constructor:api.DeviceActivation)
}

inline void DeviceActivation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.dev_addr_){}
    , decltype(_impl_.app_s_key_){}
    , decltype(_impl_.nwk_s_enc_key_){}
    , decltype(_impl_.s_nwk_s_int_key_){}
    , decltype(_impl_.f_nwk_s_int_key_){}
    , decltype(_impl_.f_cnt_up_){0u}
    , decltype(_impl_.n_f_cnt_down_){0u}
    , decltype(_impl_.a_f_cnt_down_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dev_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_s_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_s_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nwk_s_enc_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nwk_s_enc_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s_nwk_s_int_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_nwk_s_int_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_nwk_s_int_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f_nwk_s_int_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceActivation::~DeviceActivation() {
  // @@protoc_insertion_point(destructor:api.DeviceActivation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceActivation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
  _impl_.dev_addr_.Destroy();
  _impl_.app_s_key_.Destroy();
  _impl_.nwk_s_enc_key_.Destroy();
  _impl_.s_nwk_s_int_key_.Destroy();
  _impl_.f_nwk_s_int_key_.Destroy();
}

void DeviceActivation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceActivation::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceActivation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _impl_.dev_addr_.ClearToEmpty();
  _impl_.app_s_key_.ClearToEmpty();
  _impl_.nwk_s_enc_key_.ClearToEmpty();
  _impl_.s_nwk_s_int_key_.ClearToEmpty();
  _impl_.f_nwk_s_int_key_.ClearToEmpty();
  ::memset(&_impl_.f_cnt_up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a_f_cnt_down_) -
      reinterpret_cast<char*>(&_impl_.f_cnt_up_)) + sizeof(_impl_.a_f_cnt_down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceActivation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceActivation.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      // string dev_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dev_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceActivation.dev_addr"));
        } else
          goto handle_unusual;
        continue;
      // string app_s_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_s_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceActivation.app_s_key"));
        } else
          goto handle_unusual;
        continue;
      // string nwk_s_enc_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nwk_s_enc_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceActivation.nwk_s_enc_key"));
        } else
          goto handle_unusual;
        continue;
      // uint32 f_cnt_up = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.f_cnt_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 n_f_cnt_down = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.n_f_cnt_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string s_nwk_s_int_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_s_nwk_s_int_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceActivation.s_nwk_s_int_key"));
        } else
          goto handle_unusual;
        continue;
      // string f_nwk_s_int_key = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_f_nwk_s_int_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceActivation.f_nwk_s_int_key"));
        } else
          goto handle_unusual;
        continue;
      // uint32 a_f_cnt_down = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.a_f_cnt_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceActivation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceActivation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // string dev_addr = 2;
  if (!this->_internal_dev_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_addr().data(), static_cast<int>(this->_internal_dev_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.dev_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dev_addr(), target);
  }

  // string app_s_key = 3;
  if (!this->_internal_app_s_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_s_key().data(), static_cast<int>(this->_internal_app_s_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.app_s_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_s_key(), target);
  }

  // string nwk_s_enc_key = 4;
  if (!this->_internal_nwk_s_enc_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nwk_s_enc_key().data(), static_cast<int>(this->_internal_nwk_s_enc_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.nwk_s_enc_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nwk_s_enc_key(), target);
  }

  // uint32 f_cnt_up = 5;
  if (this->_internal_f_cnt_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_f_cnt_up(), target);
  }

  // uint32 n_f_cnt_down = 6;
  if (this->_internal_n_f_cnt_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_n_f_cnt_down(), target);
  }

  // string s_nwk_s_int_key = 8;
  if (!this->_internal_s_nwk_s_int_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_nwk_s_int_key().data(), static_cast<int>(this->_internal_s_nwk_s_int_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.s_nwk_s_int_key");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_s_nwk_s_int_key(), target);
  }

  // string f_nwk_s_int_key = 9;
  if (!this->_internal_f_nwk_s_int_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_f_nwk_s_int_key().data(), static_cast<int>(this->_internal_f_nwk_s_int_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceActivation.f_nwk_s_int_key");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_f_nwk_s_int_key(), target);
  }

  // uint32 a_f_cnt_down = 10;
  if (this->_internal_a_f_cnt_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_a_f_cnt_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceActivation)
  return target;
}

size_t DeviceActivation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceActivation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // string dev_addr = 2;
  if (!this->_internal_dev_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_addr());
  }

  // string app_s_key = 3;
  if (!this->_internal_app_s_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_s_key());
  }

  // string nwk_s_enc_key = 4;
  if (!this->_internal_nwk_s_enc_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nwk_s_enc_key());
  }

  // string s_nwk_s_int_key = 8;
  if (!this->_internal_s_nwk_s_int_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_nwk_s_int_key());
  }

  // string f_nwk_s_int_key = 9;
  if (!this->_internal_f_nwk_s_int_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f_nwk_s_int_key());
  }

  // uint32 f_cnt_up = 5;
  if (this->_internal_f_cnt_up() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_f_cnt_up());
  }

  // uint32 n_f_cnt_down = 6;
  if (this->_internal_n_f_cnt_down() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_n_f_cnt_down());
  }

  // uint32 a_f_cnt_down = 10;
  if (this->_internal_a_f_cnt_down() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a_f_cnt_down());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceActivation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceActivation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceActivation::GetClassData() const { return &_class_data_; }


void DeviceActivation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceActivation*>(&to_msg);
  auto& from = static_cast<const DeviceActivation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceActivation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  if (!from._internal_dev_addr().empty()) {
    _this->_internal_set_dev_addr(from._internal_dev_addr());
  }
  if (!from._internal_app_s_key().empty()) {
    _this->_internal_set_app_s_key(from._internal_app_s_key());
  }
  if (!from._internal_nwk_s_enc_key().empty()) {
    _this->_internal_set_nwk_s_enc_key(from._internal_nwk_s_enc_key());
  }
  if (!from._internal_s_nwk_s_int_key().empty()) {
    _this->_internal_set_s_nwk_s_int_key(from._internal_s_nwk_s_int_key());
  }
  if (!from._internal_f_nwk_s_int_key().empty()) {
    _this->_internal_set_f_nwk_s_int_key(from._internal_f_nwk_s_int_key());
  }
  if (from._internal_f_cnt_up() != 0) {
    _this->_internal_set_f_cnt_up(from._internal_f_cnt_up());
  }
  if (from._internal_n_f_cnt_down() != 0) {
    _this->_internal_set_n_f_cnt_down(from._internal_n_f_cnt_down());
  }
  if (from._internal_a_f_cnt_down() != 0) {
    _this->_internal_set_a_f_cnt_down(from._internal_a_f_cnt_down());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceActivation::CopyFrom(const DeviceActivation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceActivation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceActivation::IsInitialized() const {
  return true;
}

void DeviceActivation::InternalSwap(DeviceActivation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_addr_, lhs_arena,
      &other->_impl_.dev_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_s_key_, lhs_arena,
      &other->_impl_.app_s_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nwk_s_enc_key_, lhs_arena,
      &other->_impl_.nwk_s_enc_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s_nwk_s_int_key_, lhs_arena,
      &other->_impl_.s_nwk_s_int_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f_nwk_s_int_key_, lhs_arena,
      &other->_impl_.f_nwk_s_int_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceActivation, _impl_.a_f_cnt_down_)
      + sizeof(DeviceActivation::_impl_.a_f_cnt_down_)
      - PROTOBUF_FIELD_OFFSET(DeviceActivation, _impl_.f_cnt_up_)>(
          reinterpret_cast<char*>(&_impl_.f_cnt_up_),
          reinterpret_cast<char*>(&other->_impl_.f_cnt_up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceActivation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[18]);
}

// ===================================================================

class ActivateDeviceRequest::_Internal {
 public:
  static const ::api::DeviceActivation& device_activation(const ActivateDeviceRequest* msg);
};

const ::api::DeviceActivation&
ActivateDeviceRequest::_Internal::device_activation(const ActivateDeviceRequest* msg) {
  return *msg->_impl_.device_activation_;
}
ActivateDeviceRequest::ActivateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.ActivateDeviceRequest)
}
ActivateDeviceRequest::ActivateDeviceRequest(const ActivateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivateDeviceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_activation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_activation()) {
    _this->_impl_.device_activation_ = new ::api::DeviceActivation(*from._impl_.device_activation_);
  }
  // @@protoc_insertion_point(copy_constructor:api.ActivateDeviceRequest)
}

inline void ActivateDeviceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_activation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActivateDeviceRequest::~ActivateDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.ActivateDeviceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_activation_;
}

void ActivateDeviceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ActivateDeviceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_activation_ != nullptr) {
    delete _impl_.device_activation_;
  }
  _impl_.device_activation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivateDeviceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api.DeviceActivation device_activation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_activation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivateDeviceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ActivateDeviceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceActivation device_activation = 1;
  if (this->_internal_has_device_activation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device_activation(this),
        _Internal::device_activation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ActivateDeviceRequest)
  return target;
}

size_t ActivateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ActivateDeviceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceActivation device_activation = 1;
  if (this->_internal_has_device_activation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_activation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivateDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivateDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivateDeviceRequest::GetClassData() const { return &_class_data_; }


void ActivateDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivateDeviceRequest*>(&to_msg);
  auto& from = static_cast<const ActivateDeviceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.ActivateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_activation()) {
    _this->_internal_mutable_device_activation()->::api::DeviceActivation::MergeFrom(
        from._internal_device_activation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivateDeviceRequest::CopyFrom(const ActivateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ActivateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateDeviceRequest::IsInitialized() const {
  return true;
}

void ActivateDeviceRequest::InternalSwap(ActivateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.device_activation_, other->_impl_.device_activation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateDeviceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[19]);
}

// ===================================================================

class DeactivateDeviceRequest::_Internal {
 public:
};

DeactivateDeviceRequest::DeactivateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.DeactivateDeviceRequest)
}
DeactivateDeviceRequest::DeactivateDeviceRequest(const DeactivateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeactivateDeviceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeactivateDeviceRequest)
}

inline void DeactivateDeviceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeactivateDeviceRequest::~DeactivateDeviceRequest() {
  // @@protoc_insertion_point(destructor:api.DeactivateDeviceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeactivateDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void DeactivateDeviceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeactivateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeactivateDeviceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeactivateDeviceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeactivateDeviceRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeactivateDeviceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeactivateDeviceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeactivateDeviceRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeactivateDeviceRequest)
  return target;
}

size_t DeactivateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeactivateDeviceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeactivateDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeactivateDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeactivateDeviceRequest::GetClassData() const { return &_class_data_; }


void DeactivateDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeactivateDeviceRequest*>(&to_msg);
  auto& from = static_cast<const DeactivateDeviceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.DeactivateDeviceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeactivateDeviceRequest::CopyFrom(const DeactivateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeactivateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeactivateDeviceRequest::IsInitialized() const {
  return true;
}

void DeactivateDeviceRequest::InternalSwap(DeactivateDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeactivateDeviceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[20]);
}

// ===================================================================

class GetDeviceActivationRequest::_Internal {
 public:
};

GetDeviceActivationRequest::GetDeviceActivationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceActivationRequest)
}
GetDeviceActivationRequest::GetDeviceActivationRequest(const GetDeviceActivationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceActivationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceActivationRequest)
}

inline void GetDeviceActivationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeviceActivationRequest::~GetDeviceActivationRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceActivationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceActivationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void GetDeviceActivationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceActivationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceActivationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceActivationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.GetDeviceActivationRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceActivationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceActivationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceActivationRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceActivationRequest)
  return target;
}

size_t GetDeviceActivationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceActivationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceActivationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceActivationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceActivationRequest::GetClassData() const { return &_class_data_; }


void GetDeviceActivationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceActivationRequest*>(&to_msg);
  auto& from = static_cast<const GetDeviceActivationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceActivationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceActivationRequest::CopyFrom(const GetDeviceActivationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceActivationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceActivationRequest::IsInitialized() const {
  return true;
}

void GetDeviceActivationRequest::InternalSwap(GetDeviceActivationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceActivationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[21]);
}

// ===================================================================

class GetDeviceActivationResponse::_Internal {
 public:
  static const ::api::DeviceActivation& device_activation(const GetDeviceActivationResponse* msg);
  static const ::common::JoinServerContext& join_server_context(const GetDeviceActivationResponse* msg);
};

const ::api::DeviceActivation&
GetDeviceActivationResponse::_Internal::device_activation(const GetDeviceActivationResponse* msg) {
  return *msg->_impl_.device_activation_;
}
const ::common::JoinServerContext&
GetDeviceActivationResponse::_Internal::join_server_context(const GetDeviceActivationResponse* msg) {
  return *msg->_impl_.join_server_context_;
}
void GetDeviceActivationResponse::clear_join_server_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.join_server_context_ != nullptr) {
    delete _impl_.join_server_context_;
  }
  _impl_.join_server_context_ = nullptr;
}
GetDeviceActivationResponse::GetDeviceActivationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceActivationResponse)
}
GetDeviceActivationResponse::GetDeviceActivationResponse(const GetDeviceActivationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceActivationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_activation_){nullptr}
    , decltype(_impl_.join_server_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_activation()) {
    _this->_impl_.device_activation_ = new ::api::DeviceActivation(*from._impl_.device_activation_);
  }
  if (from._internal_has_join_server_context()) {
    _this->_impl_.join_server_context_ = new ::common::JoinServerContext(*from._impl_.join_server_context_);
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceActivationResponse)
}

inline void GetDeviceActivationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_activation_){nullptr}
    , decltype(_impl_.join_server_context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDeviceActivationResponse::~GetDeviceActivationResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceActivationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceActivationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_activation_;
  if (this != internal_default_instance()) delete _impl_.join_server_context_;
}

void GetDeviceActivationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceActivationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceActivationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_activation_ != nullptr) {
    delete _impl_.device_activation_;
  }
  _impl_.device_activation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.join_server_context_ != nullptr) {
    delete _impl_.join_server_context_;
  }
  _impl_.join_server_context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceActivationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api.DeviceActivation device_activation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_activation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.JoinServerContext join_server_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_join_server_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceActivationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceActivationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceActivation device_activation = 1;
  if (this->_internal_has_device_activation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device_activation(this),
        _Internal::device_activation(this).GetCachedSize(), target, stream);
  }

  // .common.JoinServerContext join_server_context = 2;
  if (this->_internal_has_join_server_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::join_server_context(this),
        _Internal::join_server_context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceActivationResponse)
  return target;
}

size_t GetDeviceActivationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceActivationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceActivation device_activation = 1;
  if (this->_internal_has_device_activation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_activation_);
  }

  // .common.JoinServerContext join_server_context = 2;
  if (this->_internal_has_join_server_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.join_server_context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceActivationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceActivationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceActivationResponse::GetClassData() const { return &_class_data_; }


void GetDeviceActivationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceActivationResponse*>(&to_msg);
  auto& from = static_cast<const GetDeviceActivationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceActivationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_activation()) {
    _this->_internal_mutable_device_activation()->::api::DeviceActivation::MergeFrom(
        from._internal_device_activation());
  }
  if (from._internal_has_join_server_context()) {
    _this->_internal_mutable_join_server_context()->::common::JoinServerContext::MergeFrom(
        from._internal_join_server_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceActivationResponse::CopyFrom(const GetDeviceActivationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceActivationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceActivationResponse::IsInitialized() const {
  return true;
}

void GetDeviceActivationResponse::InternalSwap(GetDeviceActivationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceActivationResponse, _impl_.join_server_context_)
      + sizeof(GetDeviceActivationResponse::_impl_.join_server_context_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceActivationResponse, _impl_.device_activation_)>(
          reinterpret_cast<char*>(&_impl_.device_activation_),
          reinterpret_cast<char*>(&other->_impl_.device_activation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceActivationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[22]);
}

// ===================================================================

class GetRandomDevAddrRequest::_Internal {
 public:
};

GetRandomDevAddrRequest::GetRandomDevAddrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetRandomDevAddrRequest)
}
GetRandomDevAddrRequest::GetRandomDevAddrRequest(const GetRandomDevAddrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRandomDevAddrRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetRandomDevAddrRequest)
}

inline void GetRandomDevAddrRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRandomDevAddrRequest::~GetRandomDevAddrRequest() {
  // @@protoc_insertion_point(destructor:api.GetRandomDevAddrRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRandomDevAddrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void GetRandomDevAddrRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRandomDevAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetRandomDevAddrRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRandomDevAddrRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.GetRandomDevAddrRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRandomDevAddrRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetRandomDevAddrRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetRandomDevAddrRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetRandomDevAddrRequest)
  return target;
}

size_t GetRandomDevAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetRandomDevAddrRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRandomDevAddrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRandomDevAddrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRandomDevAddrRequest::GetClassData() const { return &_class_data_; }


void GetRandomDevAddrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRandomDevAddrRequest*>(&to_msg);
  auto& from = static_cast<const GetRandomDevAddrRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetRandomDevAddrRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRandomDevAddrRequest::CopyFrom(const GetRandomDevAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetRandomDevAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomDevAddrRequest::IsInitialized() const {
  return true;
}

void GetRandomDevAddrRequest::InternalSwap(GetRandomDevAddrRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRandomDevAddrRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[23]);
}

// ===================================================================

class GetRandomDevAddrResponse::_Internal {
 public:
};

GetRandomDevAddrResponse::GetRandomDevAddrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetRandomDevAddrResponse)
}
GetRandomDevAddrResponse::GetRandomDevAddrResponse(const GetRandomDevAddrResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRandomDevAddrResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_addr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_addr().empty()) {
    _this->_impl_.dev_addr_.Set(from._internal_dev_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetRandomDevAddrResponse)
}

inline void GetRandomDevAddrResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_addr_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRandomDevAddrResponse::~GetRandomDevAddrResponse() {
  // @@protoc_insertion_point(destructor:api.GetRandomDevAddrResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRandomDevAddrResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_addr_.Destroy();
}

void GetRandomDevAddrResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRandomDevAddrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetRandomDevAddrResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_addr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRandomDevAddrResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.GetRandomDevAddrResponse.dev_addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRandomDevAddrResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetRandomDevAddrResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_addr = 1;
  if (!this->_internal_dev_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_addr().data(), static_cast<int>(this->_internal_dev_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetRandomDevAddrResponse.dev_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetRandomDevAddrResponse)
  return target;
}

size_t GetRandomDevAddrResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetRandomDevAddrResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_addr = 1;
  if (!this->_internal_dev_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRandomDevAddrResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRandomDevAddrResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRandomDevAddrResponse::GetClassData() const { return &_class_data_; }


void GetRandomDevAddrResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRandomDevAddrResponse*>(&to_msg);
  auto& from = static_cast<const GetRandomDevAddrResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetRandomDevAddrResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_addr().empty()) {
    _this->_internal_set_dev_addr(from._internal_dev_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRandomDevAddrResponse::CopyFrom(const GetRandomDevAddrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetRandomDevAddrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRandomDevAddrResponse::IsInitialized() const {
  return true;
}

void GetRandomDevAddrResponse::InternalSwap(GetRandomDevAddrResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_addr_, lhs_arena,
      &other->_impl_.dev_addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRandomDevAddrResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[24]);
}

// ===================================================================

class GetDeviceMetricsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start(const GetDeviceMetricsRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end(const GetDeviceMetricsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceMetricsRequest::_Internal::start(const GetDeviceMetricsRequest* msg) {
  return *msg->_impl_.start_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceMetricsRequest::_Internal::end(const GetDeviceMetricsRequest* msg) {
  return *msg->_impl_.end_;
}
void GetDeviceMetricsRequest::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
void GetDeviceMetricsRequest::clear_end() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
}
GetDeviceMetricsRequest::GetDeviceMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceMetricsRequest)
}
GetDeviceMetricsRequest::GetDeviceMetricsRequest(const GetDeviceMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , decltype(_impl_.aggregation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start()) {
    _this->_impl_.start_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_);
  }
  if (from._internal_has_end()) {
    _this->_impl_.end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_);
  }
  _this->_impl_.aggregation_ = from._impl_.aggregation_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceMetricsRequest)
}

inline void GetDeviceMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , decltype(_impl_.aggregation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeviceMetricsRequest::~GetDeviceMetricsRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void GetDeviceMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
  _impl_.aggregation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.GetDeviceMetricsRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Aggregation aggregation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation(static_cast<::common::Aggregation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceMetricsRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->_internal_has_start()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->_internal_has_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  // .common.Aggregation aggregation = 4;
  if (this->_internal_aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_aggregation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceMetricsRequest)
  return target;
}

size_t GetDeviceMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_);
  }

  // .common.Aggregation aggregation = 4;
  if (this->_internal_aggregation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_aggregation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceMetricsRequest::GetClassData() const { return &_class_data_; }


void GetDeviceMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceMetricsRequest*>(&to_msg);
  auto& from = static_cast<const GetDeviceMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from._internal_has_start()) {
    _this->_internal_mutable_start()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start());
  }
  if (from._internal_has_end()) {
    _this->_internal_mutable_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end());
  }
  if (from._internal_aggregation() != 0) {
    _this->_internal_set_aggregation(from._internal_aggregation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceMetricsRequest::CopyFrom(const GetDeviceMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceMetricsRequest::IsInitialized() const {
  return true;
}

void GetDeviceMetricsRequest::InternalSwap(GetDeviceMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceMetricsRequest, _impl_.aggregation_)
      + sizeof(GetDeviceMetricsRequest::_impl_.aggregation_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceMetricsRequest, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[25]);
}

// ===================================================================

GetDeviceMetricsResponse_MetricsEntry_DoNotUse::GetDeviceMetricsResponse_MetricsEntry_DoNotUse() {}
GetDeviceMetricsResponse_MetricsEntry_DoNotUse::GetDeviceMetricsResponse_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetDeviceMetricsResponse_MetricsEntry_DoNotUse::MergeFrom(const GetDeviceMetricsResponse_MetricsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceMetricsResponse_MetricsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[26]);
}

// ===================================================================

GetDeviceMetricsResponse_StatesEntry_DoNotUse::GetDeviceMetricsResponse_StatesEntry_DoNotUse() {}
GetDeviceMetricsResponse_StatesEntry_DoNotUse::GetDeviceMetricsResponse_StatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetDeviceMetricsResponse_StatesEntry_DoNotUse::MergeFrom(const GetDeviceMetricsResponse_StatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceMetricsResponse_StatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[27]);
}

// ===================================================================

class GetDeviceMetricsResponse::_Internal {
 public:
};

void GetDeviceMetricsResponse::clear_metrics() {
  _impl_.metrics_.Clear();
}
GetDeviceMetricsResponse::GetDeviceMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetDeviceMetricsResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceMetricsResponse)
}
GetDeviceMetricsResponse::GetDeviceMetricsResponse(const GetDeviceMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceMetricsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metrics_)*/{}
    , /*decltype(_impl_.states_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceMetricsResponse)
}

inline void GetDeviceMetricsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metrics_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.states_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDeviceMetricsResponse::~GetDeviceMetricsResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceMetricsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetDeviceMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metrics_.Destruct();
  _impl_.metrics_.~MapField();
  _impl_.states_.Destruct();
  _impl_.states_.~MapField();
}

void GetDeviceMetricsResponse::ArenaDtor(void* object) {
  GetDeviceMetricsResponse* _this = reinterpret_cast< GetDeviceMetricsResponse* >(object);
  _this->_impl_.metrics_.Destruct();
  _this->_impl_.states_.Destruct();
}
void GetDeviceMetricsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  _impl_.states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceMetricsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .common.Metric> metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metrics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .api.DeviceState> states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.states_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .common.Metric> metrics = 1;
  if (!this->_internal_metrics().empty()) {
    using MapType = ::_pb::Map<std::string, ::common::Metric>;
    using WireHelper = GetDeviceMetricsResponse_MetricsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metrics();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "api.GetDeviceMetricsResponse.MetricsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .api.DeviceState> states = 2;
  if (!this->_internal_states().empty()) {
    using MapType = ::_pb::Map<std::string, ::api::DeviceState>;
    using WireHelper = GetDeviceMetricsResponse_StatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_states();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "api.GetDeviceMetricsResponse.StatesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceMetricsResponse)
  return target;
}

size_t GetDeviceMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .common.Metric> metrics = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metrics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::common::Metric >::const_iterator
      it = this->_internal_metrics().begin();
      it != this->_internal_metrics().end(); ++it) {
    total_size += GetDeviceMetricsResponse_MetricsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .api.DeviceState> states = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_states_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api::DeviceState >::const_iterator
      it = this->_internal_states().begin();
      it != this->_internal_states().end(); ++it) {
    total_size += GetDeviceMetricsResponse_StatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceMetricsResponse::GetClassData() const { return &_class_data_; }


void GetDeviceMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceMetricsResponse*>(&to_msg);
  auto& from = static_cast<const GetDeviceMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceMetricsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceMetricsResponse::CopyFrom(const GetDeviceMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceMetricsResponse::IsInitialized() const {
  return true;
}

void GetDeviceMetricsResponse::InternalSwap(GetDeviceMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[28]);
}

// ===================================================================

class DeviceState::_Internal {
 public:
};

DeviceState::DeviceState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.DeviceState)
}
DeviceState::DeviceState(const DeviceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.DeviceState)
}

inline void DeviceState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceState::~DeviceState() {
  // @@protoc_insertion_point(destructor:api.DeviceState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void DeviceState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceState::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceState.name"));
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceState.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceState.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceState.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceState)
  return target;
}

size_t DeviceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceState::GetClassData() const { return &_class_data_; }


void DeviceState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceState*>(&to_msg);
  auto& from = static_cast<const DeviceState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceState::CopyFrom(const DeviceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceState::IsInitialized() const {
  return true;
}

void DeviceState::InternalSwap(DeviceState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[29]);
}

// ===================================================================

class GetDeviceLinkMetricsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start(const GetDeviceLinkMetricsRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end(const GetDeviceLinkMetricsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceLinkMetricsRequest::_Internal::start(const GetDeviceLinkMetricsRequest* msg) {
  return *msg->_impl_.start_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDeviceLinkMetricsRequest::_Internal::end(const GetDeviceLinkMetricsRequest* msg) {
  return *msg->_impl_.end_;
}
void GetDeviceLinkMetricsRequest::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
void GetDeviceLinkMetricsRequest::clear_end() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
}
GetDeviceLinkMetricsRequest::GetDeviceLinkMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceLinkMetricsRequest)
}
GetDeviceLinkMetricsRequest::GetDeviceLinkMetricsRequest(const GetDeviceLinkMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceLinkMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , decltype(_impl_.aggregation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start()) {
    _this->_impl_.start_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_);
  }
  if (from._internal_has_end()) {
    _this->_impl_.end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_);
  }
  _this->_impl_.aggregation_ = from._impl_.aggregation_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceLinkMetricsRequest)
}

inline void GetDeviceLinkMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , decltype(_impl_.aggregation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeviceLinkMetricsRequest::~GetDeviceLinkMetricsRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceLinkMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceLinkMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void GetDeviceLinkMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceLinkMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceLinkMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
  _impl_.aggregation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceLinkMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.GetDeviceLinkMetricsRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Aggregation aggregation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation(static_cast<::common::Aggregation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceLinkMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceLinkMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceLinkMetricsRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->_internal_has_start()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->_internal_has_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  // .common.Aggregation aggregation = 4;
  if (this->_internal_aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_aggregation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceLinkMetricsRequest)
  return target;
}

size_t GetDeviceLinkMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceLinkMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_);
  }

  // .common.Aggregation aggregation = 4;
  if (this->_internal_aggregation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_aggregation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceLinkMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceLinkMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceLinkMetricsRequest::GetClassData() const { return &_class_data_; }


void GetDeviceLinkMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceLinkMetricsRequest*>(&to_msg);
  auto& from = static_cast<const GetDeviceLinkMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceLinkMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from._internal_has_start()) {
    _this->_internal_mutable_start()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start());
  }
  if (from._internal_has_end()) {
    _this->_internal_mutable_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end());
  }
  if (from._internal_aggregation() != 0) {
    _this->_internal_set_aggregation(from._internal_aggregation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceLinkMetricsRequest::CopyFrom(const GetDeviceLinkMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceLinkMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceLinkMetricsRequest::IsInitialized() const {
  return true;
}

void GetDeviceLinkMetricsRequest::InternalSwap(GetDeviceLinkMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceLinkMetricsRequest, _impl_.aggregation_)
      + sizeof(GetDeviceLinkMetricsRequest::_impl_.aggregation_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceLinkMetricsRequest, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceLinkMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[30]);
}

// ===================================================================

class GetDeviceLinkMetricsResponse::_Internal {
 public:
  static const ::common::Metric& rx_packets(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& gw_rssi(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& gw_snr(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& rx_packets_per_freq(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& rx_packets_per_dr(const GetDeviceLinkMetricsResponse* msg);
  static const ::common::Metric& errors(const GetDeviceLinkMetricsResponse* msg);
};

const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::rx_packets(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->_impl_.rx_packets_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::gw_rssi(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->_impl_.gw_rssi_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::gw_snr(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->_impl_.gw_snr_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::rx_packets_per_freq(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->_impl_.rx_packets_per_freq_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::rx_packets_per_dr(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->_impl_.rx_packets_per_dr_;
}
const ::common::Metric&
GetDeviceLinkMetricsResponse::_Internal::errors(const GetDeviceLinkMetricsResponse* msg) {
  return *msg->_impl_.errors_;
}
void GetDeviceLinkMetricsResponse::clear_rx_packets() {
  if (GetArenaForAllocation() == nullptr && _impl_.rx_packets_ != nullptr) {
    delete _impl_.rx_packets_;
  }
  _impl_.rx_packets_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_gw_rssi() {
  if (GetArenaForAllocation() == nullptr && _impl_.gw_rssi_ != nullptr) {
    delete _impl_.gw_rssi_;
  }
  _impl_.gw_rssi_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_gw_snr() {
  if (GetArenaForAllocation() == nullptr && _impl_.gw_snr_ != nullptr) {
    delete _impl_.gw_snr_;
  }
  _impl_.gw_snr_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_rx_packets_per_freq() {
  if (GetArenaForAllocation() == nullptr && _impl_.rx_packets_per_freq_ != nullptr) {
    delete _impl_.rx_packets_per_freq_;
  }
  _impl_.rx_packets_per_freq_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_rx_packets_per_dr() {
  if (GetArenaForAllocation() == nullptr && _impl_.rx_packets_per_dr_ != nullptr) {
    delete _impl_.rx_packets_per_dr_;
  }
  _impl_.rx_packets_per_dr_ = nullptr;
}
void GetDeviceLinkMetricsResponse::clear_errors() {
  if (GetArenaForAllocation() == nullptr && _impl_.errors_ != nullptr) {
    delete _impl_.errors_;
  }
  _impl_.errors_ = nullptr;
}
GetDeviceLinkMetricsResponse::GetDeviceLinkMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceLinkMetricsResponse)
}
GetDeviceLinkMetricsResponse::GetDeviceLinkMetricsResponse(const GetDeviceLinkMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceLinkMetricsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rx_packets_){nullptr}
    , decltype(_impl_.gw_rssi_){nullptr}
    , decltype(_impl_.gw_snr_){nullptr}
    , decltype(_impl_.rx_packets_per_freq_){nullptr}
    , decltype(_impl_.rx_packets_per_dr_){nullptr}
    , decltype(_impl_.errors_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rx_packets()) {
    _this->_impl_.rx_packets_ = new ::common::Metric(*from._impl_.rx_packets_);
  }
  if (from._internal_has_gw_rssi()) {
    _this->_impl_.gw_rssi_ = new ::common::Metric(*from._impl_.gw_rssi_);
  }
  if (from._internal_has_gw_snr()) {
    _this->_impl_.gw_snr_ = new ::common::Metric(*from._impl_.gw_snr_);
  }
  if (from._internal_has_rx_packets_per_freq()) {
    _this->_impl_.rx_packets_per_freq_ = new ::common::Metric(*from._impl_.rx_packets_per_freq_);
  }
  if (from._internal_has_rx_packets_per_dr()) {
    _this->_impl_.rx_packets_per_dr_ = new ::common::Metric(*from._impl_.rx_packets_per_dr_);
  }
  if (from._internal_has_errors()) {
    _this->_impl_.errors_ = new ::common::Metric(*from._impl_.errors_);
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceLinkMetricsResponse)
}

inline void GetDeviceLinkMetricsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rx_packets_){nullptr}
    , decltype(_impl_.gw_rssi_){nullptr}
    , decltype(_impl_.gw_snr_){nullptr}
    , decltype(_impl_.rx_packets_per_freq_){nullptr}
    , decltype(_impl_.rx_packets_per_dr_){nullptr}
    , decltype(_impl_.errors_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDeviceLinkMetricsResponse::~GetDeviceLinkMetricsResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceLinkMetricsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceLinkMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rx_packets_;
  if (this != internal_default_instance()) delete _impl_.gw_rssi_;
  if (this != internal_default_instance()) delete _impl_.gw_snr_;
  if (this != internal_default_instance()) delete _impl_.rx_packets_per_freq_;
  if (this != internal_default_instance()) delete _impl_.rx_packets_per_dr_;
  if (this != internal_default_instance()) delete _impl_.errors_;
}

void GetDeviceLinkMetricsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceLinkMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceLinkMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rx_packets_ != nullptr) {
    delete _impl_.rx_packets_;
  }
  _impl_.rx_packets_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gw_rssi_ != nullptr) {
    delete _impl_.gw_rssi_;
  }
  _impl_.gw_rssi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gw_snr_ != nullptr) {
    delete _impl_.gw_snr_;
  }
  _impl_.gw_snr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rx_packets_per_freq_ != nullptr) {
    delete _impl_.rx_packets_per_freq_;
  }
  _impl_.rx_packets_per_freq_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rx_packets_per_dr_ != nullptr) {
    delete _impl_.rx_packets_per_dr_;
  }
  _impl_.rx_packets_per_dr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.errors_ != nullptr) {
    delete _impl_.errors_;
  }
  _impl_.errors_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceLinkMetricsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.Metric rx_packets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_packets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Metric gw_rssi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gw_rssi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Metric gw_snr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gw_snr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Metric rx_packets_per_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_packets_per_freq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Metric rx_packets_per_dr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_packets_per_dr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Metric errors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_errors(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceLinkMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceLinkMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Metric rx_packets = 1;
  if (this->_internal_has_rx_packets()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rx_packets(this),
        _Internal::rx_packets(this).GetCachedSize(), target, stream);
  }

  // .common.Metric gw_rssi = 2;
  if (this->_internal_has_gw_rssi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gw_rssi(this),
        _Internal::gw_rssi(this).GetCachedSize(), target, stream);
  }

  // .common.Metric gw_snr = 3;
  if (this->_internal_has_gw_snr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gw_snr(this),
        _Internal::gw_snr(this).GetCachedSize(), target, stream);
  }

  // .common.Metric rx_packets_per_freq = 4;
  if (this->_internal_has_rx_packets_per_freq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rx_packets_per_freq(this),
        _Internal::rx_packets_per_freq(this).GetCachedSize(), target, stream);
  }

  // .common.Metric rx_packets_per_dr = 5;
  if (this->_internal_has_rx_packets_per_dr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rx_packets_per_dr(this),
        _Internal::rx_packets_per_dr(this).GetCachedSize(), target, stream);
  }

  // .common.Metric errors = 6;
  if (this->_internal_has_errors()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::errors(this),
        _Internal::errors(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceLinkMetricsResponse)
  return target;
}

size_t GetDeviceLinkMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceLinkMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Metric rx_packets = 1;
  if (this->_internal_has_rx_packets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rx_packets_);
  }

  // .common.Metric gw_rssi = 2;
  if (this->_internal_has_gw_rssi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gw_rssi_);
  }

  // .common.Metric gw_snr = 3;
  if (this->_internal_has_gw_snr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gw_snr_);
  }

  // .common.Metric rx_packets_per_freq = 4;
  if (this->_internal_has_rx_packets_per_freq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rx_packets_per_freq_);
  }

  // .common.Metric rx_packets_per_dr = 5;
  if (this->_internal_has_rx_packets_per_dr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rx_packets_per_dr_);
  }

  // .common.Metric errors = 6;
  if (this->_internal_has_errors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.errors_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceLinkMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceLinkMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceLinkMetricsResponse::GetClassData() const { return &_class_data_; }


void GetDeviceLinkMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceLinkMetricsResponse*>(&to_msg);
  auto& from = static_cast<const GetDeviceLinkMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceLinkMetricsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rx_packets()) {
    _this->_internal_mutable_rx_packets()->::common::Metric::MergeFrom(
        from._internal_rx_packets());
  }
  if (from._internal_has_gw_rssi()) {
    _this->_internal_mutable_gw_rssi()->::common::Metric::MergeFrom(
        from._internal_gw_rssi());
  }
  if (from._internal_has_gw_snr()) {
    _this->_internal_mutable_gw_snr()->::common::Metric::MergeFrom(
        from._internal_gw_snr());
  }
  if (from._internal_has_rx_packets_per_freq()) {
    _this->_internal_mutable_rx_packets_per_freq()->::common::Metric::MergeFrom(
        from._internal_rx_packets_per_freq());
  }
  if (from._internal_has_rx_packets_per_dr()) {
    _this->_internal_mutable_rx_packets_per_dr()->::common::Metric::MergeFrom(
        from._internal_rx_packets_per_dr());
  }
  if (from._internal_has_errors()) {
    _this->_internal_mutable_errors()->::common::Metric::MergeFrom(
        from._internal_errors());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceLinkMetricsResponse::CopyFrom(const GetDeviceLinkMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceLinkMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceLinkMetricsResponse::IsInitialized() const {
  return true;
}

void GetDeviceLinkMetricsResponse::InternalSwap(GetDeviceLinkMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceLinkMetricsResponse, _impl_.errors_)
      + sizeof(GetDeviceLinkMetricsResponse::_impl_.errors_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceLinkMetricsResponse, _impl_.rx_packets_)>(
          reinterpret_cast<char*>(&_impl_.rx_packets_),
          reinterpret_cast<char*>(&other->_impl_.rx_packets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceLinkMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[31]);
}

// ===================================================================

class DeviceQueueItem::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& object(const DeviceQueueItem* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
DeviceQueueItem::_Internal::object(const DeviceQueueItem* msg) {
  return *msg->_impl_.object_;
}
void DeviceQueueItem::clear_object() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
}
DeviceQueueItem::DeviceQueueItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.DeviceQueueItem)
}
DeviceQueueItem::DeviceQueueItem(const DeviceQueueItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceQueueItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.dev_eui_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.f_port_){}
    , decltype(_impl_.confirmed_){}
    , decltype(_impl_.is_pending_){}
    , decltype(_impl_.is_encrypted_){}
    , decltype(_impl_.f_cnt_down_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.object_);
  }
  ::memcpy(&_impl_.f_port_, &from._impl_.f_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.f_cnt_down_) -
    reinterpret_cast<char*>(&_impl_.f_port_)) + sizeof(_impl_.f_cnt_down_));
  // @@protoc_insertion_point(copy_constructor:api.DeviceQueueItem)
}

inline void DeviceQueueItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.dev_eui_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.f_port_){0u}
    , decltype(_impl_.confirmed_){false}
    , decltype(_impl_.is_pending_){false}
    , decltype(_impl_.is_encrypted_){false}
    , decltype(_impl_.f_cnt_down_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceQueueItem::~DeviceQueueItem() {
  // @@protoc_insertion_point(destructor:api.DeviceQueueItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceQueueItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.dev_eui_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.object_;
}

void DeviceQueueItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceQueueItem::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DeviceQueueItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.dev_eui_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
  ::memset(&_impl_.f_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.f_cnt_down_) -
      reinterpret_cast<char*>(&_impl_.f_port_)) + sizeof(_impl_.f_cnt_down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceQueueItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceQueueItem.id"));
        } else
          goto handle_unusual;
        continue;
      // string dev_eui = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.DeviceQueueItem.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      // bool confirmed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.confirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 f_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.f_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_pending = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 f_cnt_down = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.f_cnt_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_encrypted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.is_encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceQueueItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DeviceQueueItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceQueueItem.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string dev_eui = 2;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DeviceQueueItem.dev_eui");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dev_eui(), target);
  }

  // bool confirmed = 3;
  if (this->_internal_confirmed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_confirmed(), target);
  }

  // uint32 f_port = 4;
  if (this->_internal_f_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_f_port(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // .google.protobuf.Struct object = 6;
  if (this->_internal_has_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // bool is_pending = 7;
  if (this->_internal_is_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_pending(), target);
  }

  // uint32 f_cnt_down = 8;
  if (this->_internal_f_cnt_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_f_cnt_down(), target);
  }

  // bool is_encrypted = 9;
  if (this->_internal_is_encrypted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_encrypted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DeviceQueueItem)
  return target;
}

size_t DeviceQueueItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DeviceQueueItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string dev_eui = 2;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .google.protobuf.Struct object = 6;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  // uint32 f_port = 4;
  if (this->_internal_f_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_f_port());
  }

  // bool confirmed = 3;
  if (this->_internal_confirmed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pending = 7;
  if (this->_internal_is_pending() != 0) {
    total_size += 1 + 1;
  }

  // bool is_encrypted = 9;
  if (this->_internal_is_encrypted() != 0) {
    total_size += 1 + 1;
  }

  // uint32 f_cnt_down = 8;
  if (this->_internal_f_cnt_down() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_f_cnt_down());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceQueueItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceQueueItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceQueueItem::GetClassData() const { return &_class_data_; }


void DeviceQueueItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceQueueItem*>(&to_msg);
  auto& from = static_cast<const DeviceQueueItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.DeviceQueueItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_object()) {
    _this->_internal_mutable_object()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_object());
  }
  if (from._internal_f_port() != 0) {
    _this->_internal_set_f_port(from._internal_f_port());
  }
  if (from._internal_confirmed() != 0) {
    _this->_internal_set_confirmed(from._internal_confirmed());
  }
  if (from._internal_is_pending() != 0) {
    _this->_internal_set_is_pending(from._internal_is_pending());
  }
  if (from._internal_is_encrypted() != 0) {
    _this->_internal_set_is_encrypted(from._internal_is_encrypted());
  }
  if (from._internal_f_cnt_down() != 0) {
    _this->_internal_set_f_cnt_down(from._internal_f_cnt_down());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceQueueItem::CopyFrom(const DeviceQueueItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DeviceQueueItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceQueueItem::IsInitialized() const {
  return true;
}

void DeviceQueueItem::InternalSwap(DeviceQueueItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceQueueItem, _impl_.f_cnt_down_)
      + sizeof(DeviceQueueItem::_impl_.f_cnt_down_)
      - PROTOBUF_FIELD_OFFSET(DeviceQueueItem, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceQueueItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[32]);
}

// ===================================================================

class EnqueueDeviceQueueItemRequest::_Internal {
 public:
  static const ::api::DeviceQueueItem& queue_item(const EnqueueDeviceQueueItemRequest* msg);
};

const ::api::DeviceQueueItem&
EnqueueDeviceQueueItemRequest::_Internal::queue_item(const EnqueueDeviceQueueItemRequest* msg) {
  return *msg->_impl_.queue_item_;
}
EnqueueDeviceQueueItemRequest::EnqueueDeviceQueueItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.EnqueueDeviceQueueItemRequest)
}
EnqueueDeviceQueueItemRequest::EnqueueDeviceQueueItemRequest(const EnqueueDeviceQueueItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnqueueDeviceQueueItemRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queue_item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_queue_item()) {
    _this->_impl_.queue_item_ = new ::api::DeviceQueueItem(*from._impl_.queue_item_);
  }
  // @@protoc_insertion_point(copy_constructor:api.EnqueueDeviceQueueItemRequest)
}

inline void EnqueueDeviceQueueItemRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queue_item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnqueueDeviceQueueItemRequest::~EnqueueDeviceQueueItemRequest() {
  // @@protoc_insertion_point(destructor:api.EnqueueDeviceQueueItemRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnqueueDeviceQueueItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.queue_item_;
}

void EnqueueDeviceQueueItemRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnqueueDeviceQueueItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.EnqueueDeviceQueueItemRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.queue_item_ != nullptr) {
    delete _impl_.queue_item_;
  }
  _impl_.queue_item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnqueueDeviceQueueItemRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api.DeviceQueueItem queue_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_queue_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnqueueDeviceQueueItemRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.EnqueueDeviceQueueItemRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.DeviceQueueItem queue_item = 1;
  if (this->_internal_has_queue_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::queue_item(this),
        _Internal::queue_item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.EnqueueDeviceQueueItemRequest)
  return target;
}

size_t EnqueueDeviceQueueItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.EnqueueDeviceQueueItemRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.DeviceQueueItem queue_item = 1;
  if (this->_internal_has_queue_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.queue_item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnqueueDeviceQueueItemRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnqueueDeviceQueueItemRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnqueueDeviceQueueItemRequest::GetClassData() const { return &_class_data_; }


void EnqueueDeviceQueueItemRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnqueueDeviceQueueItemRequest*>(&to_msg);
  auto& from = static_cast<const EnqueueDeviceQueueItemRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.EnqueueDeviceQueueItemRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_queue_item()) {
    _this->_internal_mutable_queue_item()->::api::DeviceQueueItem::MergeFrom(
        from._internal_queue_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnqueueDeviceQueueItemRequest::CopyFrom(const EnqueueDeviceQueueItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.EnqueueDeviceQueueItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueDeviceQueueItemRequest::IsInitialized() const {
  return true;
}

void EnqueueDeviceQueueItemRequest::InternalSwap(EnqueueDeviceQueueItemRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.queue_item_, other->_impl_.queue_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueDeviceQueueItemRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[33]);
}

// ===================================================================

class EnqueueDeviceQueueItemResponse::_Internal {
 public:
};

EnqueueDeviceQueueItemResponse::EnqueueDeviceQueueItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.EnqueueDeviceQueueItemResponse)
}
EnqueueDeviceQueueItemResponse::EnqueueDeviceQueueItemResponse(const EnqueueDeviceQueueItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnqueueDeviceQueueItemResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.EnqueueDeviceQueueItemResponse)
}

inline void EnqueueDeviceQueueItemResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnqueueDeviceQueueItemResponse::~EnqueueDeviceQueueItemResponse() {
  // @@protoc_insertion_point(destructor:api.EnqueueDeviceQueueItemResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnqueueDeviceQueueItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void EnqueueDeviceQueueItemResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnqueueDeviceQueueItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.EnqueueDeviceQueueItemResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnqueueDeviceQueueItemResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.EnqueueDeviceQueueItemResponse.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnqueueDeviceQueueItemResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.EnqueueDeviceQueueItemResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.EnqueueDeviceQueueItemResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.EnqueueDeviceQueueItemResponse)
  return target;
}

size_t EnqueueDeviceQueueItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.EnqueueDeviceQueueItemResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnqueueDeviceQueueItemResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnqueueDeviceQueueItemResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnqueueDeviceQueueItemResponse::GetClassData() const { return &_class_data_; }


void EnqueueDeviceQueueItemResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnqueueDeviceQueueItemResponse*>(&to_msg);
  auto& from = static_cast<const EnqueueDeviceQueueItemResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.EnqueueDeviceQueueItemResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnqueueDeviceQueueItemResponse::CopyFrom(const EnqueueDeviceQueueItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.EnqueueDeviceQueueItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueDeviceQueueItemResponse::IsInitialized() const {
  return true;
}

void EnqueueDeviceQueueItemResponse::InternalSwap(EnqueueDeviceQueueItemResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueDeviceQueueItemResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[34]);
}

// ===================================================================

class FlushDeviceQueueRequest::_Internal {
 public:
};

FlushDeviceQueueRequest::FlushDeviceQueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.FlushDeviceQueueRequest)
}
FlushDeviceQueueRequest::FlushDeviceQueueRequest(const FlushDeviceQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushDeviceQueueRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.FlushDeviceQueueRequest)
}

inline void FlushDeviceQueueRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlushDeviceQueueRequest::~FlushDeviceQueueRequest() {
  // @@protoc_insertion_point(destructor:api.FlushDeviceQueueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushDeviceQueueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void FlushDeviceQueueRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushDeviceQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.FlushDeviceQueueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushDeviceQueueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.FlushDeviceQueueRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushDeviceQueueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.FlushDeviceQueueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.FlushDeviceQueueRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.FlushDeviceQueueRequest)
  return target;
}

size_t FlushDeviceQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.FlushDeviceQueueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushDeviceQueueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushDeviceQueueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushDeviceQueueRequest::GetClassData() const { return &_class_data_; }


void FlushDeviceQueueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushDeviceQueueRequest*>(&to_msg);
  auto& from = static_cast<const FlushDeviceQueueRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.FlushDeviceQueueRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushDeviceQueueRequest::CopyFrom(const FlushDeviceQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.FlushDeviceQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDeviceQueueRequest::IsInitialized() const {
  return true;
}

void FlushDeviceQueueRequest::InternalSwap(FlushDeviceQueueRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushDeviceQueueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[35]);
}

// ===================================================================

class GetDeviceQueueItemsRequest::_Internal {
 public:
};

GetDeviceQueueItemsRequest::GetDeviceQueueItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceQueueItemsRequest)
}
GetDeviceQueueItemsRequest::GetDeviceQueueItemsRequest(const GetDeviceQueueItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceQueueItemsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.count_only_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.count_only_ = from._impl_.count_only_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceQueueItemsRequest)
}

inline void GetDeviceQueueItemsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , decltype(_impl_.count_only_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeviceQueueItemsRequest::~GetDeviceQueueItemsRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceQueueItemsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceQueueItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void GetDeviceQueueItemsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceQueueItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceQueueItemsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _impl_.count_only_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceQueueItemsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.GetDeviceQueueItemsRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      // bool count_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceQueueItemsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceQueueItemsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceQueueItemsRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  // bool count_only = 2;
  if (this->_internal_count_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_count_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceQueueItemsRequest)
  return target;
}

size_t GetDeviceQueueItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceQueueItemsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  // bool count_only = 2;
  if (this->_internal_count_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceQueueItemsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceQueueItemsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceQueueItemsRequest::GetClassData() const { return &_class_data_; }


void GetDeviceQueueItemsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceQueueItemsRequest*>(&to_msg);
  auto& from = static_cast<const GetDeviceQueueItemsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceQueueItemsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  if (from._internal_count_only() != 0) {
    _this->_internal_set_count_only(from._internal_count_only());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceQueueItemsRequest::CopyFrom(const GetDeviceQueueItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceQueueItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceQueueItemsRequest::IsInitialized() const {
  return true;
}

void GetDeviceQueueItemsRequest::InternalSwap(GetDeviceQueueItemsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
  swap(_impl_.count_only_, other->_impl_.count_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceQueueItemsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[36]);
}

// ===================================================================

class GetDeviceQueueItemsResponse::_Internal {
 public:
};

GetDeviceQueueItemsResponse::GetDeviceQueueItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceQueueItemsResponse)
}
GetDeviceQueueItemsResponse::GetDeviceQueueItemsResponse(const GetDeviceQueueItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceQueueItemsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){from._impl_.result_}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_count_ = from._impl_.total_count_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceQueueItemsResponse)
}

inline void GetDeviceQueueItemsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){arena}
    , decltype(_impl_.total_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDeviceQueueItemsResponse::~GetDeviceQueueItemsResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceQueueItemsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceQueueItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedPtrField();
}

void GetDeviceQueueItemsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceQueueItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceQueueItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.Clear();
  _impl_.total_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceQueueItemsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .api.DeviceQueueItem result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceQueueItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceQueueItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_count = 1;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_count(), target);
  }

  // repeated .api.DeviceQueueItem result = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceQueueItemsResponse)
  return target;
}

size_t GetDeviceQueueItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceQueueItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.DeviceQueueItem result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->_impl_.result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_count = 1;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceQueueItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceQueueItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceQueueItemsResponse::GetClassData() const { return &_class_data_; }


void GetDeviceQueueItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceQueueItemsResponse*>(&to_msg);
  auto& from = static_cast<const GetDeviceQueueItemsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceQueueItemsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_.MergeFrom(from._impl_.result_);
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceQueueItemsResponse::CopyFrom(const GetDeviceQueueItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceQueueItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceQueueItemsResponse::IsInitialized() const {
  return true;
}

void GetDeviceQueueItemsResponse::InternalSwap(GetDeviceQueueItemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
  swap(_impl_.total_count_, other->_impl_.total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceQueueItemsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[37]);
}

// ===================================================================

class FlushDevNoncesRequest::_Internal {
 public:
};

FlushDevNoncesRequest::FlushDevNoncesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.FlushDevNoncesRequest)
}
FlushDevNoncesRequest::FlushDevNoncesRequest(const FlushDevNoncesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushDevNoncesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.FlushDevNoncesRequest)
}

inline void FlushDevNoncesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlushDevNoncesRequest::~FlushDevNoncesRequest() {
  // @@protoc_insertion_point(destructor:api.FlushDevNoncesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushDevNoncesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void FlushDevNoncesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushDevNoncesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.FlushDevNoncesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushDevNoncesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.FlushDevNoncesRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushDevNoncesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.FlushDevNoncesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.FlushDevNoncesRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.FlushDevNoncesRequest)
  return target;
}

size_t FlushDevNoncesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.FlushDevNoncesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushDevNoncesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushDevNoncesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushDevNoncesRequest::GetClassData() const { return &_class_data_; }


void FlushDevNoncesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushDevNoncesRequest*>(&to_msg);
  auto& from = static_cast<const FlushDevNoncesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.FlushDevNoncesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushDevNoncesRequest::CopyFrom(const FlushDevNoncesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.FlushDevNoncesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDevNoncesRequest::IsInitialized() const {
  return true;
}

void FlushDevNoncesRequest::InternalSwap(FlushDevNoncesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushDevNoncesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[38]);
}

// ===================================================================

class GetDeviceNextFCntDownRequest::_Internal {
 public:
};

GetDeviceNextFCntDownRequest::GetDeviceNextFCntDownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceNextFCntDownRequest)
}
GetDeviceNextFCntDownRequest::GetDeviceNextFCntDownRequest(const GetDeviceNextFCntDownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceNextFCntDownRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dev_eui().empty()) {
    _this->_impl_.dev_eui_.Set(from._internal_dev_eui(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceNextFCntDownRequest)
}

inline void GetDeviceNextFCntDownRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dev_eui_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dev_eui_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_eui_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeviceNextFCntDownRequest::~GetDeviceNextFCntDownRequest() {
  // @@protoc_insertion_point(destructor:api.GetDeviceNextFCntDownRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceNextFCntDownRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_eui_.Destroy();
}

void GetDeviceNextFCntDownRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceNextFCntDownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceNextFCntDownRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dev_eui_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceNextFCntDownRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dev_eui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_eui();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "api.GetDeviceNextFCntDownRequest.dev_eui"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceNextFCntDownRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceNextFCntDownRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_eui().data(), static_cast<int>(this->_internal_dev_eui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetDeviceNextFCntDownRequest.dev_eui");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dev_eui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceNextFCntDownRequest)
  return target;
}

size_t GetDeviceNextFCntDownRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceNextFCntDownRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dev_eui = 1;
  if (!this->_internal_dev_eui().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_eui());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceNextFCntDownRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceNextFCntDownRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceNextFCntDownRequest::GetClassData() const { return &_class_data_; }


void GetDeviceNextFCntDownRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceNextFCntDownRequest*>(&to_msg);
  auto& from = static_cast<const GetDeviceNextFCntDownRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceNextFCntDownRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dev_eui().empty()) {
    _this->_internal_set_dev_eui(from._internal_dev_eui());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceNextFCntDownRequest::CopyFrom(const GetDeviceNextFCntDownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceNextFCntDownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceNextFCntDownRequest::IsInitialized() const {
  return true;
}

void GetDeviceNextFCntDownRequest::InternalSwap(GetDeviceNextFCntDownRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_eui_, lhs_arena,
      &other->_impl_.dev_eui_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceNextFCntDownRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[39]);
}

// ===================================================================

class GetDeviceNextFCntDownResponse::_Internal {
 public:
};

GetDeviceNextFCntDownResponse::GetDeviceNextFCntDownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:api.GetDeviceNextFCntDownResponse)
}
GetDeviceNextFCntDownResponse::GetDeviceNextFCntDownResponse(const GetDeviceNextFCntDownResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeviceNextFCntDownResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.f_cnt_down_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.f_cnt_down_ = from._impl_.f_cnt_down_;
  // @@protoc_insertion_point(copy_constructor:api.GetDeviceNextFCntDownResponse)
}

inline void GetDeviceNextFCntDownResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.f_cnt_down_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDeviceNextFCntDownResponse::~GetDeviceNextFCntDownResponse() {
  // @@protoc_insertion_point(destructor:api.GetDeviceNextFCntDownResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeviceNextFCntDownResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDeviceNextFCntDownResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeviceNextFCntDownResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetDeviceNextFCntDownResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.f_cnt_down_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceNextFCntDownResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 f_cnt_down = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.f_cnt_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeviceNextFCntDownResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetDeviceNextFCntDownResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 f_cnt_down = 1;
  if (this->_internal_f_cnt_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_f_cnt_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetDeviceNextFCntDownResponse)
  return target;
}

size_t GetDeviceNextFCntDownResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetDeviceNextFCntDownResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 f_cnt_down = 1;
  if (this->_internal_f_cnt_down() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_f_cnt_down());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceNextFCntDownResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeviceNextFCntDownResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceNextFCntDownResponse::GetClassData() const { return &_class_data_; }


void GetDeviceNextFCntDownResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeviceNextFCntDownResponse*>(&to_msg);
  auto& from = static_cast<const GetDeviceNextFCntDownResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.GetDeviceNextFCntDownResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_f_cnt_down() != 0) {
    _this->_internal_set_f_cnt_down(from._internal_f_cnt_down());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceNextFCntDownResponse::CopyFrom(const GetDeviceNextFCntDownResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetDeviceNextFCntDownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceNextFCntDownResponse::IsInitialized() const {
  return true;
}

void GetDeviceNextFCntDownResponse::InternalSwap(GetDeviceNextFCntDownResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.f_cnt_down_, other->_impl_.f_cnt_down_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceNextFCntDownResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_api_2fdevice_2eproto_getter, &descriptor_table_api_2fdevice_2eproto_once,
      file_level_metadata_api_2fdevice_2eproto[40]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::api::Device_VariablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::api::Device_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Device_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Device_TagsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::api::Device_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Device_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Device*
Arena::CreateMaybeMessage< ::api::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceStatus*
Arena::CreateMaybeMessage< ::api::DeviceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceListItem*
Arena::CreateMaybeMessage< ::api::DeviceListItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceKeys*
Arena::CreateMaybeMessage< ::api::DeviceKeys >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceKeys >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CreateDeviceRequest*
Arena::CreateMaybeMessage< ::api::CreateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::CreateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceRequest*
Arena::CreateMaybeMessage< ::api::GetDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceResponse*
Arena::CreateMaybeMessage< ::api::GetDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::UpdateDeviceRequest*
Arena::CreateMaybeMessage< ::api::UpdateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::UpdateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeleteDeviceRequest*
Arena::CreateMaybeMessage< ::api::DeleteDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeleteDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ListDevicesRequest*
Arena::CreateMaybeMessage< ::api::ListDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ListDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ListDevicesResponse*
Arena::CreateMaybeMessage< ::api::ListDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ListDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CreateDeviceKeysRequest*
Arena::CreateMaybeMessage< ::api::CreateDeviceKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::CreateDeviceKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceKeysRequest*
Arena::CreateMaybeMessage< ::api::GetDeviceKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceKeysResponse*
Arena::CreateMaybeMessage< ::api::GetDeviceKeysResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceKeysResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::UpdateDeviceKeysRequest*
Arena::CreateMaybeMessage< ::api::UpdateDeviceKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::UpdateDeviceKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeleteDeviceKeysRequest*
Arena::CreateMaybeMessage< ::api::DeleteDeviceKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeleteDeviceKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceActivation*
Arena::CreateMaybeMessage< ::api::DeviceActivation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceActivation >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ActivateDeviceRequest*
Arena::CreateMaybeMessage< ::api::ActivateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ActivateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeactivateDeviceRequest*
Arena::CreateMaybeMessage< ::api::DeactivateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeactivateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceActivationRequest*
Arena::CreateMaybeMessage< ::api::GetDeviceActivationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceActivationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceActivationResponse*
Arena::CreateMaybeMessage< ::api::GetDeviceActivationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceActivationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetRandomDevAddrRequest*
Arena::CreateMaybeMessage< ::api::GetRandomDevAddrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetRandomDevAddrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetRandomDevAddrResponse*
Arena::CreateMaybeMessage< ::api::GetRandomDevAddrResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetRandomDevAddrResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceMetricsRequest*
Arena::CreateMaybeMessage< ::api::GetDeviceMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceMetricsResponse_MetricsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceMetricsResponse_StatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceMetricsResponse*
Arena::CreateMaybeMessage< ::api::GetDeviceMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceState*
Arena::CreateMaybeMessage< ::api::DeviceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceState >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceLinkMetricsRequest*
Arena::CreateMaybeMessage< ::api::GetDeviceLinkMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceLinkMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceLinkMetricsResponse*
Arena::CreateMaybeMessage< ::api::GetDeviceLinkMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceLinkMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DeviceQueueItem*
Arena::CreateMaybeMessage< ::api::DeviceQueueItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DeviceQueueItem >(arena);
}
template<> PROTOBUF_NOINLINE ::api::EnqueueDeviceQueueItemRequest*
Arena::CreateMaybeMessage< ::api::EnqueueDeviceQueueItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::EnqueueDeviceQueueItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::EnqueueDeviceQueueItemResponse*
Arena::CreateMaybeMessage< ::api::EnqueueDeviceQueueItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::EnqueueDeviceQueueItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::FlushDeviceQueueRequest*
Arena::CreateMaybeMessage< ::api::FlushDeviceQueueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::FlushDeviceQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceQueueItemsRequest*
Arena::CreateMaybeMessage< ::api::GetDeviceQueueItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceQueueItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceQueueItemsResponse*
Arena::CreateMaybeMessage< ::api::GetDeviceQueueItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceQueueItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::FlushDevNoncesRequest*
Arena::CreateMaybeMessage< ::api::FlushDevNoncesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::FlushDevNoncesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceNextFCntDownRequest*
Arena::CreateMaybeMessage< ::api::GetDeviceNextFCntDownRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceNextFCntDownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetDeviceNextFCntDownResponse*
Arena::CreateMaybeMessage< ::api::GetDeviceNextFCntDownResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetDeviceNextFCntDownResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
