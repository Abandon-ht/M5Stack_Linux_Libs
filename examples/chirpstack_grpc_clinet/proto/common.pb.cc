// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace common {
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.altitude_)*/0
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.accuracy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR KeyEnvelope::KeyEnvelope(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kek_label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aes_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyEnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyEnvelopeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyEnvelopeDefaultTypeInternal() {}
  union {
    KeyEnvelope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyEnvelopeDefaultTypeInternal _KeyEnvelope_default_instance_;
PROTOBUF_CONSTEXPR Metric::Metric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamps_)*/{}
  , /*decltype(_impl_.datasets_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDefaultTypeInternal _Metric_default_instance_;
PROTOBUF_CONSTEXPR MetricDataset::MetricDataset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricDatasetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDatasetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDatasetDefaultTypeInternal() {}
  union {
    MetricDataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDatasetDefaultTypeInternal _MetricDataset_default_instance_;
PROTOBUF_CONSTEXPR JoinServerContext::JoinServerContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_s_key_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JoinServerContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinServerContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinServerContextDefaultTypeInternal() {}
  union {
    JoinServerContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinServerContextDefaultTypeInternal _JoinServerContext_default_instance_;
}  // namespace common
static ::_pb::Metadata file_level_metadata_common_2fcommon_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2fcommon_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2fcommon_2eproto = nullptr;

const uint32_t TableStruct_common_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Location, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::common::Location, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::common::Location, _impl_.altitude_),
  PROTOBUF_FIELD_OFFSET(::common::Location, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::common::Location, _impl_.accuracy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::KeyEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::KeyEnvelope, _impl_.kek_label_),
  PROTOBUF_FIELD_OFFSET(::common::KeyEnvelope, _impl_.aes_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::Metric, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::common::Metric, _impl_.timestamps_),
  PROTOBUF_FIELD_OFFSET(::common::Metric, _impl_.datasets_),
  PROTOBUF_FIELD_OFFSET(::common::Metric, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::MetricDataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::MetricDataset, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::common::MetricDataset, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::JoinServerContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::common::JoinServerContext, _impl_.session_key_id_),
  PROTOBUF_FIELD_OFFSET(::common::JoinServerContext, _impl_.app_s_key_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::common::Location)},
  { 11, -1, -1, sizeof(::common::KeyEnvelope)},
  { 19, -1, -1, sizeof(::common::Metric)},
  { 29, -1, -1, sizeof(::common::MetricDataset)},
  { 37, -1, -1, sizeof(::common::JoinServerContext)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::common::_Location_default_instance_._instance,
  &::common::_KeyEnvelope_default_instance_._instance,
  &::common::_Metric_default_instance_._instance,
  &::common::_MetricDataset_default_instance_._instance,
  &::common::_JoinServerContext_default_instance_._instance,
};

const char descriptor_table_protodef_common_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023common/common.proto\022\006common\032\037google/pr"
  "otobuf/timestamp.proto\"{\n\010Location\022\020\n\010la"
  "titude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010altit"
  "ude\030\003 \001(\001\022&\n\006source\030\004 \001(\0162\026.common.Locat"
  "ionSource\022\020\n\010accuracy\030\005 \001(\002\"1\n\013KeyEnvelo"
  "pe\022\021\n\tkek_label\030\001 \001(\t\022\017\n\007aes_key\030\002 \001(\014\"\221"
  "\001\n\006Metric\022\014\n\004name\030\001 \001(\t\022.\n\ntimestamps\030\002 "
  "\003(\0132\032.google.protobuf.Timestamp\022\'\n\010datas"
  "ets\030\003 \003(\0132\025.common.MetricDataset\022 \n\004kind"
  "\030\004 \001(\0162\022.common.MetricKind\",\n\rMetricData"
  "set\022\r\n\005label\030\001 \001(\t\022\014\n\004data\030\002 \003(\002\"S\n\021Join"
  "ServerContext\022\026\n\016session_key_id\030\001 \001(\t\022&\n"
  "\tapp_s_key\030\002 \001(\0132\023.common.KeyEnvelope*,\n"
  "\nModulation\022\010\n\004LORA\020\000\022\007\n\003FSK\020\001\022\013\n\007LR_FHS"
  "S\020\002*\252\001\n\006Region\022\t\n\005EU868\020\000\022\t\n\005US915\020\002\022\t\n\005"
  "CN779\020\003\022\t\n\005EU433\020\004\022\t\n\005AU915\020\005\022\t\n\005CN470\020\006"
  "\022\t\n\005AS923\020\007\022\013\n\007AS923_2\020\014\022\013\n\007AS923_3\020\r\022\013\n"
  "\007AS923_4\020\016\022\t\n\005KR920\020\010\022\t\n\005IN865\020\t\022\t\n\005RU86"
  "4\020\n\022\013\n\007ISM2400\020\013*\263\001\n\005MType\022\020\n\014JOIN_REQUE"
  "ST\020\000\022\017\n\013JOIN_ACCEPT\020\001\022\027\n\023UNCONFIRMED_DAT"
  "A_UP\020\002\022\031\n\025UNCONFIRMED_DATA_DOWN\020\003\022\025\n\021CON"
  "FIRMED_DATA_UP\020\004\022\027\n\023CONFIRMED_DATA_DOWN\020"
  "\005\022\022\n\016REJOIN_REQUEST\020\006\022\017\n\013PROPRIETARY\020\007*~"
  "\n\nMacVersion\022\021\n\rLORAWAN_1_0_0\020\000\022\021\n\rLORAW"
  "AN_1_0_1\020\001\022\021\n\rLORAWAN_1_0_2\020\002\022\021\n\rLORAWAN"
  "_1_0_3\020\003\022\021\n\rLORAWAN_1_0_4\020\004\022\021\n\rLORAWAN_1"
  "_1_0\020\005*e\n\021RegParamsRevision\022\005\n\001A\020\000\022\005\n\001B\020"
  "\001\022\017\n\013RP002_1_0_0\020\002\022\017\n\013RP002_1_0_1\020\003\022\017\n\013R"
  "P002_1_0_2\020\004\022\017\n\013RP002_1_0_3\020\005*\216\001\n\016Locati"
  "onSource\022\013\n\007UNKNOWN\020\000\022\007\n\003GPS\020\001\022\n\n\006CONFIG"
  "\020\002\022\025\n\021GEO_RESOLVER_TDOA\020\003\022\025\n\021GEO_RESOLVE"
  "R_RSSI\020\004\022\025\n\021GEO_RESOLVER_GNSS\020\005\022\025\n\021GEO_R"
  "ESOLVER_WIFI\020\006*+\n\013Aggregation\022\010\n\004HOUR\020\000\022"
  "\007\n\003DAY\020\001\022\t\n\005MONTH\020\002*2\n\nMetricKind\022\013\n\007COU"
  "NTER\020\000\022\014\n\010ABSOLUTE\020\001\022\t\n\005GAUGE\020\002*4\n\013Devic"
  "eClass\022\013\n\007CLASS_A\020\000\022\013\n\007CLASS_B\020\001\022\013\n\007CLAS"
  "S_C\020\002Bi\n\021io.chirpstack.apiB\013CommonProtoP"
  "\001Z1github.com/chirpstack/chirpstack/api/"
  "go/v4/common\252\002\021Chirpstack.Commonb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_common_2fcommon_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_common_2fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fcommon_2eproto = {
    false, false, 1560, descriptor_table_protodef_common_2fcommon_2eproto,
    "common/common.proto",
    &descriptor_table_common_2fcommon_2eproto_once, descriptor_table_common_2fcommon_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_common_2fcommon_2eproto::offsets,
    file_level_metadata_common_2fcommon_2eproto, file_level_enum_descriptors_common_2fcommon_2eproto,
    file_level_service_descriptors_common_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fcommon_2eproto_getter() {
  return &descriptor_table_common_2fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fcommon_2eproto(&descriptor_table_common_2fcommon_2eproto);
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Modulation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[0];
}
bool Modulation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Region_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[1];
}
bool Region_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[2];
}
bool MType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MacVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[3];
}
bool MacVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegParamsRevision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[4];
}
bool RegParamsRevision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocationSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[5];
}
bool LocationSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aggregation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[6];
}
bool Aggregation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[7];
}
bool MetricKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fcommon_2eproto);
  return file_level_enum_descriptors_common_2fcommon_2eproto[8];
}
bool DeviceClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:common.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.altitude_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.accuracy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accuracy_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.accuracy_));
  // @@protoc_insertion_point(copy_constructor:common.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.altitude_){0}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.accuracy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:common.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.accuracy_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.accuracy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .common.LocationSource source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::common::LocationSource>(val));
        } else
          goto handle_unusual;
        continue;
      // float accuracy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double altitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  // .common.LocationSource source = 4;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_source(), target);
  }

  // float accuracy = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accuracy = this->_internal_accuracy();
  uint32_t raw_accuracy;
  memcpy(&raw_accuracy, &tmp_accuracy, sizeof(tmp_accuracy));
  if (raw_accuracy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_accuracy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 8;
  }

  // .common.LocationSource source = 4;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  // float accuracy = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accuracy = this->_internal_accuracy();
  uint32_t raw_accuracy;
  memcpy(&raw_accuracy, &tmp_accuracy, sizeof(tmp_accuracy));
  if (raw_accuracy != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = from._internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _this->_internal_set_altitude(from._internal_altitude());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accuracy = from._internal_accuracy();
  uint32_t raw_accuracy;
  memcpy(&raw_accuracy, &tmp_accuracy, sizeof(tmp_accuracy));
  if (raw_accuracy != 0) {
    _this->_internal_set_accuracy(from._internal_accuracy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.accuracy_)
      + sizeof(Location::_impl_.accuracy_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[0]);
}

// ===================================================================

class KeyEnvelope::_Internal {
 public:
};

KeyEnvelope::KeyEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:common.KeyEnvelope)
}
KeyEnvelope::KeyEnvelope(const KeyEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyEnvelope* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kek_label_){}
    , decltype(_impl_.aes_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kek_label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kek_label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kek_label().empty()) {
    _this->_impl_.kek_label_.Set(from._internal_kek_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aes_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aes_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aes_key().empty()) {
    _this->_impl_.aes_key_.Set(from._internal_aes_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.KeyEnvelope)
}

inline void KeyEnvelope::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kek_label_){}
    , decltype(_impl_.aes_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.kek_label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kek_label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aes_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aes_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyEnvelope::~KeyEnvelope() {
  // @@protoc_insertion_point(destructor:common.KeyEnvelope)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyEnvelope::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kek_label_.Destroy();
  _impl_.aes_key_.Destroy();
}

void KeyEnvelope::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:common.KeyEnvelope)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kek_label_.ClearToEmpty();
  _impl_.aes_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyEnvelope::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string kek_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kek_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "common.KeyEnvelope.kek_label"));
        } else
          goto handle_unusual;
        continue;
      // bytes aes_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_aes_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyEnvelope::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.KeyEnvelope)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string kek_label = 1;
  if (!this->_internal_kek_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kek_label().data(), static_cast<int>(this->_internal_kek_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.KeyEnvelope.kek_label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kek_label(), target);
  }

  // bytes aes_key = 2;
  if (!this->_internal_aes_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_aes_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.KeyEnvelope)
  return target;
}

size_t KeyEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.KeyEnvelope)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kek_label = 1;
  if (!this->_internal_kek_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kek_label());
  }

  // bytes aes_key = 2;
  if (!this->_internal_aes_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_aes_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyEnvelope::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyEnvelope::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyEnvelope::GetClassData() const { return &_class_data_; }


void KeyEnvelope::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyEnvelope*>(&to_msg);
  auto& from = static_cast<const KeyEnvelope&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.KeyEnvelope)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kek_label().empty()) {
    _this->_internal_set_kek_label(from._internal_kek_label());
  }
  if (!from._internal_aes_key().empty()) {
    _this->_internal_set_aes_key(from._internal_aes_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyEnvelope::CopyFrom(const KeyEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.KeyEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEnvelope::IsInitialized() const {
  return true;
}

void KeyEnvelope::InternalSwap(KeyEnvelope* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kek_label_, lhs_arena,
      &other->_impl_.kek_label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aes_key_, lhs_arena,
      &other->_impl_.aes_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyEnvelope::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[1]);
}

// ===================================================================

class Metric::_Internal {
 public:
};

void Metric::clear_timestamps() {
  _impl_.timestamps_.Clear();
}
Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:common.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamps_){from._impl_.timestamps_}
    , decltype(_impl_.datasets_){from._impl_.datasets_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  // @@protoc_insertion_point(copy_constructor:common.Metric)
}

inline void Metric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamps_){arena}
    , decltype(_impl_.datasets_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:common.Metric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamps_.~RepeatedPtrField();
  _impl_.datasets_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Metric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Metric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamps_.Clear();
  _impl_.datasets_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "common.Metric.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Timestamp timestamps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timestamps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .common.MetricDataset datasets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .common.MetricKind kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::common::MetricKind>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Metric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Metric.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .google.protobuf.Timestamp timestamps = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timestamps_size()); i < n; i++) {
    const auto& repfield = this->_internal_timestamps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .common.MetricDataset datasets = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datasets_size()); i < n; i++) {
    const auto& repfield = this->_internal_datasets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .common.MetricKind kind = 4;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Metric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Timestamp timestamps = 2;
  total_size += 1UL * this->_internal_timestamps_size();
  for (const auto& msg : this->_impl_.timestamps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .common.MetricDataset datasets = 3;
  total_size += 1UL * this->_internal_datasets_size();
  for (const auto& msg : this->_impl_.datasets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .common.MetricKind kind = 4;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metric::GetClassData() const { return &_class_data_; }


void Metric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metric*>(&to_msg);
  auto& from = static_cast<const Metric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.Metric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.timestamps_.MergeFrom(from._impl_.timestamps_);
  _this->_impl_.datasets_.MergeFrom(from._impl_.datasets_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.timestamps_.InternalSwap(&other->_impl_.timestamps_);
  _impl_.datasets_.InternalSwap(&other->_impl_.datasets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.kind_, other->_impl_.kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[2]);
}

// ===================================================================

class MetricDataset::_Internal {
 public:
};

MetricDataset::MetricDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:common.MetricDataset)
}
MetricDataset::MetricDataset(const MetricDataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricDataset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.label_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:common.MetricDataset)
}

inline void MetricDataset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.label_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetricDataset::~MetricDataset() {
  // @@protoc_insertion_point(destructor:common.MetricDataset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricDataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.label_.Destroy();
}

void MetricDataset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricDataset::Clear() {
// @@protoc_insertion_point(message_clear_start:common.MetricDataset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.label_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricDataset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "common.MetricDataset.label"));
        } else
          goto handle_unusual;
        continue;
      // repeated float data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricDataset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.MetricDataset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.MetricDataset.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // repeated float data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.MetricDataset)
  return target;
}

size_t MetricDataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.MetricDataset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricDataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricDataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricDataset::GetClassData() const { return &_class_data_; }


void MetricDataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricDataset*>(&to_msg);
  auto& from = static_cast<const MetricDataset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.MetricDataset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricDataset::CopyFrom(const MetricDataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.MetricDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricDataset::IsInitialized() const {
  return true;
}

void MetricDataset::InternalSwap(MetricDataset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricDataset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[3]);
}

// ===================================================================

class JoinServerContext::_Internal {
 public:
  static const ::common::KeyEnvelope& app_s_key(const JoinServerContext* msg);
};

const ::common::KeyEnvelope&
JoinServerContext::_Internal::app_s_key(const JoinServerContext* msg) {
  return *msg->_impl_.app_s_key_;
}
JoinServerContext::JoinServerContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:common.JoinServerContext)
}
JoinServerContext::JoinServerContext(const JoinServerContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinServerContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_key_id_){}
    , decltype(_impl_.app_s_key_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_key_id().empty()) {
    _this->_impl_.session_key_id_.Set(from._internal_session_key_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_app_s_key()) {
    _this->_impl_.app_s_key_ = new ::common::KeyEnvelope(*from._impl_.app_s_key_);
  }
  // @@protoc_insertion_point(copy_constructor:common.JoinServerContext)
}

inline void JoinServerContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_key_id_){}
    , decltype(_impl_.app_s_key_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinServerContext::~JoinServerContext() {
  // @@protoc_insertion_point(destructor:common.JoinServerContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinServerContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_key_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.app_s_key_;
}

void JoinServerContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinServerContext::Clear() {
// @@protoc_insertion_point(message_clear_start:common.JoinServerContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_key_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.app_s_key_ != nullptr) {
    delete _impl_.app_s_key_;
  }
  _impl_.app_s_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinServerContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "common.JoinServerContext.session_key_id"));
        } else
          goto handle_unusual;
        continue;
      // .common.KeyEnvelope app_s_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_s_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinServerContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.JoinServerContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_key_id = 1;
  if (!this->_internal_session_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key_id().data(), static_cast<int>(this->_internal_session_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.JoinServerContext.session_key_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_key_id(), target);
  }

  // .common.KeyEnvelope app_s_key = 2;
  if (this->_internal_has_app_s_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::app_s_key(this),
        _Internal::app_s_key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.JoinServerContext)
  return target;
}

size_t JoinServerContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.JoinServerContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_key_id = 1;
  if (!this->_internal_session_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key_id());
  }

  // .common.KeyEnvelope app_s_key = 2;
  if (this->_internal_has_app_s_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.app_s_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinServerContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinServerContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinServerContext::GetClassData() const { return &_class_data_; }


void JoinServerContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinServerContext*>(&to_msg);
  auto& from = static_cast<const JoinServerContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:common.JoinServerContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_key_id().empty()) {
    _this->_internal_set_session_key_id(from._internal_session_key_id());
  }
  if (from._internal_has_app_s_key()) {
    _this->_internal_mutable_app_s_key()->::common::KeyEnvelope::MergeFrom(
        from._internal_app_s_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinServerContext::CopyFrom(const JoinServerContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.JoinServerContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinServerContext::IsInitialized() const {
  return true;
}

void JoinServerContext::InternalSwap(JoinServerContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_key_id_, lhs_arena,
      &other->_impl_.session_key_id_, rhs_arena
  );
  swap(_impl_.app_s_key_, other->_impl_.app_s_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinServerContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fcommon_2eproto_getter, &descriptor_table_common_2fcommon_2eproto_once,
      file_level_metadata_common_2fcommon_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::Location*
Arena::CreateMaybeMessage< ::common::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::common::KeyEnvelope*
Arena::CreateMaybeMessage< ::common::KeyEnvelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::KeyEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Metric*
Arena::CreateMaybeMessage< ::common::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::common::MetricDataset*
Arena::CreateMaybeMessage< ::common::MetricDataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::MetricDataset >(arena);
}
template<> PROTOBUF_NOINLINE ::common::JoinServerContext*
Arena::CreateMaybeMessage< ::common::JoinServerContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::JoinServerContext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
