// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fcommon_2eproto;
namespace common {
class JoinServerContext;
struct JoinServerContextDefaultTypeInternal;
extern JoinServerContextDefaultTypeInternal _JoinServerContext_default_instance_;
class KeyEnvelope;
struct KeyEnvelopeDefaultTypeInternal;
extern KeyEnvelopeDefaultTypeInternal _KeyEnvelope_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricDataset;
struct MetricDatasetDefaultTypeInternal;
extern MetricDatasetDefaultTypeInternal _MetricDataset_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::JoinServerContext* Arena::CreateMaybeMessage<::common::JoinServerContext>(Arena*);
template<> ::common::KeyEnvelope* Arena::CreateMaybeMessage<::common::KeyEnvelope>(Arena*);
template<> ::common::Location* Arena::CreateMaybeMessage<::common::Location>(Arena*);
template<> ::common::Metric* Arena::CreateMaybeMessage<::common::Metric>(Arena*);
template<> ::common::MetricDataset* Arena::CreateMaybeMessage<::common::MetricDataset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

enum Modulation : int {
  LORA = 0,
  FSK = 1,
  LR_FHSS = 2,
  Modulation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Modulation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Modulation_IsValid(int value);
constexpr Modulation Modulation_MIN = LORA;
constexpr Modulation Modulation_MAX = LR_FHSS;
constexpr int Modulation_ARRAYSIZE = Modulation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Modulation_descriptor();
template<typename T>
inline const std::string& Modulation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Modulation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Modulation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Modulation_descriptor(), enum_t_value);
}
inline bool Modulation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Modulation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Modulation>(
    Modulation_descriptor(), name, value);
}
enum Region : int {
  EU868 = 0,
  US915 = 2,
  CN779 = 3,
  EU433 = 4,
  AU915 = 5,
  CN470 = 6,
  AS923 = 7,
  AS923_2 = 12,
  AS923_3 = 13,
  AS923_4 = 14,
  KR920 = 8,
  IN865 = 9,
  RU864 = 10,
  ISM2400 = 11,
  Region_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Region_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Region_IsValid(int value);
constexpr Region Region_MIN = EU868;
constexpr Region Region_MAX = AS923_4;
constexpr int Region_ARRAYSIZE = Region_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Region_descriptor();
template<typename T>
inline const std::string& Region_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Region>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Region_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Region_descriptor(), enum_t_value);
}
inline bool Region_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Region* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Region>(
    Region_descriptor(), name, value);
}
enum MType : int {
  JOIN_REQUEST = 0,
  JOIN_ACCEPT = 1,
  UNCONFIRMED_DATA_UP = 2,
  UNCONFIRMED_DATA_DOWN = 3,
  CONFIRMED_DATA_UP = 4,
  CONFIRMED_DATA_DOWN = 5,
  REJOIN_REQUEST = 6,
  PROPRIETARY = 7,
  MType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MType_IsValid(int value);
constexpr MType MType_MIN = JOIN_REQUEST;
constexpr MType MType_MAX = PROPRIETARY;
constexpr int MType_ARRAYSIZE = MType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MType_descriptor();
template<typename T>
inline const std::string& MType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MType_descriptor(), enum_t_value);
}
inline bool MType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MType>(
    MType_descriptor(), name, value);
}
enum MacVersion : int {
  LORAWAN_1_0_0 = 0,
  LORAWAN_1_0_1 = 1,
  LORAWAN_1_0_2 = 2,
  LORAWAN_1_0_3 = 3,
  LORAWAN_1_0_4 = 4,
  LORAWAN_1_1_0 = 5,
  MacVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MacVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MacVersion_IsValid(int value);
constexpr MacVersion MacVersion_MIN = LORAWAN_1_0_0;
constexpr MacVersion MacVersion_MAX = LORAWAN_1_1_0;
constexpr int MacVersion_ARRAYSIZE = MacVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MacVersion_descriptor();
template<typename T>
inline const std::string& MacVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MacVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MacVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MacVersion_descriptor(), enum_t_value);
}
inline bool MacVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MacVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MacVersion>(
    MacVersion_descriptor(), name, value);
}
enum RegParamsRevision : int {
  A = 0,
  B = 1,
  RP002_1_0_0 = 2,
  RP002_1_0_1 = 3,
  RP002_1_0_2 = 4,
  RP002_1_0_3 = 5,
  RegParamsRevision_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RegParamsRevision_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RegParamsRevision_IsValid(int value);
constexpr RegParamsRevision RegParamsRevision_MIN = A;
constexpr RegParamsRevision RegParamsRevision_MAX = RP002_1_0_3;
constexpr int RegParamsRevision_ARRAYSIZE = RegParamsRevision_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegParamsRevision_descriptor();
template<typename T>
inline const std::string& RegParamsRevision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegParamsRevision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegParamsRevision_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegParamsRevision_descriptor(), enum_t_value);
}
inline bool RegParamsRevision_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegParamsRevision* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegParamsRevision>(
    RegParamsRevision_descriptor(), name, value);
}
enum LocationSource : int {
  UNKNOWN = 0,
  GPS = 1,
  CONFIG = 2,
  GEO_RESOLVER_TDOA = 3,
  GEO_RESOLVER_RSSI = 4,
  GEO_RESOLVER_GNSS = 5,
  GEO_RESOLVER_WIFI = 6,
  LocationSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LocationSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LocationSource_IsValid(int value);
constexpr LocationSource LocationSource_MIN = UNKNOWN;
constexpr LocationSource LocationSource_MAX = GEO_RESOLVER_WIFI;
constexpr int LocationSource_ARRAYSIZE = LocationSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocationSource_descriptor();
template<typename T>
inline const std::string& LocationSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocationSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocationSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocationSource_descriptor(), enum_t_value);
}
inline bool LocationSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LocationSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocationSource>(
    LocationSource_descriptor(), name, value);
}
enum Aggregation : int {
  HOUR = 0,
  DAY = 1,
  MONTH = 2,
  Aggregation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Aggregation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Aggregation_IsValid(int value);
constexpr Aggregation Aggregation_MIN = HOUR;
constexpr Aggregation Aggregation_MAX = MONTH;
constexpr int Aggregation_ARRAYSIZE = Aggregation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aggregation_descriptor();
template<typename T>
inline const std::string& Aggregation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aggregation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aggregation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aggregation_descriptor(), enum_t_value);
}
inline bool Aggregation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aggregation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aggregation>(
    Aggregation_descriptor(), name, value);
}
enum MetricKind : int {
  COUNTER = 0,
  ABSOLUTE = 1,
  GAUGE = 2,
  MetricKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MetricKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MetricKind_IsValid(int value);
constexpr MetricKind MetricKind_MIN = COUNTER;
constexpr MetricKind MetricKind_MAX = GAUGE;
constexpr int MetricKind_ARRAYSIZE = MetricKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricKind_descriptor();
template<typename T>
inline const std::string& MetricKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetricKind_descriptor(), enum_t_value);
}
inline bool MetricKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetricKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetricKind>(
    MetricKind_descriptor(), name, value);
}
enum DeviceClass : int {
  CLASS_A = 0,
  CLASS_B = 1,
  CLASS_C = 2,
  DeviceClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DeviceClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DeviceClass_IsValid(int value);
constexpr DeviceClass DeviceClass_MIN = CLASS_A;
constexpr DeviceClass DeviceClass_MAX = CLASS_C;
constexpr int DeviceClass_ARRAYSIZE = DeviceClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceClass_descriptor();
template<typename T>
inline const std::string& DeviceClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceClass_descriptor(), enum_t_value);
}
inline bool DeviceClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceClass>(
    DeviceClass_descriptor(), name, value);
}
// ===================================================================

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Location& from) {
    Location::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
    kSourceFieldNumber = 4,
    kAccuracyFieldNumber = 5,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // .common.LocationSource source = 4;
  void clear_source();
  ::common::LocationSource source() const;
  void set_source(::common::LocationSource value);
  private:
  ::common::LocationSource _internal_source() const;
  void _internal_set_source(::common::LocationSource value);
  public:

  // float accuracy = 5;
  void clear_accuracy();
  float accuracy() const;
  void set_accuracy(float value);
  private:
  float _internal_accuracy() const;
  void _internal_set_accuracy(float value);
  public:

  // @@protoc_insertion_point(class_scope:common.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_;
    double longitude_;
    double altitude_;
    int source_;
    float accuracy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class KeyEnvelope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.KeyEnvelope) */ {
 public:
  inline KeyEnvelope() : KeyEnvelope(nullptr) {}
  ~KeyEnvelope() override;
  explicit PROTOBUF_CONSTEXPR KeyEnvelope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyEnvelope(const KeyEnvelope& from);
  KeyEnvelope(KeyEnvelope&& from) noexcept
    : KeyEnvelope() {
    *this = ::std::move(from);
  }

  inline KeyEnvelope& operator=(const KeyEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyEnvelope& operator=(KeyEnvelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyEnvelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyEnvelope* internal_default_instance() {
    return reinterpret_cast<const KeyEnvelope*>(
               &_KeyEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyEnvelope& a, KeyEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyEnvelope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyEnvelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyEnvelope>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyEnvelope& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyEnvelope& from) {
    KeyEnvelope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyEnvelope* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.KeyEnvelope";
  }
  protected:
  explicit KeyEnvelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKekLabelFieldNumber = 1,
    kAesKeyFieldNumber = 2,
  };
  // string kek_label = 1;
  void clear_kek_label();
  const std::string& kek_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kek_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kek_label();
  PROTOBUF_NODISCARD std::string* release_kek_label();
  void set_allocated_kek_label(std::string* kek_label);
  private:
  const std::string& _internal_kek_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kek_label(const std::string& value);
  std::string* _internal_mutable_kek_label();
  public:

  // bytes aes_key = 2;
  void clear_aes_key();
  const std::string& aes_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aes_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aes_key();
  PROTOBUF_NODISCARD std::string* release_aes_key();
  void set_allocated_aes_key(std::string* aes_key);
  private:
  const std::string& _internal_aes_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aes_key(const std::string& value);
  std::string* _internal_mutable_aes_key();
  public:

  // @@protoc_insertion_point(class_scope:common.KeyEnvelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kek_label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aes_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Metric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() override;
  explicit PROTOBUF_CONSTEXPR Metric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metric& from) {
    Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampsFieldNumber = 2,
    kDatasetsFieldNumber = 3,
    kNameFieldNumber = 1,
    kKindFieldNumber = 4,
  };
  // repeated .google.protobuf.Timestamp timestamps = 2;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;
  public:
  void clear_timestamps();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp >*
      mutable_timestamps();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamps(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_add_timestamps();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamps(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* add_timestamps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp >&
      timestamps() const;

  // repeated .common.MetricDataset datasets = 3;
  int datasets_size() const;
  private:
  int _internal_datasets_size() const;
  public:
  void clear_datasets();
  ::common::MetricDataset* mutable_datasets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::MetricDataset >*
      mutable_datasets();
  private:
  const ::common::MetricDataset& _internal_datasets(int index) const;
  ::common::MetricDataset* _internal_add_datasets();
  public:
  const ::common::MetricDataset& datasets(int index) const;
  ::common::MetricDataset* add_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::MetricDataset >&
      datasets() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .common.MetricKind kind = 4;
  void clear_kind();
  ::common::MetricKind kind() const;
  void set_kind(::common::MetricKind value);
  private:
  ::common::MetricKind _internal_kind() const;
  void _internal_set_kind(::common::MetricKind value);
  public:

  // @@protoc_insertion_point(class_scope:common.Metric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp > timestamps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::MetricDataset > datasets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class MetricDataset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.MetricDataset) */ {
 public:
  inline MetricDataset() : MetricDataset(nullptr) {}
  ~MetricDataset() override;
  explicit PROTOBUF_CONSTEXPR MetricDataset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricDataset(const MetricDataset& from);
  MetricDataset(MetricDataset&& from) noexcept
    : MetricDataset() {
    *this = ::std::move(from);
  }

  inline MetricDataset& operator=(const MetricDataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricDataset& operator=(MetricDataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricDataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricDataset* internal_default_instance() {
    return reinterpret_cast<const MetricDataset*>(
               &_MetricDataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MetricDataset& a, MetricDataset& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricDataset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricDataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricDataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricDataset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricDataset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetricDataset& from) {
    MetricDataset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricDataset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.MetricDataset";
  }
  protected:
  explicit MetricDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kLabelFieldNumber = 1,
  };
  // repeated float data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:common.MetricDataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class JoinServerContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.JoinServerContext) */ {
 public:
  inline JoinServerContext() : JoinServerContext(nullptr) {}
  ~JoinServerContext() override;
  explicit PROTOBUF_CONSTEXPR JoinServerContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinServerContext(const JoinServerContext& from);
  JoinServerContext(JoinServerContext&& from) noexcept
    : JoinServerContext() {
    *this = ::std::move(from);
  }

  inline JoinServerContext& operator=(const JoinServerContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinServerContext& operator=(JoinServerContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinServerContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinServerContext* internal_default_instance() {
    return reinterpret_cast<const JoinServerContext*>(
               &_JoinServerContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JoinServerContext& a, JoinServerContext& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinServerContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinServerContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinServerContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinServerContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinServerContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinServerContext& from) {
    JoinServerContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinServerContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.JoinServerContext";
  }
  protected:
  explicit JoinServerContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyIdFieldNumber = 1,
    kAppSKeyFieldNumber = 2,
  };
  // string session_key_id = 1;
  void clear_session_key_id();
  const std::string& session_key_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_key_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_key_id();
  PROTOBUF_NODISCARD std::string* release_session_key_id();
  void set_allocated_session_key_id(std::string* session_key_id);
  private:
  const std::string& _internal_session_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_key_id(const std::string& value);
  std::string* _internal_mutable_session_key_id();
  public:

  // .common.KeyEnvelope app_s_key = 2;
  bool has_app_s_key() const;
  private:
  bool _internal_has_app_s_key() const;
  public:
  void clear_app_s_key();
  const ::common::KeyEnvelope& app_s_key() const;
  PROTOBUF_NODISCARD ::common::KeyEnvelope* release_app_s_key();
  ::common::KeyEnvelope* mutable_app_s_key();
  void set_allocated_app_s_key(::common::KeyEnvelope* app_s_key);
  private:
  const ::common::KeyEnvelope& _internal_app_s_key() const;
  ::common::KeyEnvelope* _internal_mutable_app_s_key();
  public:
  void unsafe_arena_set_allocated_app_s_key(
      ::common::KeyEnvelope* app_s_key);
  ::common::KeyEnvelope* unsafe_arena_release_app_s_key();

  // @@protoc_insertion_point(class_scope:common.JoinServerContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_id_;
    ::common::KeyEnvelope* app_s_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// double latitude = 1;
inline void Location::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Location::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Location::latitude() const {
  // @@protoc_insertion_point(field_get:common.Location.latitude)
  return _internal_latitude();
}
inline void Location::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Location::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:common.Location.latitude)
}

// double longitude = 2;
inline void Location::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Location::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Location::longitude() const {
  // @@protoc_insertion_point(field_get:common.Location.longitude)
  return _internal_longitude();
}
inline void Location::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Location::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:common.Location.longitude)
}

// double altitude = 3;
inline void Location::clear_altitude() {
  _impl_.altitude_ = 0;
}
inline double Location::_internal_altitude() const {
  return _impl_.altitude_;
}
inline double Location::altitude() const {
  // @@protoc_insertion_point(field_get:common.Location.altitude)
  return _internal_altitude();
}
inline void Location::_internal_set_altitude(double value) {
  
  _impl_.altitude_ = value;
}
inline void Location::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:common.Location.altitude)
}

// .common.LocationSource source = 4;
inline void Location::clear_source() {
  _impl_.source_ = 0;
}
inline ::common::LocationSource Location::_internal_source() const {
  return static_cast< ::common::LocationSource >(_impl_.source_);
}
inline ::common::LocationSource Location::source() const {
  // @@protoc_insertion_point(field_get:common.Location.source)
  return _internal_source();
}
inline void Location::_internal_set_source(::common::LocationSource value) {
  
  _impl_.source_ = value;
}
inline void Location::set_source(::common::LocationSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:common.Location.source)
}

// float accuracy = 5;
inline void Location::clear_accuracy() {
  _impl_.accuracy_ = 0;
}
inline float Location::_internal_accuracy() const {
  return _impl_.accuracy_;
}
inline float Location::accuracy() const {
  // @@protoc_insertion_point(field_get:common.Location.accuracy)
  return _internal_accuracy();
}
inline void Location::_internal_set_accuracy(float value) {
  
  _impl_.accuracy_ = value;
}
inline void Location::set_accuracy(float value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:common.Location.accuracy)
}

// -------------------------------------------------------------------

// KeyEnvelope

// string kek_label = 1;
inline void KeyEnvelope::clear_kek_label() {
  _impl_.kek_label_.ClearToEmpty();
}
inline const std::string& KeyEnvelope::kek_label() const {
  // @@protoc_insertion_point(field_get:common.KeyEnvelope.kek_label)
  return _internal_kek_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyEnvelope::set_kek_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kek_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.KeyEnvelope.kek_label)
}
inline std::string* KeyEnvelope::mutable_kek_label() {
  std::string* _s = _internal_mutable_kek_label();
  // @@protoc_insertion_point(field_mutable:common.KeyEnvelope.kek_label)
  return _s;
}
inline const std::string& KeyEnvelope::_internal_kek_label() const {
  return _impl_.kek_label_.Get();
}
inline void KeyEnvelope::_internal_set_kek_label(const std::string& value) {
  
  _impl_.kek_label_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyEnvelope::_internal_mutable_kek_label() {
  
  return _impl_.kek_label_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyEnvelope::release_kek_label() {
  // @@protoc_insertion_point(field_release:common.KeyEnvelope.kek_label)
  return _impl_.kek_label_.Release();
}
inline void KeyEnvelope::set_allocated_kek_label(std::string* kek_label) {
  if (kek_label != nullptr) {
    
  } else {
    
  }
  _impl_.kek_label_.SetAllocated(kek_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kek_label_.IsDefault()) {
    _impl_.kek_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.KeyEnvelope.kek_label)
}

// bytes aes_key = 2;
inline void KeyEnvelope::clear_aes_key() {
  _impl_.aes_key_.ClearToEmpty();
}
inline const std::string& KeyEnvelope::aes_key() const {
  // @@protoc_insertion_point(field_get:common.KeyEnvelope.aes_key)
  return _internal_aes_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyEnvelope::set_aes_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aes_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.KeyEnvelope.aes_key)
}
inline std::string* KeyEnvelope::mutable_aes_key() {
  std::string* _s = _internal_mutable_aes_key();
  // @@protoc_insertion_point(field_mutable:common.KeyEnvelope.aes_key)
  return _s;
}
inline const std::string& KeyEnvelope::_internal_aes_key() const {
  return _impl_.aes_key_.Get();
}
inline void KeyEnvelope::_internal_set_aes_key(const std::string& value) {
  
  _impl_.aes_key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyEnvelope::_internal_mutable_aes_key() {
  
  return _impl_.aes_key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyEnvelope::release_aes_key() {
  // @@protoc_insertion_point(field_release:common.KeyEnvelope.aes_key)
  return _impl_.aes_key_.Release();
}
inline void KeyEnvelope::set_allocated_aes_key(std::string* aes_key) {
  if (aes_key != nullptr) {
    
  } else {
    
  }
  _impl_.aes_key_.SetAllocated(aes_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aes_key_.IsDefault()) {
    _impl_.aes_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.KeyEnvelope.aes_key)
}

// -------------------------------------------------------------------

// Metric

// string name = 1;
inline void Metric::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:common.Metric.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metric::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.Metric.name)
}
inline std::string* Metric::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:common.Metric.name)
  return _s;
}
inline const std::string& Metric::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Metric::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Metric::release_name() {
  // @@protoc_insertion_point(field_release:common.Metric.name)
  return _impl_.name_.Release();
}
inline void Metric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.Metric.name)
}

// repeated .google.protobuf.Timestamp timestamps = 2;
inline int Metric::_internal_timestamps_size() const {
  return _impl_.timestamps_.size();
}
inline int Metric::timestamps_size() const {
  return _internal_timestamps_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Metric::mutable_timestamps(int index) {
  // @@protoc_insertion_point(field_mutable:common.Metric.timestamps)
  return _impl_.timestamps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp >*
Metric::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:common.Metric.timestamps)
  return &_impl_.timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Metric::_internal_timestamps(int index) const {
  return _impl_.timestamps_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Metric::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:common.Metric.timestamps)
  return _internal_timestamps(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Metric::_internal_add_timestamps() {
  return _impl_.timestamps_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Metric::add_timestamps() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _add = _internal_add_timestamps();
  // @@protoc_insertion_point(field_add:common.Metric.timestamps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp >&
Metric::timestamps() const {
  // @@protoc_insertion_point(field_list:common.Metric.timestamps)
  return _impl_.timestamps_;
}

// repeated .common.MetricDataset datasets = 3;
inline int Metric::_internal_datasets_size() const {
  return _impl_.datasets_.size();
}
inline int Metric::datasets_size() const {
  return _internal_datasets_size();
}
inline void Metric::clear_datasets() {
  _impl_.datasets_.Clear();
}
inline ::common::MetricDataset* Metric::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:common.Metric.datasets)
  return _impl_.datasets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::MetricDataset >*
Metric::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:common.Metric.datasets)
  return &_impl_.datasets_;
}
inline const ::common::MetricDataset& Metric::_internal_datasets(int index) const {
  return _impl_.datasets_.Get(index);
}
inline const ::common::MetricDataset& Metric::datasets(int index) const {
  // @@protoc_insertion_point(field_get:common.Metric.datasets)
  return _internal_datasets(index);
}
inline ::common::MetricDataset* Metric::_internal_add_datasets() {
  return _impl_.datasets_.Add();
}
inline ::common::MetricDataset* Metric::add_datasets() {
  ::common::MetricDataset* _add = _internal_add_datasets();
  // @@protoc_insertion_point(field_add:common.Metric.datasets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::MetricDataset >&
Metric::datasets() const {
  // @@protoc_insertion_point(field_list:common.Metric.datasets)
  return _impl_.datasets_;
}

// .common.MetricKind kind = 4;
inline void Metric::clear_kind() {
  _impl_.kind_ = 0;
}
inline ::common::MetricKind Metric::_internal_kind() const {
  return static_cast< ::common::MetricKind >(_impl_.kind_);
}
inline ::common::MetricKind Metric::kind() const {
  // @@protoc_insertion_point(field_get:common.Metric.kind)
  return _internal_kind();
}
inline void Metric::_internal_set_kind(::common::MetricKind value) {
  
  _impl_.kind_ = value;
}
inline void Metric::set_kind(::common::MetricKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:common.Metric.kind)
}

// -------------------------------------------------------------------

// MetricDataset

// string label = 1;
inline void MetricDataset::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& MetricDataset::label() const {
  // @@protoc_insertion_point(field_get:common.MetricDataset.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricDataset::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.MetricDataset.label)
}
inline std::string* MetricDataset::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:common.MetricDataset.label)
  return _s;
}
inline const std::string& MetricDataset::_internal_label() const {
  return _impl_.label_.Get();
}
inline void MetricDataset::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricDataset::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricDataset::release_label() {
  // @@protoc_insertion_point(field_release:common.MetricDataset.label)
  return _impl_.label_.Release();
}
inline void MetricDataset::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.MetricDataset.label)
}

// repeated float data = 2;
inline int MetricDataset::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int MetricDataset::data_size() const {
  return _internal_data_size();
}
inline void MetricDataset::clear_data() {
  _impl_.data_.Clear();
}
inline float MetricDataset::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline float MetricDataset::data(int index) const {
  // @@protoc_insertion_point(field_get:common.MetricDataset.data)
  return _internal_data(index);
}
inline void MetricDataset::set_data(int index, float value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.MetricDataset.data)
}
inline void MetricDataset::_internal_add_data(float value) {
  _impl_.data_.Add(value);
}
inline void MetricDataset::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:common.MetricDataset.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MetricDataset::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MetricDataset::data() const {
  // @@protoc_insertion_point(field_list:common.MetricDataset.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MetricDataset::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MetricDataset::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:common.MetricDataset.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// JoinServerContext

// string session_key_id = 1;
inline void JoinServerContext::clear_session_key_id() {
  _impl_.session_key_id_.ClearToEmpty();
}
inline const std::string& JoinServerContext::session_key_id() const {
  // @@protoc_insertion_point(field_get:common.JoinServerContext.session_key_id)
  return _internal_session_key_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinServerContext::set_session_key_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_key_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.JoinServerContext.session_key_id)
}
inline std::string* JoinServerContext::mutable_session_key_id() {
  std::string* _s = _internal_mutable_session_key_id();
  // @@protoc_insertion_point(field_mutable:common.JoinServerContext.session_key_id)
  return _s;
}
inline const std::string& JoinServerContext::_internal_session_key_id() const {
  return _impl_.session_key_id_.Get();
}
inline void JoinServerContext::_internal_set_session_key_id(const std::string& value) {
  
  _impl_.session_key_id_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinServerContext::_internal_mutable_session_key_id() {
  
  return _impl_.session_key_id_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinServerContext::release_session_key_id() {
  // @@protoc_insertion_point(field_release:common.JoinServerContext.session_key_id)
  return _impl_.session_key_id_.Release();
}
inline void JoinServerContext::set_allocated_session_key_id(std::string* session_key_id) {
  if (session_key_id != nullptr) {
    
  } else {
    
  }
  _impl_.session_key_id_.SetAllocated(session_key_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_key_id_.IsDefault()) {
    _impl_.session_key_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.JoinServerContext.session_key_id)
}

// .common.KeyEnvelope app_s_key = 2;
inline bool JoinServerContext::_internal_has_app_s_key() const {
  return this != internal_default_instance() && _impl_.app_s_key_ != nullptr;
}
inline bool JoinServerContext::has_app_s_key() const {
  return _internal_has_app_s_key();
}
inline void JoinServerContext::clear_app_s_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.app_s_key_ != nullptr) {
    delete _impl_.app_s_key_;
  }
  _impl_.app_s_key_ = nullptr;
}
inline const ::common::KeyEnvelope& JoinServerContext::_internal_app_s_key() const {
  const ::common::KeyEnvelope* p = _impl_.app_s_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::KeyEnvelope&>(
      ::common::_KeyEnvelope_default_instance_);
}
inline const ::common::KeyEnvelope& JoinServerContext::app_s_key() const {
  // @@protoc_insertion_point(field_get:common.JoinServerContext.app_s_key)
  return _internal_app_s_key();
}
inline void JoinServerContext::unsafe_arena_set_allocated_app_s_key(
    ::common::KeyEnvelope* app_s_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.app_s_key_);
  }
  _impl_.app_s_key_ = app_s_key;
  if (app_s_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.JoinServerContext.app_s_key)
}
inline ::common::KeyEnvelope* JoinServerContext::release_app_s_key() {
  
  ::common::KeyEnvelope* temp = _impl_.app_s_key_;
  _impl_.app_s_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::KeyEnvelope* JoinServerContext::unsafe_arena_release_app_s_key() {
  // @@protoc_insertion_point(field_release:common.JoinServerContext.app_s_key)
  
  ::common::KeyEnvelope* temp = _impl_.app_s_key_;
  _impl_.app_s_key_ = nullptr;
  return temp;
}
inline ::common::KeyEnvelope* JoinServerContext::_internal_mutable_app_s_key() {
  
  if (_impl_.app_s_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::KeyEnvelope>(GetArenaForAllocation());
    _impl_.app_s_key_ = p;
  }
  return _impl_.app_s_key_;
}
inline ::common::KeyEnvelope* JoinServerContext::mutable_app_s_key() {
  ::common::KeyEnvelope* _msg = _internal_mutable_app_s_key();
  // @@protoc_insertion_point(field_mutable:common.JoinServerContext.app_s_key)
  return _msg;
}
inline void JoinServerContext::set_allocated_app_s_key(::common::KeyEnvelope* app_s_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.app_s_key_;
  }
  if (app_s_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(app_s_key);
    if (message_arena != submessage_arena) {
      app_s_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_s_key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.app_s_key_ = app_s_key;
  // @@protoc_insertion_point(field_set_allocated:common.JoinServerContext.app_s_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::Modulation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::Modulation>() {
  return ::common::Modulation_descriptor();
}
template <> struct is_proto_enum< ::common::Region> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::Region>() {
  return ::common::Region_descriptor();
}
template <> struct is_proto_enum< ::common::MType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::MType>() {
  return ::common::MType_descriptor();
}
template <> struct is_proto_enum< ::common::MacVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::MacVersion>() {
  return ::common::MacVersion_descriptor();
}
template <> struct is_proto_enum< ::common::RegParamsRevision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::RegParamsRevision>() {
  return ::common::RegParamsRevision_descriptor();
}
template <> struct is_proto_enum< ::common::LocationSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::LocationSource>() {
  return ::common::LocationSource_descriptor();
}
template <> struct is_proto_enum< ::common::Aggregation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::Aggregation>() {
  return ::common::Aggregation_descriptor();
}
template <> struct is_proto_enum< ::common::MetricKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::MetricKind>() {
  return ::common::MetricKind_descriptor();
}
template <> struct is_proto_enum< ::common::DeviceClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::DeviceClass>() {
  return ::common::DeviceClass_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fcommon_2eproto
